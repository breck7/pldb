belowAsCodeParser
 description Print the Scroll code of the next node.
 extends abstractScrollParser
 catchAllCellType integerCell
 cruxFromId
 javascript
  method = "next"
  get code() {
   const { method } = this
   let code = ""
   
   let nodes = []
   let next = this[method]
   let {howMany} = this
   while (howMany) {
    nodes.push(next)
    next = next[method]
    howMany--
   }
   if (this.reverse) nodes.reverse()
   return nodes.map(node => node.asString).join("\n")
  }
  reverse = false
  compile() {
   return `<code class="scrollCodeBlock">${this.code.replace(/\</g, "&lt;")}</code>`
  }
  get howMany() {
    let howMany = parseInt(this.getWord(1))
   if (!howMany || isNaN(howMany)) howMany = 1
   return howMany
  }

belowAsCodeUntilParser
 description Same as belowAsCode, except you can provide a search string to find the line where printing should stop.
 extends belowAsCodeParser
 catchAllCellType anyCell
 javascript
  get howMany() {
    let howMany = 1
    const query = this.content
    let node = this.next
    while (node !== this) {
      if (node.getLine().startsWith(query))
        return howMany
      node = node.next
      howMany++
    }
    return howMany
  }

aboveAsCodeParser
 description Print the Scroll code for the previous node.
 extends belowAsCodeParser
 javascript
  method = "previous"
  reverse = true