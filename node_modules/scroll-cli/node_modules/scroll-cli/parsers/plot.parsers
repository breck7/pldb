abstractPlotParser
 description Use Plot from observablehq.
 extends abstractScrollWithRequirementsParser
 string iris
  sepal_length,sepal_width,petal_length,petal_width,species
  6.1,3,4.9,1.8,virginica
  5.6,2.7,4.2,1.3,versicolor
  5.6,2.8,4.9,2,virginica
  6.2,2.8,4.8,1.8,virginica
  7.7,3.8,6.7,2.2,virginica
  5.3,3.7,1.5,0.2,setosa
  6.2,3.4,5.4,2.3,virginica
  4.9,2.5,4.5,1.7,virginica
  5.1,3.5,1.4,0.2,setosa
  5,3.4,1.5,0.2,setosa
 string copyFromExternal d3.js plot.js
 string requireOnce
  <script src="d3.js"></script>
  <script src="plot.js"></script>
 example
  plot
 javascript
  compileInstance() {
   const id = "plot" + this._getUid()
   return `<div id="${id}"></div><script>
   {
    let loadChart = async () => {
    const data = ${this.dataCode}
    const get = (col, index ) => col !== "undefined" ? col : (index === undefined ? undefined : Object.keys(data[0])[index])
    document.querySelector("#${id}").append(Plot.plot(${this.plotOptions}))
    }
    loadChart()
    }
    </script>`
  }
  get marks() {
    // just for testing purposes
    return `Plot.rectY({length: 10000}, Plot.binX({y: "count"}, {x: d3.randomNormal()}))`
  }
  get dataCode() {
    return '[]'
  }
  get plotOptions() {
    return `{
      title: "${this.get("title") || ""}",
      subtitle: "${this.get("subtitle") || ""}",
      caption: "${this.get("caption") || ""}",
      symbol: {legend: ${this.has("symbol")}},
      color: {legend: ${this.has("fill")}},
      grid: ${this.get("grid") !== "false"},
      marks: [${this.marks}],
    }`
  }

scatterplotParser
 extends abstractPlotParser
 // todo: make copyFromExternal work with inheritance
 string copyFromExternal d3.js plot.js
 javascript
  get dataCode() {
    let data = this.iris
    const dataset = this.getNode("data")
    const datasetContent = dataset?.content
    const isUrl = !!datasetContent?.match(/^https?:/)
    if (dataset?.length)
      data = dataset.childrenToString()
    else if (datasetContent && !isUrl) {
      const { Disk } = require("scrollsdk/products/Disk.node.js")
      const path = require("path")
      const {file} = this.parent
      data = Disk.read(path.join(file.folderPath, datasetContent))
    }
    let dataString = `d3.csvParse(\`${data}\`, d3.autoType)`
    if (isUrl)
      dataString = `await d3.${datasetContent.endsWith("tsv") ? "tsv" : "csv"}("${datasetContent}")`
    return dataString
  }
  get marks() {
    const x = this.get("x")
    const y = this.get("y")
    const text = this.get("label")
    return `Plot.dot(data, {
      x: get("${x}", 0),
      y: get("${y}", 1),
      r: get("${this.get("radius")}"),
      fill: get("${this.get("fill")}"),
      tip: true,
      symbol: get("${this.get("symbol")}")} ), Plot.text(data, {x: get("${x}",0), y: get("${y}", 1), text: "${text}", dy: -6, lineAnchor: "bottom"})`
  }