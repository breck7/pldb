endSnippetParser
 popularity 0.004293
 description Cut for snippet here.
 extends abstractScrollParser
 cruxFromId
 javascript
  compile() {
   return ""
  }

printSnippetsParser
 popularity 0.000338
 // todo: why are we extending AT here and not loops? Is it for class/id etc?
 extends abstractAftertextParser
 cruxFromId
 atoms cueAtom
 catchAllAtomType tagWithOptionalFolderAtom
 description Prints snippets matching tag(s).
 example
  printSnippets index
 javascript
  makeSnippet(file, compileSettings) {
    const {scrollProgram, endSnippetIndex} = file
    if (endSnippetIndex === -1) return scrollProgram.compileEmbeddedVersion(compileSettings) + file.viewSourceHtml
    const linkRelativeToCompileTarget = compileSettings.relativePath + file.permalink
    const joinChar = "\n"
    const html = scrollProgram
        .map((subparticle, index) => (index >= endSnippetIndex ? "" : subparticle.compileEmbeddedVersion ? subparticle.compileEmbeddedVersion(compileSettings) : subparticle.compile(compileSettings)))
        .filter(i => i)
        .join(joinChar)
        .trim() +
      `<a class="scrollContinueReadingLink" href="${linkRelativeToCompileTarget}">Continue reading...</a>`
    return html
  }
  get files() {
   const thisFile = this.parent.file
   const files = this.parent.file.getFilesWithTagsForEmbedding(this.content, this.has("limit") ? parseInt(this.get("limit")) : undefined).filter(file => file.file !== thisFile)
   // allow sortBy lastCommit Time
   if (this.get("sortBy") === "commitTime") {
     return require("lodash").sortBy(files, file => file.file.lastCommitTime).reverse()
   }
   return files
  }
  compile() {
   const alreadyRequired = this.root.alreadyRequired
   const snippets = this.files.map(file => {
    const compileSettings = {relativePath: file.relativePath, alreadyRequired }
    return `<div class="scrollSnippetContainer">${this.makeSnippet(file.file, compileSettings)}</div>`
    }).join("\n\n")
   return `<div class="scrollColumns" style="column-width:35ch;">${snippets}</div>`
  }
  compileTxt() {
   return this.files.map(file =>  {
    const title = file.file.title
    const ruler = "=".repeat(title.length)
    // Note: I tried to print the description here but the description generating code needs work.
    return `${title}\n${ruler}\n${file.file.date}\n${file.file.absoluteLink}`
   }).join("\n\n")
  }

printFullSnippetsParser
 popularity 0.000048
 extends printSnippetsParser
 cruxFromId
 description Print full pages in group(s).
 javascript
  makeSnippet(file, compileSettings) {
   return file.scrollProgram.compileEmbeddedVersion(compileSettings) + file.viewSourceHtml
  }

printRelatedParser
 popularity 0.001182
 description Print links to related posts.
 extends printSnippetsParser
 cruxFromId
 javascript
  compile() {
   const alreadyRequired = this.root.alreadyRequired
   const list = this.files.map(fileWrapper => {
    const {relativePath, file} = fileWrapper
    const {title, permalink, year} = file
    return `- ${title}${year ? " (" + year + ")" : ""}\n link ${relativePath + permalink}`
    }).join("\n")
    const items = this.parent.concat(list)
    const html = items.map(item => item.compile()).join("\n")
    items.forEach(item => item.destroy())
   return html
  }