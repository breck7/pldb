measureNameCell
 extends commandWordCell
 // A regex for column names for max compatibility with a broad range of data science tools:
 regex [a-zA-Z][a-zA-Z0-9]*

buildMeasuresParser
 popularity 0.000024
 cruxFromId
 description Write measures to csv+ files.
 extends abstractBuildCommandParser
 sortByParser
  cruxFromId
  cells commandWordCell anyCell

// The main measure parser. All measures should extend from this.
abstractMeasureParser
 cells measureNameCell
 cruxFromId
 boolean isMeasure true
 float sortIndex 1.9
 boolean isComputed false
 string typeForWebForms text
 extends abstractScrollParser
 javascript
  compileEmbeddedVersion() {
   return ""
  }
  compile() {
   return ""
  }
  get measureValue() {
    return this.content ?? ""
  }
  get measureName() {
    return this.getFirstWordPath().replace(/ /g, "_")
  }

// String Measures
abstractWordMeasureParser
 description A measure that contains a single word.
 cells measureNameCell wordCell
 extends abstractMeasureParser

abstractStringMeasureParser
 catchAllCellType stringCell
 extends abstractMeasureParser

abstractEmailMeasureParser
 string typeForWebForms email
 cells measureNameCell emailAddressCell
 extends abstractWordMeasureParser

// URL Parsers
abstractUrlMeasureParser
 string typeForWebForms url
 cells measureNameCell urlCell
 extends abstractWordMeasureParser

// Required ID measure which denotes a concept
abstractIdParser
 crux id
 description What is the ID of this concept?
 extends abstractStringMeasureParser
 float sortIndex 1
 boolean isMeasureRequired true
 boolean isConceptDelimiter true
 javascript
  getErrors() {
    const errors = super.getErrors()
    let requiredMeasureNames = this.parent.file.measures.filter(measure => measure.isMeasureRequired).map(measure => measure.Name).filter(name => name !== "id")
    if (!requiredMeasureNames.length) return errors
    let next = this.next
    while (requiredMeasureNames.length && next.firstWord !== "id" && next.getIndex() !== 0) {
      requiredMeasureNames = requiredMeasureNames.filter(i => i !== next.firstWord)
      next = next.next
    }
    requiredMeasureNames.forEach(name =>
      errors.push(this.makeError(`Concept "${this.content}" is missing required measure "${name}".`))
    )
    return errors
  }

// Numeric Measures
abstractNumericMeasureParser
 string typeForWebForms number
 extends abstractMeasureParser
 javascript
  get measureValue() {
    const {content} = this
    return content === undefined ? "" : parseFloat(content)
  }

abstractIntegerMeasureParser
 cells measureNameCell integerCell
 extends abstractNumericMeasureParser

abstractFloatMeasureParser
 cells measureNameCell floatCell
 extends abstractNumericMeasureParser

abstractPercentageMeasureParser
 cells measureNameCell percentCell
 extends abstractNumericMeasureParser
 javascript
  get measureValue() {
    const {content} = this
    return content === undefined ? "" : parseFloat(content)
  }

// Enum Measures
abstractEnumMeasureParser
 cells measureNameCell enumCell
 extends abstractMeasureParser

// Boolean Measures
abstractBooleanMeasureParser
 cells measureNameCell booleanCell
 extends abstractMeasureParser
 javascript
  get measureValue() {
    const {content} = this
    return content === undefined ? "" : content == "true"
  }
