paragraphParser
 // todo Perhaps rewrite this from scratch and move out of aftertext.
 extends abstractAftertextParser
 catchAllCellType stringCell
 description A paragraph.
 boolean suggestInAutocomplete false
 cruxFromId
 javascript
  compile(compileSettings) {
   if (this.isHidden) return ""
   // Hacky, I know.
   const newLine = this.has("wrapsOn") ? undefined : this.appendLine("wrapsOn")
   const compiled = super.compile(compileSettings)
   if (newLine)
    newLine.destroy()
   return compiled
  }
  compileTxt() {
    const children = this.filter(node => node.compileTxt).map(node => node.compileTxt()).filter(i => i).join("\n")
    const dateline = this.getNode("dateline")
    return (dateline ? dateline.day + "\n\n" : "") + (this.originalText || "") + (children ? "\n " + children.replace(/\n/g, "\n ") : "")
  }

quickParagraphParser
 crux *
 extends paragraphParser
 description A paragraph.
 example
  * I had a _new_ idea.

scrollCenteredParagraphParser
 // todo: does not work with gazette.
 crux center
 extends paragraphParser
 description A centered paragraph.
 example
  center Hello world
 javascript
  compile(compileSettings) {
   return `<div style="text-align:center;">${super.compile(compileSettings)}</div>`
  }

abstractIndentableParagraphParser
 extends paragraphParser
 inScope abstractAftertextDirectiveParser abstractAftertextAttributeParser abstractIndentableParagraphParser
 javascript
  compileChildren() {
    return this.map(node => node.compile())
     .join("\n")
     .trim()
  }
  compile() {
   return super.compile() + this.compileChildren()
  }
  compileTxt() {
    return this.getWord(0) + " " + super.compileTxt()
  }