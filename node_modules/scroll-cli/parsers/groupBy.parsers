scrollGroupByParser
 catchAllAtomType columnNameAtom
 extends abstractTableTransformParser
 description Combine rows with matching values into groups.
 example
  tables posts.csv
   groupBy year
    printTable
 crux groupBy
 javascript
  get coreTable() {
    if (this._coreTable) return this._coreTable
   const groupByColNames = this.getAtomsFrom(1)
   const {coreTable} = this.parent
   if (!groupByColNames.length) return coreTable
   const newCols = this.findParticles("reduce").map(reduceParticle => {
    return {
     source: reduceParticle.getAtom(1),
     reduction: reduceParticle.getAtom(2),
     name: reduceParticle.getAtom(3) || reduceParticle.getAtomsFrom(1).join("_")
    }
   })
   // Pivot is shorthand for group and reduce?
   const makePivotTable = (rows, groupByColumnNames, inputColumnNames, newCols) => {
     const colMap = {}
     inputColumnNames.forEach((col) => (colMap[col] = true))
     const groupByCols = groupByColumnNames.filter((col) => colMap[col])
     return new PivotTable(rows, inputColumnNames.map(c => {return {name: c}}), newCols).getNewRows(groupByCols)
   }
   class PivotTable {
     constructor(rows, inputColumns, outputColumns) {
       this._columns = {}
       this._rows = rows
       inputColumns.forEach((col) => (this._columns[col.name] = col))
       outputColumns.forEach((col) => (this._columns[col.name] = col))
     }
     _getGroups(allRows, groupByColNames) {
       const rowsInGroups = new Map()
       allRows.forEach((row) => {
         const groupKey = groupByColNames.map((col) => row[col]?.toString().replace(/ /g, "") || "").join(" ")
         if (!rowsInGroups.has(groupKey)) rowsInGroups.set(groupKey, [])
         rowsInGroups.get(groupKey).push(row)
       })
       return rowsInGroups
     }
     getNewRows(groupByCols) {
       // make new particles
       const rowsInGroups = this._getGroups(this._rows, groupByCols)
       // Any column in the group should be reused by the children
       const columns = [
         {
           name: "count",
           type: "number",
           min: 0,
         },
       ]
       groupByCols.forEach((colName) => columns.push(this._columns[colName]))
       const colsToReduce = Object.values(this._columns).filter((col) => !!col.reduction)
       colsToReduce.forEach((col) => columns.push(col))
       // for each group
       const rows = []
       const totalGroups = rowsInGroups.size
       for (let [groupId, group] of rowsInGroups) {
         const firstRow = group[0]
         const newRow = {}
         groupByCols.forEach((col) =>
           newRow[col] = firstRow ? firstRow[col] : 0
         )
         newRow.count = group.length
         // todo: add more reductions? count, stddev, median, variance.
         colsToReduce.forEach((col) => {
           const sourceColName = col.source
           const reduction = col.reduction
           if (reduction === "concat") {
              newRow[col.name] = group.map((row) => row[sourceColName]).join(" ")
              return 
           }
           if (reduction === "first") {
              newRow[col.name] = group[0][sourceColName]
              return 
           }
           const values = group.map((row) => row[sourceColName]).filter((val) => typeof val === "number" && !isNaN(val))
           let reducedValue = firstRow[sourceColName]
           if (reduction === "sum") reducedValue = values.reduce((prev, current) => prev + current, 0)
           if (reduction === "max") reducedValue = Math.max(...values)
           if (reduction === "min") reducedValue = Math.min(...values)
           if (reduction === "mean") reducedValue = values.reduce((prev, current) => prev + current, 0) / values.length
           newRow[col.name] = reducedValue
         })
         rows.push(newRow)
       }
       // todo: add tests. figure out this api better.
       Object.values(columns).forEach((col) => {
         // For pivot columns, remove the source and reduction info for now. Treat things as immutable.
         delete col.source
         delete col.reduction
       })
       return {
         rows,
         columns,
       }
     }
   }
   const pivotTable = makePivotTable(coreTable, groupByColNames, this.parent.columnNames, newCols)
   this._coreTable = pivotTable.rows
   this._columnNames = pivotTable.columns.map(col => col.name)
   return pivotTable.rows
  }
  get columnNames() {
    const {coreTable} = this
    return this._columnNames || this.parent.columnNames
  }
