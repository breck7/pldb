abstractThemeCssParser
 description Extend this to create a Scroll CSS theme.
 extends abstractScrollParser
 inScope themeTagsParser
 cruxFromId
 catchAllCellType stringCell
 string scrollStyles
  figure
   margin 0
   padding 0
  .dropcap:first-letter
   font-size 3rem
   line-height .9em
   margin-right .125rem
   display block
   float left
  .dinkus
   text-align center
   padding 1rem
   span
    vertical-align sub
  details
   margin-top 10px
  summary
   font-family "SF Pro", "Helvetica Neue", "Segoe UI", "Arial"
   cursor pointer
  .scrollCaptionedFigure
   display block
   break-inside avoid
   text-align center
   img
    max-width 100%
    height auto
    margin-top .1875rem
   figcaption
    font-family "SF Pro", "Helvetica Neue", "Segoe UI", "Arial"
    font-size .8rem
    .scrollParagraph
     margin-top 0
  .scrollCodeBlock
   overflow auto
   font-size .8rem
   hyphens none
   white-space pre
   break-inside avoid
   display block
   margin .5rem 0
   padding .5rem
   border-radius 0
   position relative
  .codeWithHeader
   break-inside avoid-column
   margin 10px 0
  .codeHeader
   font-size 80%
   text-align center
   background rgba(224, 224, 224, 0.4)
   border 1px solid rgba(204, 204, 204, 0.8)
   border-bottom 0
   margin-bottom -7px
   padding 4px 2px
   border-top-left-radius 3px
   border-top-right-radius 3px
  .scrollCodeBlock:hover
   .scrollCopyButton
    opacity .5
   .scrollCopyButton:hover
    opacity .8
   .scrollCopyButton:active
    opacity 1
  .scrollCopyButton
   position absolute
   top .125rem
   right .125rem
   font-size .875rem
   cursor pointer
   opacity 0
  .scrollCopyButton::after
   content "[ ]"
  .scrollCopiedButton::after
   content "[âœ“]"
 javascript
  compile() {
   return `<style>\n${this.css}\n</style>`
  }
  compileTxt() {
    return ""
  }
  compileCss() {
    return this.css
  }
  compileEmbeddedVersion() {
   return ""
  }
  get scrollCss() {
    const hakonParser = this.root.hakonParser
    return new hakonParser(this.scrollStyles).compile()
  }
