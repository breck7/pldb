captionAftertextParser
 description An image caption.
 crux caption
 extends paragraphParser
 boolean isPopular true

abstractCaptionedParser
 extends abstractScrollParser
 cells commandWordCell urlCell
 inScope captionAftertextParser slashCommentParser
 cruxFromId
 javascript
  compile(compileSettings) {
   const caption = this.getNode("caption")
   const captionFig = caption ? `<figcaption>${caption.compile()}</figcaption>` : ""
   const {figureWidth} = this
   const widthStyle = figureWidth ? `width:${figureWidth}px; margin: auto;` : ""
   const float = this.has("float") ? `margin: 20px; float: ${this.get("float")};` : ""
   return `<figure class="scrollCaptionedFigure" style="${widthStyle + float}">${this.getFigureContent(compileSettings)}${captionFig}</figure>`
  }
  get figureWidth() {
    return this.get("width")
  }

imageParser
 description An img tag.
 boolean isPopular true
 extends abstractCaptionedParser
 inScope classMarkupParser aftertextIdParser linkParser linkTargetParser
 openGraphParser
  description Add this line to make this the open graph image.
  cruxFromId
  cells commandWordCell
 javascript
  get dimensions() {
    const width = this.get("width")
    const height = this.get("height")
    if (width || height)
      return {width, height}
    if (!this.isNodeJs())
      return {}
    const src = this.getWord(1)
    // If its a local image, get the dimensions and put them in the HTML
    // to avoid flicker
   if (src.startsWith("http:") || src.startsWith("https:")) return {}
   const file = this.root.file
    if (this._dimensions)
      return this._dimensions
    try {
     const sizeOf = require("image-size")
     const path = require("path")
     const fullImagePath = path.join(file.folderPath, src)
     this._dimensions = sizeOf(fullImagePath)
     return this._dimensions
    } catch (err) {
     console.error(err)
    }
    return {}
  }
  get figureWidth() {
    return this.dimensions.width
  }
  getFigureContent(compileSettings) {
   const file = this.root.file
   const linkRelativeToCompileTarget = (compileSettings ? (compileSettings.relativePath ?? "") : "") + this.getWord(1)
   const {width, height} = this.dimensions
   let dimensionAttributes = width || height  ? `width="${width}" height="${height}" ` : ""
   // Todo: can we reuse more code from aftertext?
   const className = this.has("class") ? ` class="${this.get("class")}" ` : ""
   const id = this.has("id") ? ` id="${this.get("id")}" ` : ""
   const clickLink = this.get("link") || linkRelativeToCompileTarget
   const target = this.has("target") ? this.get("target") : (this.has("link") ? "" : "_blank")
   return `<a href="${clickLink}" target="${target}" ${className} ${id}><img src="${linkRelativeToCompileTarget}" ${dimensionAttributes}loading="lazy"></a>`
  }
  compileTxt() {
    const children = this.filter(node => node.compileTxt).map(node => node.compileTxt()).filter(i => i).join("\n")
    return  "[Image Omitted]" + (children ? "\n " + children.replace(/\n/g, "\n ") : "")
  }