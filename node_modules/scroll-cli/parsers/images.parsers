captionAftertextParser
 popularity 0.003207
 description An image caption.
 crux caption
 extends paragraphParser
 boolean isPopular true

abstractCaptionedParser
 extends abstractScrollParser
 cells commandWordCell urlCell
 inScope captionAftertextParser slashCommentParser
 cruxFromId
 javascript
  compile(compileSettings) {
   const caption = this.getParticle("caption")
   const captionFig = caption ? `<figcaption>${caption.compile()}</figcaption>` : ""
   const {figureWidth} = this
   const widthStyle = figureWidth ? `width:${figureWidth}px; margin: auto;` : ""
   const float = this.has("float") ? `margin: 20px; float: ${this.get("float")};` : ""
   return `<figure class="scrollCaptionedFigure" style="${widthStyle + float}">${this.getFigureContent(compileSettings)}${captionFig}</figure>`
  }
  get figureWidth() {
    return this.get("width")
  }

openGraphParser
 // todo: fix Parsers scope issue so we can move this parser def under scrollImageParser
 description Add this line to make this the open graph image.
 cruxFromId
 cells commandWordCell

scrollImageParser
 crux image
 popularity 0.005908
 description An img tag.
 boolean isPopular true
 extends abstractCaptionedParser
 int wordIndex 1
 example
  image screenshot.png
   caption A caption.
 inScope classMarkupParser aftertextIdParser linkParser linkTargetParser openGraphParser
 javascript
  get dimensions() {
    const width = this.get("width")
    const height = this.get("height")
    if (width || height)
      return {width, height}
    if (!this.isNodeJs())
      return {}
    const src = this.filename
    // If its a local image, get the dimensions and put them in the HTML
    // to avoid flicker
   if (src.startsWith("http:") || src.startsWith("https:")) return {}
   const file = this.root.file
    if (this._dimensions)
      return this._dimensions
    try {
     const sizeOf = require("image-size")
     const path = require("path")
     const fullImagePath = path.join(file.folderPath, src)
     this._dimensions = sizeOf(fullImagePath)
     return this._dimensions
    } catch (err) {
     console.error(err)
    }
    return {}
  }
  get figureWidth() {
    return this.dimensions.width
  }
  get filename() {
    return this.getWord(this.wordIndex)
  }
  getFigureContent(compileSettings) {
   const file = this.root.file
   const linkRelativeToCompileTarget = (compileSettings ? (compileSettings.relativePath ?? "") : "") + this.filename
   const {width, height} = this.dimensions
   let dimensionAttributes = width || height  ? `width="${width}" height="${height}" ` : ""
   // Todo: can we reuse more code from aftertext?
   const className = this.has("class") ? ` class="${this.get("class")}" ` : ""
   const id = this.has("id") ? ` id="${this.get("id")}" ` : ""
   const clickLink = this.get("link") || linkRelativeToCompileTarget
   const target = this.has("target") ? this.get("target") : (this.has("link") ? "" : "_blank")
   return `<a href="${clickLink}" target="${target}" ${className} ${id}><img src="${linkRelativeToCompileTarget}" ${dimensionAttributes}loading="lazy"></a>`
  }
  compileTxt() {
    const children = this.filter(particle => particle.compileTxt).map(particle => particle.compileTxt()).filter(i => i).join("\n")
    return  "[Image Omitted]" + (children ? "\n " + children.replace(/\n/g, "\n ") : "")
  }

quickImageParser
 popularity 0.005788
 extends scrollImageParser
 cells urlCell
 pattern ^[^\s]+\.(jpg|jpeg|png|gif|webp|svg|bmp)
 int wordIndex 0