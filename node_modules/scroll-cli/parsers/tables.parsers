abstractTableTransformParser
 cells commandWordCell
 inScope abstractTableVisualizationParser abstractTableTransformParser h1Parser h2Parser scrollQuestionParser
 javascript
  get coreTable() {
    return this.parent.coreTable
  }
  get columnNames() {
    return this.parent.columnNames
  }
  getRunTimeEnumOptions(cell) {
   if (cell.cellTypeId === "columnNameCell")
      return this.parent.columnNames
   return super.getRunTimeEnumOptions(cell)
  }
  getRunTimeEnumOptionsForValidation(cell) {
    if (cell.cellTypeId === "columnNameCell")
      return this.parent.columnNames.concat(this.parent.columnNames.map(c => "-" + c)) // Add reverse names
   return super.getRunTimeEnumOptions(cell)
  }

abstractColumnNameParser
 cells commandWordCell columnNameCell
 javascript
  getRunTimeEnumOptions(cell) {
   if (cell.cellTypeId === "columnNameCell")
      return this.parent.columnNames
   return super.getRunTimeEnumOptions(cell)
  }

scrollXParser
 crux x
 extends abstractColumnNameParser

scrollYParser
 crux y
 extends abstractColumnNameParser

abstractTableVisualizationParser
 extends abstractScrollWithRequirementsParser
 boolean isTableVisualization true
 javascript
  get columnNames() {
    return this.parent.columnNames
  }

printTableParser
 cruxFromId
 description Print table.
 extends abstractTableVisualizationParser
 javascript
  get tableHeader() {
   return this.columns.filter(col => !col.isLink).map(column => `<th>${column.name}</th>\n`)
  }
  get columnNames() {
   return this.parent.columnNames
  }
  get columns() {
   const {columnNames} = this
   return columnNames.map((name, index) => {
    const isLink = name.endsWith("Link")
    const linkIndex = columnNames.indexOf(name + "Link")
    return {
     name,
     isLink,
     linkIndex
    }
   })
  }
  toRow(row) {
    const {columns} = this
    const words = columns.map(col => row[col.name])
   let str = ""
   let column = 0
   const columnCount = columns.length
   while (column < columnCount) {
    const col = columns[column]
    column++
    const content = ((columnCount === column ? words.slice(columnCount - 1).join(" ") : words[column - 1]) ?? "").toString()
    if (col.isLink) continue
    let tagged = content
    const link = words[col.linkIndex]
    if (col.linkIndex > -1 && link) tagged = `<a href="${link}">${content}</a>`
    else if (content.match(/^https?\:[^ ]+$/)) tagged = `<a href="${content}">${content}</a>`
    str += `<td>${tagged}</td>\n`
   }
   return str
  }
  get tableBody() {
   return this.parent.coreTable
    .map(row => `<tr>${this.toRow(row)}</tr>`)
    .join("\n")
  }
  compile() {
   return `<table id="table${this._getUid()}" class="scrollTable">
   <thead><tr>${this.tableHeader.join("\n")}</tr></thead>
   <tbody>${this.tableBody}</tbody>
   </table>
   <script>
   document.querySelector('#table${this._getUid()}').addEventListener('click', e => {
    if (window.getSelection().toString() || e.target.closest('a') || !e.target.closest('tbody')) return;
    e.currentTarget.classList.toggle('expandedTable');
   });
   </script>`
  }
  compileTxt() {
    return this.parent.delimitedData || new TreeNode(this.parent.coreTable).asCsv
  }

scrollTableDataParser
 crux data
 description Table from inline delimited data.
 catchAllCellType anyCell
 baseParser blobParser

scrollTableDelimiterParser
 description Set the delimiter.
 crux delimiter
 cells commandWordCell stringCell
 javascript
  compile() {
    return ""
  }

scrollTableParser
 description A table.
 crux table
 example
  table
   printTable
   data
    year,count
    1900,10
    2000,122
    2020,23
 extends abstractScrollParser
 catchAllCellType filePathCell
 inScope scrollTableDataParser scrollTableDelimiterParser abstractTableVisualizationParser abstractTableTransformParser h1Parser h2Parser scrollQuestionParser
 javascript
  get visualizations() {
    return this.topDownArray.filter(node => node.isTableVisualization || node.isHeader)
  }
  compile(compileSettings) {
   return this.visualizations.map(node => node.compile(compileSettings))
     .join("\n")
     .trim()
  }
  compileTxt() {
    return this.visualizations.map(node => node.compileTxt())
     .join("\n")
     .trim()
  }
  get delimiter() {
    const {filename} = this
    let delimiter = ""
    if (filename) {
      const extension = filename.split(".").pop()
      if (extension === "json") delimiter = "json"
      if (extension === "tree") delimiter = "tree"
      if (extension === "csv") delimiter = ","
      if (extension === "tsv") delimiter = "\t"
    }
    if (this.get("delimiter"))
      delimiter = this.get("delimiter")
    else {
      const header = this.delimitedData.split("\n")[0]
      if (header.includes("\t"))
        delimiter = "\t"
      else if (header.includes(","))
       delimiter = ","
      else
       delimiter = " "
    }
    return delimiter
  }
  get filename() {
    return this.content
  }
  get fileFromDisk() {
    const path = require("path")
    const fs = require("fs")
    return fs.readFileSync(path.join(this.parent.file.folderPath, this.filename), "utf8")
  }
  get fileFromLocalStorage() {
    return localStorage.getItem(this.filename) || ""
  }
  get fileContent() {
    return this.isNodeJs() ? this.fileFromDisk : this.fileFromLocalStorage
  }
  get delimitedData() {
    // json csv tsv
    if (this.filename)
      return this.fileContent
    
    return this.getNode("data")?.childrenToString() || ""
  }
  _coreTable
  get coreTable() {
    if (this._coreTable) return this._coreTable
    const {delimiter, delimitedData} = this
    if (delimiter === "json")
       this._coreTable = JSON.parse(delimitedData)
    else if (delimiter === "tree") {
       const d3lib = typeof d3 === "undefined" ? require('d3') : d3
       this._coreTable = d3lib.dsvFormat(",").parse(new TreeNode(delimitedData).asCsv, d3lib.autoType)
    } else {
      const d3lib = typeof d3 === "undefined" ? require('d3') : d3
      this._coreTable = d3lib.dsvFormat(delimiter).parse(delimitedData, d3lib.autoType)
    }
    this._columnNames = this._coreTable.columns
    delete this._coreTable.columns
    return this._coreTable
  }
  get columnNames() {
    // init coreTable to set columns
    const coreTable = this.coreTable
    return this._columnNames
  }

scrollWhereParser
 extends abstractTableTransformParser
 description Filter rows by condition.
 crux where
 cells commandWordCell columnNameCell comparisonCell wordCell
 example
  table iris.csv
   where Species = setosa
 javascript
  get coreTable() {
   // todo: use cells here.
   const columnName = this.getWord(1)
   const operator = this.getWord(2)
   let untypedScalarValue = this.getWord(3)
   const typedValue = isNaN(parseFloat(untypedScalarValue)) ? untypedScalarValue : parseFloat(untypedScalarValue)
   const coreTable = this.parent.coreTable
   if (!columnName || !operator || untypedScalarValue === undefined) return coreTable
    const filterFn = row => {
      const cell = row[columnName]
      const typedCell = cell
      if (operator === "=") return typedValue === typedCell
      else if (operator === "!=") return typedValue !== typedCell
      else if (operator === "includes") return typedCell !== undefined && typedCell.includes(typedValue)
      else if (operator === "doesNotInclude") return typedCell === undefined || !typedCell.includes(typedValue)
      else if (operator === ">") return typedCell > typedValue
      else if (operator === "<") return typedCell < typedValue
      else if (operator === ">=") return typedCell >= typedValue
      else if (operator === "<=") return typedCell <= typedValue
      else if (operator === "empty") return cell === "" || cell === undefined
      else if (operator === "notEmpty") return !(cell === "" || cell === undefined)
    }
   return coreTable.filter(filterFn)
  }

scrollSelectParser
 catchAllCellType columnNameCell
 extends abstractTableTransformParser
 description Drop all columns except these.
 example
  tables
   data
    name,year,count
    index,2022,2
    about,2023,4
   select name year
    printTable
 crux select
 javascript
  get coreTable() {
   const {coreTable} = this.parent
   const {columnNames} = this
   if (!columnNames.length) return coreTable
   return coreTable.map(row => Object.fromEntries(columnNames.map(colName => [colName, row[colName]])))
  }
  get columnNames() {
    return this.getWordsFrom(1)
  }

scrollReverseParser
 extends abstractTableTransformParser
 description Reverse rows.
 crux reverse
 javascript
  get coreTable() {
   return this.parent.coreTable.slice().reverse()
  }

scrollTransposeParser
 extends abstractTableTransformParser
 description Tranpose table.
 crux transpose
 javascript
  get coreTable() {
   // todo: we need to switch to column based coreTable, instead of row based
   const transpose = arr => Object.keys(arr[0]).map(key => [key, ...arr.map(row => row[key])]);
   return transpose(this.parent.coreTable)
  }

scrollImputeParser
 extends abstractTableTransformParser
 description Impute missing values of a columm.
 cells commandWordCell columnNameCell
 crux impute
 javascript
  get coreTable() {
   const {lodash, columnName} = this
   const sorted = lodash.orderBy(this.parent.coreTable.slice(), columnName)
   // ascending
   const imputed = []
   let lastInserted = sorted[0][columnName]
   sorted.forEach(row => {
    const measuredTime = row[columnName]
    while (measuredTime > lastInserted + 1) {
      lastInserted++
      // synthesize rows
      const imputedRow = {}
      imputedRow[columnName] = lastInserted
      imputedRow.count = 0
      imputed.push(imputedRow)
    }
    lastInserted = measuredTime
    imputed.push(row)
   })
   return imputed
  }
  get columnName() {
    return this.getWord(1)
  }
  get lodash() {
    return this.isNodeJs() ? require("lodash") : lodash
  }

scrollOrderByParser
 extends abstractTableTransformParser
 description Sort rows by column(s).
 catchAllCellType columnNameCell
 crux orderBy
 javascript
  get coreTable() {
    const makeLodashOrderByParams = str => {
    const part1 = str.split(" ")
    const part2 = part1.map(col => (col.startsWith("-") ? "desc" : "asc"))
    return [part1.map(col => col.replace(/^\-/, "")), part2]
   }
   const orderBy = makeLodashOrderByParams(this.content)
   return this.lodash.orderBy(this.parent.coreTable.slice(), orderBy[0], orderBy[1])
  }
  get lodash() {
    return this.isNodeJs() ? require("lodash") : lodash
  }

scrollRenameParser
 // todo: add support in Parsers for tuple catch alls
  catchAllCellType columnNameCell wordCell
 catchAllCellType wordCell
 extends abstractTableTransformParser
 description Rename columns.
 example
  tables
   data
    name,year,count
    index,2022,2
   rename name Name year Year
    printTable
 crux rename
 javascript
  get coreTable() {
   const {coreTable} = this.parent
   const {renameMap} = this
   if (!Object.keys(renameMap).length) return coreTable
   return coreTable.map(row => {
      const newRow = {}
      Object.keys(row).forEach(key => {
        const name = renameMap[key] || key
        newRow[name] = row[key]
      })
      return newRow
   })
  }
  get renameMap() {
    const map = {}
    const pairs = this.getWordsFrom(1)
    let oldName
    while (oldName = pairs.shift()) {
      map[oldName] = pairs.shift()
    }
    return map
  }
  _renamed
  get columnNames() {
   if (this._renamed)
     return this._renamed
    const {renameMap} = this
    this._renamed = this.parent.columnNames.map(name => renameMap[name] || name )
    return this._renamed
  }

tableSearchParser
 extends abstractScrollWithRequirementsParser
 string copyFromExternal jquery-3.7.1.min.js datatables.css datatables.min.js tableSearch.js
 string requireOnce
  <script defer src="jquery-3.7.1.min.js"></script>
  <style>.dt-search{font-family: "SF Pro", "Helvetica Neue", "Segoe UI", "Arial";}</style>
  <link rel="stylesheet" href="datatables.css">
  <script defer src="datatables.min.js"></script>
  <script defer src="tableSearch.js"></script>
 // adds to all tables on page
 description Table search and sort widget.
 javascript
  compileInstance() {
   return ""
  }
