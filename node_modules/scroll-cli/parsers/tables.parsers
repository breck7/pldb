abstractTableTransformParser
 atoms cueAtom
 inScope abstractTableVisualizationParser abstractTableTransformParser h1Parser h2Parser scrollQuestionParser scrollLoopParser htmlInlineParser scrollBrParser
 javascript
  get coreTable() {
    return this.parent.coreTable
  }
  get columnNames() {
    return this.parent.columnNames
  }
  getRunTimeEnumOptions(atom) {
   if (atom.atomTypeId === "columnNameAtom")
      return this.parent.columnNames
   return super.getRunTimeEnumOptions(atom)
  }
  getRunTimeEnumOptionsForValidation(atom) {
    // Note: this will fail if the CSV file hasnt been built yet.
    if (atom.atomTypeId === "columnNameAtom")
      return this.parent.columnNames.concat(this.parent.columnNames.map(c => "-" + c)) // Add reverse names
   return super.getRunTimeEnumOptions(atom)
  }

abstractColumnNameParser
 atoms cueAtom columnNameAtom
 javascript
  getRunTimeEnumOptions(atom) {
   if (atom.atomTypeId === "columnNameAtom")
      return this.parent.columnNames
   return super.getRunTimeEnumOptions(atom)
  }

scrollXParser
 crux x
 extends abstractColumnNameParser

scrollYParser
 crux y
 extends abstractColumnNameParser

abstractTableVisualizationParser
 extends abstractScrollWithRequirementsParser
 boolean isTableVisualization true
 javascript
  get columnNames() {
    return this.parent.columnNames
  }

printColumnParser
 popularity 0.000024
 description Print one column
 extends abstractTableVisualizationParser
 example
  printColumn tags
 catchAllAtomType columnNameAtom
 javascript
  compile() {
   return this.columnValues.join("\n")
  }
  compileTxt() {
    return this.columnValues.join("\n")
  }
  get columnName() {
    return this.atoms[1]
  }
  get columnValues() {
    return this.parent.coreTable.map(row => row[this.columnName])
  }


printTableParser
 popularity 0.001085
 cruxFromId
 description Print table.
 extends abstractTableVisualizationParser
 javascript
  get tableHeader() {
   return this.columns.filter(col => !col.isLink).map(column => `<th>${column.name}</th>\n`)
  }
  get columnNames() {
   return this.parent.columnNames
  }
  get columns() {
   const {columnNames} = this
   return columnNames.map((name, index) => {
    const isLink = name.endsWith("Link")
    const linkIndex = columnNames.indexOf(name + "Link")
    return {
     name,
     isLink,
     linkIndex
    }
   })
  }
  toRow(row) {
    const {columns} = this
    const atoms = columns.map(col => row[col.name])
   let str = ""
   let column = 0
   const columnCount = columns.length
   while (column < columnCount) {
    const col = columns[column]
    column++
    const content = ((columnCount === column ? atoms.slice(columnCount - 1).join(" ") : atoms[column - 1]) ?? "").toString()
    if (col.isLink) continue
    const isTimestamp = col.name.toLowerCase().includes("time") && /^\d{10}(\d{3})?$/.test(content)
    const text =  isTimestamp ? new Date(parseInt(content.length === 10 ? content * 1000 : content)).toLocaleString() : content
    let tagged = text
    const link = atoms[col.linkIndex]
    const isUrl = content.match(/^https?\:[^ ]+$/)
    if (col.linkIndex > -1 && link) tagged = `<a href="${link}">${text}</a>`
    else if (col.name.endsWith("Url")) tagged = `<a href="${content}">${col.name.replace("Url", "")}</a>`
    else if (isUrl) tagged = `<a href="${content}">${text}</a>`
    str += `<td>${tagged}</td>\n`
   }
   return str
  }
  get tableBody() {
   return this.parent.coreTable
    .map(row => `<tr>${this.toRow(row)}</tr>`)
    .join("\n")
  }
  compile() {
   return `<table id="table${this._getUid()}" class="scrollTable">
   <thead><tr>${this.tableHeader.join("\n")}</tr></thead>
   <tbody>${this.tableBody}</tbody>
   </table>`
  }
  compileTxt() {
    return this.parent.delimitedData || new Particle(this.parent.coreTable).asCsv
  }

scrollTableDataParser
 popularity 0.001061
 crux data
 description Table from inline delimited data.
 catchAllAtomType anyAtom
 baseParser blobParser

scrollTableDelimiterParser
 popularity 0.001037
 description Set the delimiter.
 crux delimiter
 atoms cueAtom stringAtom
 javascript
  compile() {
    return ""
  }

abstractDatatableProviderParser
 description A datatable.
 extends abstractScrollParser
 inScope scrollTableDataParser scrollTableDelimiterParser abstractTableVisualizationParser abstractTableTransformParser h1Parser h2Parser scrollQuestionParser scrollLoopParser htmlInlineParser scrollBrParser
 javascript
  get visualizations() {
    return this.topDownArray.filter(particle => particle.isTableVisualization || particle.isHeader || particle.isHtml)
  }
  compile(compileSettings) {
   return this.visualizations.map(particle => particle.compile(compileSettings))
     .join("\n")
     .trim()
  }
  compileTxt() {
    return this.visualizations.map(particle => particle.compileTxt())
     .join("\n")
     .trim()
  }
  _coreTable
  get coreTable() {
    if (this._coreTable) return this._coreTable
    const {delimiter, delimitedData} = this
    return []
  }
  get columnNames() {
    return []
  }

scrollTableParser
 extends abstractDatatableProviderParser
 popularity 0.002133
 crux table
 example
  table
   printTable
   data
    year,count
    1900,10
    2000,122
    2020,23
 catchAllAtomType filePathAtom
 int atomIndex 1
 javascript
  get delimiter() {
     const {filename} = this
     let delimiter = ""
     if (filename) {
       const extension = filename.split(".").pop()
       if (extension === "json") delimiter = "json"
       if (extension === "particles") delimiter = "particles"
       if (extension === "csv") delimiter = ","
       if (extension === "tsv") delimiter = "\t"
       if (extension === "ssv") delimiter = " "
       if (extension === "psv") delimiter = "|"
     }
     if (this.get("delimiter"))
       delimiter = this.get("delimiter")
     else if (!delimiter) {
       const header = this.delimitedData.split("\n")[0]
       if (header.includes("\t"))
         delimiter = "\t"
       else if (header.includes(","))
        delimiter = ","
       else
        delimiter = " "
     }
     return delimiter
   }
   get filename() {
     return this.getAtom(this.atomIndex)
   }
   get coreTable() {
    if (this._coreTable) return this._coreTable
    const {delimiter, delimitedData} = this
    if (delimiter === "json") {
       const rows = JSON.parse(delimitedData)
       this._columnNames = rows.length ? Object.keys(rows[0]) : []
       this._coreTable = rows
       return rows
    }
    else if (delimiter === "particles") {
       const d3lib = typeof d3 === "undefined" ? require('d3') : d3
       this._coreTable = d3lib.dsvFormat(",").parse(new Particle(delimitedData).asCsv, d3lib.autoType)
    } else {
      const d3lib = typeof d3 === "undefined" ? require('d3') : d3
      this._coreTable = d3lib.dsvFormat(delimiter).parse(delimitedData, d3lib.autoType)
    }
    this._columnNames = this._coreTable.columns
    delete this._coreTable.columns
    return this._coreTable
  }
  get columnNames() {
    // init coreTable to set columns
    const coreTable = this.coreTable
    return this._columnNames
  }
  async build() {
    if (this.filename)
      await this.root.fetch(this.filename)
  }
  get fileContent() {
    return this.root.readSyncFromFileOrUrl(this.filename)
  }
   get delimitedData() {
     // json csv tsv
     if (this.filename)
       return this.fileContent
     const dataParticle = this.getParticle("data")
     if (dataParticle)
       return dataParticle.subparticlesToString()
     // if not dataparticle and no filename, check [permalink].csv
     if (this.isNodeJs())
       return this.root.readFile(this.root.permalink.replace(".html", "") + ".csv")
     return  ""
   }

quickTableParser
 popularity 0.000024
 extends scrollTableParser
 atoms urlAtom
 pattern ^[^\s]+\.(tsv|csv|ssv|psv)
 int atomIndex 0

scrollWhereParser
 extends abstractTableTransformParser
 description Filter rows by condition.
 crux where
 atoms cueAtom columnNameAtom comparisonAtom atomAtom
 example
  table iris.csv
   where Species = setosa
 javascript
  get coreTable() {
   // todo: use atoms here.
   const columnName = this.getAtom(1)
   const operator = this.getAtom(2)
   let untypedScalarValue = this.getAtom(3)
   const typedValue = isNaN(parseFloat(untypedScalarValue)) ? untypedScalarValue : parseFloat(untypedScalarValue)
   const coreTable = this.parent.coreTable
   if (!columnName || !operator || untypedScalarValue === undefined) return coreTable
    const filterFn = row => {
      const atom = row[columnName]
      const typedAtom = atom
      if (operator === "=") return typedValue === typedAtom
      else if (operator === "!=") return typedValue !== typedAtom
      else if (operator === "includes") return typedAtom !== undefined && typedAtom.includes(typedValue)
      else if (operator === "doesNotInclude") return typedAtom === undefined || !typedAtom.includes(typedValue)
      else if (operator === ">") return typedAtom > typedValue
      else if (operator === "<") return typedAtom < typedValue
      else if (operator === ">=") return typedAtom >= typedValue
      else if (operator === "<=") return typedAtom <= typedValue
      else if (operator === "empty") return atom === "" || atom === undefined
      else if (operator === "notEmpty") return !(atom === "" || atom === undefined)
    }
   return coreTable.filter(filterFn)
  }

scrollSelectParser
 catchAllAtomType columnNameAtom
 extends abstractTableTransformParser
 description Drop all columns except these.
 example
  tables
   data
    name,year,count
    index,2022,2
    about,2023,4
   select name year
    printTable
 crux select
 javascript
  get coreTable() {
   const {coreTable} = this.parent
   const {columnNames} = this
   if (!columnNames.length) return coreTable
   return coreTable.map(row => Object.fromEntries(columnNames.map(colName => [colName, row[colName]])))
  }
  get columnNames() {
    return this.getAtomsFrom(1)
  }

scrollReverseParser
 extends abstractTableTransformParser
 description Reverse rows.
 crux reverse
 javascript
  get coreTable() {
   return this.parent.coreTable.slice().reverse()
  }

scrollComposeParser
 extends abstractTableTransformParser
 description Add column using format string.
 catchAllAtomType stringAtom
 crux compose
 example
  table
   compose My name is {name}
    printTable
 javascript
  get coreTable() {
   const {newColumnName} = this
   const formatString = this.getAtomsFrom(2).join(" ")
   return this.parent.coreTable.map((row, index) => {
     const newRow = Object.assign({}, row)
     newRow[newColumnName] = this.evaluate(new Particle(row).evalTemplateString(formatString), index)
     return newRow
   })
  }
  evaluate(str) {
    return str
  }
  get newColumnName() {
    return this.atoms[1]
  }
  get columnNames() {
    return this.parent.columnNames.concat(this.newColumnName)
  }
scrollComputeParser
 extends scrollComposeParser
 description Add column by evaling format string.
 catchAllAtomType stringAtom
 crux compute
 javascript
  evaluate(str) {
    return parseFloat(eval(str))
  }
scrollRankParser
 extends scrollComposeParser
 description Add rank column.
 string newColumnName rank
 crux rank
 javascript
  evaluate(str, index) { return index + 1 }

scrollLinksParser
 extends abstractTableTransformParser
 description Add column with links.
 crux links
 catchAllAtomType columnNameAtom
 javascript
  get coreTable() {
   const {newColumnName, linkColumns} = this
   return this.parent.coreTable.map(row => {
     const newRow = Object.assign({}, row)
     let newValue = []
     linkColumns.forEach(name => {
       const value = newRow[name]
       delete newRow[name]
       if (value) newValue.push(`<a href="${value.includes("@") ? "mailto:" : ""}${value}">${name}</a>`)
     })
     newRow[newColumnName] = newValue.join(" ")
     return newRow
   })
  }
  get newColumnName() {
    return "links"
  }
  get linkColumns() {
    return this.getAtomsFrom(1)
  }
  get columnNames() {
    const {linkColumns} = this
    return this.parent.columnNames.filter(name => !linkColumns.includes(name)).concat(this.newColumnName)
  }

scrollLimitParser
 extends abstractTableTransformParser
 description Select a subset.
 crux limit
 atoms cueAtom integerAtom integerAtom
 javascript
  get coreTable() {
   const start = this.getAtom(1)
   const end = this.getAtom(2)
   return this.parent.coreTable.slice(parseInt(start), parseInt(end))
  }

scrollTransposeParser
 extends abstractTableTransformParser
 description Tranpose table.
 crux transpose
 javascript
  get coreTable() {
   // todo: we need to switch to column based coreTable, instead of row based
   const transpose = arr => Object.keys(arr[0]).map(key => [key, ...arr.map(row => row[key])]);
   return transpose(this.parent.coreTable)
  }

scrollImputeParser
 extends abstractTableTransformParser
 description Impute missing values of a columm.
 atoms cueAtom columnNameAtom
 crux impute
 javascript
  get coreTable() {
   const {lodash, columnName} = this
   const sorted = lodash.orderBy(this.parent.coreTable.slice(), columnName)
   // ascending
   const imputed = []
   let lastInserted = sorted[0][columnName]
   sorted.forEach(row => {
    const measuredTime = row[columnName]
    while (measuredTime > lastInserted + 1) {
      lastInserted++
      // synthesize rows
      const imputedRow = {}
      imputedRow[columnName] = lastInserted
      imputedRow.count = 0
      imputed.push(imputedRow)
    }
    lastInserted = measuredTime
    imputed.push(row)
   })
   return imputed
  }
  get columnName() {
    return this.getAtom(1)
  }
  get lodash() {
    return this.isNodeJs() ? require("lodash") : lodash
  }

scrollOrderByParser
 extends abstractTableTransformParser
 description Sort rows by column(s).
 catchAllAtomType columnNameAtom
 crux orderBy
 javascript
  get coreTable() {
    const makeLodashOrderByParams = str => {
    const part1 = str.split(" ")
    const part2 = part1.map(col => (col.startsWith("-") ? "desc" : "asc"))
    return [part1.map(col => col.replace(/^\-/, "")), part2]
   }
   const orderBy = makeLodashOrderByParams(this.content)
   return this.lodash.orderBy(this.parent.coreTable.slice(), orderBy[0], orderBy[1])
  }
  get lodash() {
    return this.isNodeJs() ? require("lodash") : lodash
  }

scrollRenameParser
 // todo: add support in Parsers for tuple catch alls
  catchAllAtomType columnNameAtom atomAtom
 catchAllAtomType atomAtom
 extends abstractTableTransformParser
 description Rename columns.
 example
  tables
   data
    name,year,count
    index,2022,2
   rename name Name year Year
    printTable
 crux rename
 javascript
  get coreTable() {
   const {coreTable} = this.parent
   const {renameMap} = this
   if (!Object.keys(renameMap).length) return coreTable
   return coreTable.map(row => {
      const newRow = {}
      Object.keys(row).forEach(key => {
        const name = renameMap[key] || key
        newRow[name] = row[key]
      })
      return newRow
   })
  }
  get renameMap() {
    const map = {}
    const pairs = this.getAtomsFrom(1)
    let oldName
    while (oldName = pairs.shift()) {
      map[oldName] = pairs.shift()
    }
    return map
  }
  _renamed
  get columnNames() {
   if (this._renamed)
     return this._renamed
    const {renameMap} = this
    this._renamed = this.parent.columnNames.map(name => renameMap[name] || name )
    return this._renamed
  }

tableSearchParser
 popularity 0.000072
 extends abstractScrollWithRequirementsParser
 string copyFromExternal jquery-3.7.1.min.js datatables.css datatables.js tableSearch.js
 string requireOnce
  <script defer src="jquery-3.7.1.min.js"></script>
  <style>.dt-search{font-family: "SF Pro", "Helvetica Neue", "Segoe UI", "Arial";}</style>
  <link rel="stylesheet" href="datatables.css">
  <script defer src="datatables.js"></script>
  <script defer src="tableSearch.js"></script>
 // adds to all tables on page
 description Table search and sort widget.
 javascript
  compileInstance() {
   return ""
  }
