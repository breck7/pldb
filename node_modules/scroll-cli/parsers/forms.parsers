classicFormParser
 crux classicForm
 popularity 0.006391
 description Generate input form for ScrollSet.
 extends abstractAftertextParser
 string style
  <style> .scrollFormParser {
      font-family: "Gill Sans", "Bitstream Vera Sans", sans-serif;
    }
  .scrollFormParser input , .scrollFormParser textarea{
  padding: 10px;
  margin-bottom: 10px;
  width: 100%;
  box-sizing: border-box;
  } .scrollFormParser label {
    display: block;
    margin-bottom: 5px;
  }
  </style>
 javascript
  get inputs() {
    const {measures} = this.parent.file
    return measures.filter(measure => !measure.IsComputed).map((measure, index) => {
      const {Name, Question, IsRequired, Type} = measure
      const type = Type || "text"
      const placeholder = Question
      const ucFirst = Name.substr(0, 1).toUpperCase() + Name.substr(1)
      // ${index ? "" : "autofocus"}
      let tag = ""
      if (Type === "textarea")
        tag = `<textarea placeholder="${placeholder}" id="${Name}" name="${Name}" ${IsRequired ? "required" : ""}></textarea>`
      else
        tag = `<input placeholder="${placeholder}" type="${type}" id="${Name}" name="${Name}" ${IsRequired ? "required" : ""}>`
      return `<div><label for="${Name}" title="${IsRequired ? "Required" : ""}">${ucFirst}${IsRequired ? "*" : ""}:</label>${tag}</div>`
    }).join("\n")
  }
  compile() {
    return `${this.style}<form class="scrollFormParser" method="get" action="${this.action}">${this.inputs}<button class="scrollButton" type="submit">Submit</button></form>`
  }
  get action() {
    return this.getWord(1) || ""
  }

scrollFormParser
 extends classicFormParser
 crux scrollForm
 description Generate a Scroll Form.
 string copyFromExternal codeMirror.css scrollLibs.js
 string requireOnce
  <link rel="stylesheet" href="codeMirror.css">
  <script src="scrollLibs.js"></script>
 javascript
  get inputs() {
    const placeholder = ""
    const Name = "scroll"
    return `<textarea rows="${this.parent.file.measures.length * 2}" placeholder="${placeholder}" id="${Name}" name="${Name}"></textarea>
    <script id="${Name}Parsers" type="text/plain">${this.parent.file.parsersBundle}</script>
    <script>{
    let {width, height} = document.getElementById('${Name}').getBoundingClientRect();
    const scrollParser = new HandParsersProgram(document.getElementById("${Name}Parsers").textContent).compileAndReturnRootParser()
    const codeMirrorInstance = new ParsersCodeMirrorMode("custom", () => scrollParser, undefined, CodeMirror).register().fromTextAreaWithAutocomplete(document.getElementById("${Name}"), {
      lineWrapping: false,
      lineNumbers: false
    })
    codeMirrorInstance.setSize(width, height) }</script>`
  }
  compile(compileSettings) {
    return this.getHtmlRequirements(compileSettings) + super.compile()
  }
