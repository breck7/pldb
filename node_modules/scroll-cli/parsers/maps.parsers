mapParser
 latParser
  atoms cueAtom floatAtom
  cruxFromId
  single
 longParser
  atoms cueAtom floatAtom
  cruxFromId
  single
 zoomParser
  atoms cueAtom integerAtom
  cruxFromId
  single
 radiusParser
  atoms cueAtom floatAtom
  cruxFromId
  single
 fillOpacityParser
  atoms cueAtom floatAtom
  cruxFromId
  single
 fillColorParser
  atoms cueAtom anyAtom
  cruxFromId
  single
 colorParser
  atoms cueAtom anyAtom
  cruxFromId
  single
 heightParser
  atoms cueAtom floatAtom
  cruxFromId
  single
 hoverParser
  atoms cueAtom
  catchAllAtomType anyAtom
  cruxFromId
  single
 extends abstractTableVisualizationParser
 description Map widget.
 string copyFromExternal leaflet.css leaflet.js scrollLibs.js
 string requireOnce
  <link rel="stylesheet" href="leaflet.css">
  <script src="leaflet.js"></script>
  <script src="scrollLibs.js"></script>
 javascript
  compileInstance() {
   const height = this.get("height") || 500
   const id = this._getUid()
   const obj = this.toObject()
   const template = {}
   const style = height !== "full" ? `height: ${height}px;` : `height: 100%; position: fixed; z-index: -1; left: 0; top: 0; width: 100%;`
   const strs = ["color", "fillColor"]
   const nums = ["radius", "fillOpacity"]
    strs.filter(i => obj[i]).forEach(i => template[i] = obj[i])
    nums.filter(i => obj[i]).forEach(i => template[i] = parseFloat(obj[i]))
   return `<div id="map${id}" style="${style}"></div>
  <script>
   {
    const lat = ${this.get("lat") ?? 37.8}
    const long = ${this.get("long") ?? 4}
    const zoomLevel = ${this.get("zoom") ?? 4}
    const hover = '${this.get("hover") || "<b>{title}</b><br>{description}"}'
    const template = ${JSON.stringify(template)}
    const points = ${JSON.stringify((this.parent.coreTable || []).filter(point => point.lat && point.long), undefined, 2)}
    const map = L.map("map${id}").setView([lat, long], zoomLevel)
    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
     attribution: '<a href="https://www.openstreetmap.org/">OpenStreetMap</a>',
     maxZoom: 18
    }).addTo(map)
    points.forEach(point => {
     L.circleMarker([point.lat, point.long], {...template, ...Object.fromEntries(
            Object.entries(point).filter(([key, value]) => value !== null)
        )})
      .addTo(map)
      .bindPopup(new Particle(point).evalTemplateString(hover))
    })
   }
  </script>`
  }