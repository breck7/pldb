printUsageStatsParser
 popularity 0.000096
 // todo: if we include the atom "Parser" in a crux, bad things seem to happen.
 description Parser usage stats for folder.
 extends abstractScrollParser
 cruxFromId
 javascript
  get stats() {
   const input = this.root.file.allScrollFiles.map(file => file.parserIds.join("\n")).join("\n")
   const result = input.split('\n').reduce((acc, atom) => (acc[atom] = (acc[atom] || 0) + 1, acc), {})
   const rows = Object.entries(result).map(([atom, count]) => { return {atom, count}})
   const sorted = this.lodash.sortBy(rows, "count").reverse()
   return "parserId uses\n" + sorted.map(row => `${row.atom} ${row.count}`).join('\n')
  }
  get lodash() {
    return this.isNodeJs() ? require("lodash") : lodash
  }
  compile() {
    // A hacky but simple way to do this for now.
   const particle = this.appendSibling("table")
   particle.appendLine("delimiter  ")
   particle.appendLine("printTable")
   const dataParticle = particle.appendLine("data")
    dataParticle.setSubparticles(this.stats)
   const html = particle.compile()
   particle.destroy()
   return html
  }
  compileTxt() {
    return this.stats
  }
  compileCsv() {
    return this.stats.replace(/ /g, ",")
  }

// todo: these should not be parsers in stdlib, but should be made through componsition of more reusable parsers in a dataflow style.

printScrollLeetSheetParser
 popularity 0.000024
 description Print Scroll parser leet sheet.
 extends abstractScrollParser
 cruxFromId
 javascript
  get parsersToDocument() {
    const clone = this.root.clone()
    clone.setSubparticles("")
    const atoms = clone.getAutocompleteResultsAt(0,0).matches.map(a => a.text)
    atoms.push("blankline") // manually add blank line
    atoms.push("Catch All Paragraph.") // manually add catch all paragraph
    atoms.push("<h></h>") // manually add html
    atoms.sort()
    clone.setSubparticles(atoms.join("\n").replace(/blankline/, "")) // insert blank line in right spot
    return clone
  }
  sortDocs(docs) {
    return docs.map(particle => {
      const {definition} = particle
      const {id, description, isPopular, examples, popularity} = definition
      const tags = definition.get("tags") || ""
      if (tags.includes("deprecate") || tags.includes("experimental"))
        return null
      const category = this.getCategory(tags)
      const note = this.getNote(category)
      return {id: definition.cruxIfAny || id, description, isPopular, examples, note, popularity: Math.ceil(parseFloat(popularity) * 100000)}
     }).filter(i => i).sort((a, b) => a.id.localeCompare(b.id))
  }
  makeLink(examples, crux) {
    // if (!examples.length) console.log(crux) // find particles that need docs
    const example = examples.length ? examples[0].subparticlesToString() : crux
    const base = `https://try.scroll.pub/`
    const particle = new Particle()
    particle.appendLineAndSubparticles("scroll", "gazetteCss\n" + example)
    return base + "#" + encodeURIComponent(particle.asString)
  }
  docToHtml(doc) {
   const css = `#scrollLeetSheet {color: grey;} #scrollLeetSheet a {color: #3498db; }`
   return `<style>${css}</style><div id="scrollLeetSheet">` + doc.map(obj => `<div class="${obj.category}"><a href="${this.makeLink(obj.examples, obj.id)}">${obj.isPopular ? "<b>" : ""}${obj.id}</a> ${obj.description}${obj.isPopular ? "</b>" : ""}${obj.note}</div>`).join("\n") + "</div>"
  }
  compile() {
    return this.docToHtml(this.sortDocs(this.parsersToDocument))
  }
  compileTxt() {
   return this.sortDocs(this.parsersToDocument).map(obj => `${obj.id} - ${obj.description}`).join("\n")
  }
  get lodash() {
    return require("lodash")
  }
  getCategory(input) {
    return ""
  }
  getNote() {
    return ""
  }
  compileCsv() {
    const rows = this.sortDocs(this.parsersToDocument).map(obj => {
      const {id, isPopular, description, popularity, category} = obj
      return {
        id,
        isPopular,
        description,
        popularity,
        category
      }
    })
    return new Particle(this.lodash.sortBy(rows, "isPopular")).asCsv
  }

printparsersLeetSheetParser
 popularity 0.000024
 // todo: fix parse bug when atom Parser appears in parserId
 extends printScrollLeetSheetParser
 description Parsers leetsheet.
 javascript
  compile() {
    return "<p><b>Parser Definition Parsers</b> define parsers that acquire, analyze and act on code.</p>" + this.docToHtml(this.sortDocs(this.parsersToDocument)) + "<p><b>Atom Definition Parsers</b> analyze the atoms in a line.</p>" + this.docToHtml(this.sortDocs(this.atomParsersToDocument))
  }
  makeLink() {
    return ""
  }
  categories = "assemblePhase acquirePhase analyzePhase actPhase".split(" ")
  getCategory(tags) {
    return tags.split(" ").filter(w => w.endsWith("Phase"))[0]
  }
  getNote(category) {
    return ` <span class="note">A${category.replace("Phase", "").substr(1)}Time.</span>`
  }
  get atomParsersToDocument() {
    const parsersParser = require("scrollsdk/products/parsers.nodejs.js")
    const clone = new parsersParser("anyAtom\n ").clone()
    const parserParticle = clone.getParticle("anyAtom")
    const atoms = clone.getAutocompleteResultsAt(1,1).matches.map(a => a.text)
    atoms.sort()
    parserParticle.setSubparticles(atoms.join("\n"))
    return parserParticle
  }
  get parsersToDocument() {
    const parsersParser = require("scrollsdk/products/parsers.nodejs.js")
    const clone = new parsersParser("latinParser\n ").clone()
    const parserParticle = clone.getParticle("latinParser")
    const atoms = clone.getAutocompleteResultsAt(1,1).matches.map(a => a.text)
    atoms.sort()
    parserParticle.setSubparticles(atoms.join("\n"))
    clone.appendLine("myParser")
    clone.appendLine("myAtom")
    return parserParticle
  }

