printUsageStatsParser
 // todo: if we include the word "Parser" in a crux, bad things seem to happen.
 description Print parser usage stats in folder.
 extends abstractScrollParser
 cruxFromId
 javascript
  get stats() {
   const input = this.root.file.allScrollFiles.map(file => file.parserIds.join("\n")).join("\n")
   const result = input.split('\n').reduce((acc, word) => (acc[word] = (acc[word] || 0) + 1, acc), {})
   return "parserId uses\n" + Object.entries(result).map(([word, count]) => `${word} ${count}`).join('\n')
  }
  compile() {
    // A hacky but simple way to do this for now.
   const node = this.appendSibling("table  ", this.stats)
   const html = node.compile()
   node.destroy()
   return html
  }
  compileTxt() {
    return this.stats
  }

printLeetSheetParser
 description Print Scroll parser leet sheet.
 extends abstractScrollParser
 cruxFromId
 javascript
  get parsersToDocument() {
    const clone = this.root.clone()
    clone.setChildren("")
    const words = clone.getAutocompleteResultsAt(0,0).matches.map(a => a.text)
    words.push("blankline") // manually add blank line
    words.push("Catch All Paragraph.") // manually add catch all paragraph
    words.push("<h></h>") // manually add html
    words.sort()
    clone.setChildren(words.join("\n").replace(/blankline/, "")) // insert blank line in right spot
    return clone
  }
  get parserDocs() {
    return this.parsersToDocument.map(node => {
      const {definition} = node
      const {id, description, isPopular} = definition
      return {id: definition.cruxIfAny || id, description, isPopular}
     }).sort((a, b) => a.id.localeCompare(b.id))
  }
  compile() {
   const css = `#scrollLeetSheet {color: grey;} #scrollLeetSheet a {color: #3498db; }`
   return `<style>${css}</style><div id="scrollLeetSheet">` + this.parserDocs.map(obj => `<div><a>${obj.isPopular ? "<b>" : ""}${obj.id}</a> ${obj.description}${obj.isPopular ? "</b>" : ""}</div>`).join("\n") + "</div>"
  }
  compileTxt() {
   return this.parserDocs.map(obj => `${obj.id} - ${obj.description}`).join("\n")
  }

printAdvancedLeetSheetParser
 extends printLeetSheetParser
 description Print Parsers leet sheet.
 javascript
  get parsersToDocument() {
    const parsersParser = require("scrollsdk/products/parsers.nodejs.js")
    const clone = new parsersParser("latinParser\n ").clone()
    const parserNode = clone.getNode("latinParser")
    const words = clone.getAutocompleteResultsAt(1,1).matches.map(a => a.text)
    words.sort()
    parserNode.setChildren(words.join("\n"))
    return parserNode
  }

