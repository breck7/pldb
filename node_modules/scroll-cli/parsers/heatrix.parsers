heatrixCatchAllParser
 popularity 0.000193
 // todo Fill this out
 catchAllCellType stringCell

heatrixParser
 cruxFromId
 example
  heatrix
   '2007 '2008 '2009 '2010 '2011 '2012 '2013 '2014 '2015 '2016 '2017 '2018 '2019 '2020 '2021 '2022 '2023 '2024
   4 11 23 37 3 14 12 0 0 0 5 1 2 11 15 10 12 56
 description A heatmap matrix data visualization.
 catchAllParser heatrixCatchAllParser
 extends abstractTableVisualizationParser
 javascript
  compile() {
   // A hacky but simple way to do this for now.
   const advanced = new Particle("heatrixAdvanced")
   advanced.appendLineAndChildren("table", "\n " + this.tableData.replace(/\n/g, "\n "))
   const particle = this.appendSibling("heatrixAdvanced", advanced.childrenToString())
   const html = particle.compile()
   particle.destroy()
   return html
  }
  get tableData() {
    const {coreTable} = this.parent
    if (!coreTable)
      return this.childrenToString()
    let table = new Particle(coreTable).asSsv
    if (this.parent.firstWord === "transpose") {
      // drop first line after transpose
      const lines = table.split("\n")
      lines.shift()
      table = lines.join("\n")
    }
    // detect years and make strings
    const lines = table.split("\n")
    const yearLine = / \d{4}(\s+\d{4})+$/
    if (yearLine.test(lines[0])) {
      lines[0] = lines[0].replace(/ /g, " '")
      table = lines.join("\n")
    }
    return table
  }

heatrixAdvancedParser
 popularity 0.000048
 cruxFromId
 catchAllParser heatrixCatchAllParser
 extends abstractTableVisualizationParser
 description Advanced heatrix.
 example
  heatrix
   table
     
    %h10; '2007 '2008 '2009
     12 4 323
   scale
    #ebedf0 0
    #c7e9c0 100
    #a1d99b 400
    #74c476 1600
 javascript
  compile() {
  class Heatrix {
    static HeatrixId = 0
    uid = Heatrix.HeatrixId++
    constructor(program) {
      const isDirective = word => /^(f|l|w|h)\d+$/.test(word) || word === "right" || word === "left" || word.startsWith("http://") || word.startsWith("https://") || word.endsWith(".html")
      const particle = new Particle(program)
      this.program = particle
      const generateColorBinningString = (data, colors) => {
       const sortedData = [...data].sort((a, b) => a - b);
       const n = sortedData.length;
       const numBins = colors.length;
       // Calculate the indices for each quantile
       const indices = [];
       for (let i = 1; i < numBins; i++) {
         indices.push(Math.floor((i / numBins) * n));
       }
       // Get the quantile values and round them
       const thresholds = indices.map(index => Math.round(sortedData[index]));
       // Generate the string
       let result = '';
       colors.forEach((color, index) => {
         const threshold = index === colors.length - 1 ? thresholds[index - 1] * 2 : thresholds[index];
         result += `${color} ${threshold}\n`;
       });
       return result.trim();
      }
      const buildScale = (table) => {
        const numbers = table.split("\n").map(line => line.split(" ")).flat().filter(word => !isDirective(word)).map(word => parseFloat(word)).filter(number => !isNaN(number))
        const colors = ['#ebedf0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#005a32'];
        numbers.unshift(0)
        return generateColorBinningString(numbers, colors);
      }
      const table = particle.getParticle("table").childrenToString()
      const scale = particle.getParticle("scale")?.childrenToString() || buildScale(table)
      const thresholds = []
      const colors = []
      scale.split("\n").map((line) => {
        const parts = line.split(" ")
        thresholds.push(parseFloat(parts[1]))
        colors.push(parts[0])
      })
      const colorCount = colors.length
      const colorFunction = (value) => {
        if (isNaN(value)) return "" // #ebedf0
        for (let index = 0; index < colorCount; index++) {
          const threshold = thresholds[index]
          if (value <= threshold) return colors[index]
        }
        return colors[colorCount - 1]
      }
      const directiveDelimiter = ";"
      const getSize = (directives, letter) =>
        directives
          .filter((directive) => directive.startsWith(letter))
          .map((dir) => dir.replace(letter, "") + "px")[0] ?? ""
      this.table = table.split("\n").map((line) =>
        line
          .trimEnd()
          .split(" ")
          .map((cell) => {
            const words = cell.split(directiveDelimiter).filter((word) => !isDirective(word)).join("")
            const directivesInThisCell = cell
              .split(directiveDelimiter)
              .filter(isDirective)
            const value = parseFloat(words)
            const label = words.includes("'") ? words.split("'")[1] : words
            const alignment = directivesInThisCell.includes("right")
              ? "right"
              : directivesInThisCell.includes("left")
              ? "left"
              : ""
            const color = colorFunction(value)
            const width = getSize(directivesInThisCell, "w")
            const height = getSize(directivesInThisCell, "h")
            const fontSize = getSize(directivesInThisCell, "f")
            const lineHeight = getSize(directivesInThisCell, "l") || height
            const link = directivesInThisCell.filter(i => i.startsWith("http") || i.endsWith(".html"))[0]
            const style = {
              "background-color": color,
              width,
              height,
              "font-size": fontSize,
              "line-height": lineHeight,
              "text-align": alignment,
            }
            Object.keys(style).filter(key => !style[key]).forEach((key) => delete style[key])
            return {
              value,
              label,
              style,
              link,
            }
          })
      )
    }
    get html() {
      const { program } = this
      const cssId = `#heatrix${this.uid}`
      const defaultWidth = "40px"
      const defaultHeight = "40px"
      const fontSize = "10px"
      const lineHeight = defaultHeight
      const style = `<style>
      .heatrixContainer {
        margin: auto;
      }.heatrixRow {white-space: nowrap;}
  ${cssId} .heatrixCell {
    font-family: arial;
    border-radius: 2px;
    border: 1px solid transparent;
    display: inline-block;
    margin: 1px;
    text-align: center;
    vertical-align: middle;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  .heatrixCell a {
    color: black;
  }
  ${cssId} .heatrixCell{
   width: ${defaultWidth};
   height: ${defaultHeight};
   font-size: ${fontSize};
   line-height: ${lineHeight};
  }
  </style>`
      const firstRow = this.table[0]
      return (
        `<div class="heatrixContainer" id="heatrix${this.uid}">${style}` +
        this.table
          .map((row, rowIndex) => {
            if (!rowIndex) return ""
            const rowStyle = row[0].style
            return `<div class="heatrixRow heatrixRow${rowIndex}">${row
              .map((cell, columnIndex) => {
                if (!columnIndex) return ""
                const columnStyle = firstRow[columnIndex]?.style || {}
                let { value, label, style, link } = cell
                const extendedStyle = Object.assign(
                  {},
                  rowStyle,
                  columnStyle,
                  style
                )
                const inlineStyle = Object.keys(extendedStyle)
                  .map((key) => `${key}:${extendedStyle[key]};`)
                  .join("")
                let valueClass = value ? " valueCell" : ""
                const href = link ? ` href="${link}"` : ""
                return `<div class="heatrixCell heatrixColumn${columnIndex}${valueClass}" style="${inlineStyle}"><a title="${label}" ${href}>${label}</a></div>`
              })
              .join("")}</div>`
          })
          .join("\n") +
        "</div>"
      ).replace(/\n/g, "")
    }
  }
    return new Heatrix(this.childrenToString().trim()).html
  }
