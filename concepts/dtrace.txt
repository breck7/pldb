DTrace
======

DTrace is a programming language created in 2005.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222005%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 2005

#295 on PLDB
19 Years Old
534 Repos

DTrace is a comprehensive dynamic tracing framework created by Sun Microsystems for troubleshooting kernel and application problems on production systems in real time. Originally developed for Solaris, it has since been released under the free Common Development and Distribution License (CDDL) and has been ported to several other Unix-like systems. DTrace can be used to get a global overview of a running system, such as the amount of memory, CPU time, filesystem and network resources used by the active processes. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/DTrace Read more on Wikipedia...

- Tags: programming language
- There are at least 534 DTrace repos on GitHub
- Early development of DTrace happened in Sun Microsystems
- The  Google BigQuery Public Dataset GitHub snapshot shows 2k users using DTrace in 2k repos on GitHub
- GitHub supports syntax highlighting for DTrace
- dtrace.org was registered in 2010
- See also: (15 related languages) Solaris, FreeBSD, Linux, C, Assembly language, Java, Erlang, JavaScript, Perl, PHP, Python, Ruby, Tcl, MySQL, PostgreSQL
- 2 PLDB concepts link to DTrace: Iterm2, Pony

# Syscall count by syscall
dtrace -n &#39;syscall:::entry { @num[probefunc] = count(); }&#39;
# Syscall count by process
dtrace -n &#39;syscall:::entry { @num[pid,execname] = count(); }&#39;

#!/usr/sbin/dtrace -qs
BEGIN {
	printf(&quot;Hello World&quot;);
	exit(0);
}

/*
 * This software is in the public domain.
 *
 * $Id: counts.d 10510 2005-08-15 01:46:19Z kateturner $
 */

#pragma D option quiet

self int tottime;
BEGIN {
	tottime = timestamp;
}

php$target:::function-entry
	@counts[copyinstr(arg0)] = count();
}

END {
	printf(&quot;Total time: %dus\n&quot;, (timestamp - tottime) / 1000);
	printf(&quot;# calls by function:\n&quot;);
	printa(&quot;%-40s %@d\n&quot;, @counts);
}

# New processes with arguments
dtrace -n &#39;proc:::exec-success { trace(curpsinfo-&gt;pr_psargs); }&#39;

# Files opened by process
dtrace -n &#39;syscall::open*:entry { printf(&quot;%s %s&quot;,execname,copyinstr(arg0)); }&#39;

# Syscall count by program
dtrace -n &#39;syscall:::entry { @num[execname] = count(); }&#39;

# Syscall count by syscall
dtrace -n &#39;syscall:::entry { @num[probefunc] = count(); }&#39;

# Syscall count by process
dtrace -n &#39;syscall:::entry { @num[pid,execname] = count(); }&#39;

# Disk size by process
dtrace -n &#39;io:::start { printf(&quot;%d %s %d&quot;,pid,execname,args[0]-&gt;b_bcount); }&#39;

# Pages paged in by process
dtrace -n &#39;vminfo:::pgpgin { @pg[execname] = sum(arg0); }&#39;

Language features
======================================================

row
 Feature Strings
 FeatureLink ../features/hasStrings.html
 Supported ✓
 Example
  "Hello world"
 Token "
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
  /* A comment
  */
 Token 
row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Example
  /* A comment
  */
 Token /* */
row
 Feature Print() Debugging
 FeatureLink ../features/hasPrintDebugging.html
 Supported ✓
 Example
 Token printf
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token

View source
