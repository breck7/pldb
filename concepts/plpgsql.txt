PL/pgSQL
========

PL/pgSQL is a programming language created in 1998 by Jan Wieck.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%221998%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D
 https://pldb.io/concepts/../lists/creators.html#q=Jan%20Wieck

#508 on PLDB
26 Years Old
25k Repos

PL/pgSQL (Procedural Language/PostgreSQL) is a procedural programming language supported by the PostgreSQL ORDBMS.  It closely resembles Oracle's PL/SQL language. Implemented by Jan Wieck, PL/pgSQL first appeared with PostgreSQL 6.4, released on October 30, 1998. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/PL/pgSQL

- PL/pgSQL Wikipedia page
 https://en.wikipedia.org/wiki/PL/pgSQL
- PL/pgSQL docs
 https://www.postgresql.org/docs/current/plpgsql.html
- There are at least 24,919 PL/pgSQL repos on GitHub
- PL/pgSQL first developed in The PostgreSQL Global Development Group
- The  Google BigQuery Public Dataset GitHub snapshot shows 8k users using PL/pgSQL in 9k repos on GitHub
- Pygments supports syntax highlighting for PL/pgSQL
- GitHub supports syntax highlighting for PL/pgSQL
- See also: (6 related languages)PL/SQL, Ada, PostgreSQL, SQL/PSM, SQL, Bison
- 2 languages in PLDB linking to PL/pgSQL: Bucardo, PgBouncer

load &#39;plpgsql&#39;;
load &#39;plpgsql_lint&#39;;

DROP FUNCTION IF EXISTS list_sites();
CREATE OR REPLACE FUNCTION list_sites() RETURNS TABLE (fc json) AS
$func$
BEGIN
RETURN QUERY SELECT row_to_json(feat_col) FROM (
    SELECT &#39;FeatureCollection&#39; AS type, array_to_json(array_agg(feat)) AS features FROM (
            SELECT DISTINCT ON (new_id) &#39;Feature&#39; AS type, ST_ASGeoJSON(loc.geom)::json AS geometry, row_to_json(
                (SELECT prop FROM (SELECT new_id) AS prop)) AS properties FROM location loc) AS feat) AS feat_col;
END;
$func$ LANGUAGE plpgsql;

DROP FUNCTION IF EXISTS get_observations(character varying, integer);
CREATE OR REPLACE FUNCTION get_observations(kind varchar, site_id integer) RETURNS TABLE (fc json) AS
$func$
BEGIN
    IF kind = &#39;o2_abs&#39; THEN
        RETURN QUERY SELECT array_to_json(array_agg(row_to_json(obs))) FROM (
            SELECT observation_date AS date, o2_abs AS value FROM oxygen WHERE new_id = site_id) AS obs;
    ELSIF kind = &#39;o2_rel&#39; THEN
        RETURN QUERY SELECT array_to_json(array_agg(row_to_json(obs))) FROM (
            SELECT observation_date AS date, o2_rel AS value FROM oxygen WHERE new_id = site_id) AS obs;
    ELSIF kind = &#39;temp&#39; THEN
        RETURN QUERY SELECT array_to_json(array_agg(row_to_json(obs))) FROM (
            SELECT observation_date AS date, temp AS value FROM oxygen WHERE new_id = site_id) AS obs;
    END IF;
END;
$func$ LANGUAGE plpgsql;

Language features
======================================================

row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Token 
 Example
row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Token 
 Example
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Token 
 Example
row
 Feature Integers
 FeatureLink ../features/hasIntegers.html
 Supported ✓
 Token 
 Example
row
 Feature Floats
 FeatureLink ../features/hasFloats.html
 Supported ✓
 Token 
 Example
