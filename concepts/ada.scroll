../code/conceptPage.scroll

id ada
name Ada
appeared 1980
creators Jean Ichbiah
tags pl
website http://www.adaic.org
lab CII Honeywell Bull
fileExtensions adb ads

gdbSupport true
visualParadigm false
clocExtensions ada adb ads pad
fileType text
wordRank 8040
docs https://pyjarrett.github.io/programming-with-ada/
emailList http://www.ada-auth.org/comment.html
rosettaCode http://www.rosettacode.org/wiki/Category:Ada
quineRelay Ada
ubuntuPackage gnat
country United States
projectEuler Ada
 memberCount
  2019 120
  2022 129

helloWorldCollection Ada
 -- Hello World in Ada
 
 with Text_IO;
 procedure Hello_World is
 
 begin
   Text_IO.Put_Line("Hello World!");
 end Hello_World;
 
pygmentsHighlighter Ada
 filename ada.py
 fileExtensions adb ads ada
rijuRepl https://riju.codes/ada
 example
  with Ada.Text_IO;
  
  procedure Main is
  begin
     Ada.Text_IO.Put_Line("Hello, world!");
  end Main;
  
 description Structured, statically typed, imperative, and object-oriented high-level programming language, extended from Pascal and other languages
 fileExtensions adb ads
 website https://www.adaic.org/
 gitRepo https://gcc.gnu.org/git.html
subreddit https://reddit.com/r/ada
 memberCount
  2017 1092
  2022 8055
leachim6 Ada
 filepath a/Ada.adb
 fileExtensions adb
 example
  with Ada.Text_IO;
  
  procedure Hello_World is
     use Ada.Text_IO;
  begin
     Put_line ("Hello World");
  end Hello_World;
  
compilerExplorer Ada
 example
  -- This pragma will remove the warning produced by the default
  -- CE filename and the procedure name differing,
  -- see : https://gcc.gnu.org/onlinedocs/gcc-8.2.0/gnat_rm/Pragma-Source_005fFile_005fName.html#Pragma-Source_005fFile_005fName
  pragma Source_File_Name (Square, Body_File_Name => "example.adb");
  
  -- Type your code here, or load an example.
  function Square(num : Integer) return Integer is
  begin
      return num**2;
  end Square;
  
  -- Ada 2012 also provides Expression Functions
  -- (http://www.ada-auth.org/standards/12rm/html/RM-6-8.html)
  -- as a short hand for functions whose body consists of a
  -- single return statement. However they cannot be used as a
  -- compilation unit.
  -- function Square(num : Integer) return Integer is (num**2);
  

keywords abort else new return abs elsif not reverse abstract end null accept entry select access exception of separate aliased exit or some all others subtype and for out synchronized array function overriding at tagged generic package task begin goto pragma terminate body private then if procedure type case in protected constant interface until is raise use declare range delay limited record when delta loop rem while digits renames with do mod requeue xor

lineCommentToken --
printToken Text_IO.Put_Line
assignmentToken :=
stringToken "
booleanTokens True False

hasPointers true
hasGenerics true
 generic
    Max_Size : Natural; -- a generic formal value
    type Element_Type is private; -- a generic formal type; accepts any nonlimited type
 package Stacks is
    type Size_Type is range 0 .. Max_Size;
    type Stack is limited private;
    procedure Create (S : out Stack;
                      Initial_Size : in Size_Type := Max_Size);
    procedure Push (Into : in out Stack; Element : in Element_Type);
    procedure Pop (From : in out Stack; Element : out Element_Type);
    Overflow : exception;
    Underflow : exception;
 private
    subtype Index_Type is Size_Type range 1 .. Max_Size;
    type Vector is array (Index_Type range <>) of Element_Type;
    type Stack (Allocated_Size : Size_Type := 0) is record
       Top : Index_Type;
       Storage : Vector (1 .. Allocated_Size);
    end record;
 end Stacks;
hasComments true
 -- A comment
hasDirectives true
hasOperatorOverloading true
hasMultiLineComments false
hasCaseInsensitiveIdentifiers true
 with Gnat.Io; use Gnat.Io;
 procedure Numbers is
    Score: Integer;
    F: Float := 1.0;
 begin
    Score := 3 + 2#1011#;
    Put(score);
    New_Line;
    Score := Score + 1_000_000;
    Put(Score);
    New_Line;
 end Numbers;
hasLineComments true
 -- A comment
hasPrintDebugging true
hasSemanticIndentation false
hasAssignment true
hasStrings true
 "Hello world"
isCaseSensitive false
hasBooleans true
hasWhileLoops true
hasFunctions true
hasConditionals true
hasHexadecimals true
 -- [0-9_]+#[0-9a-f_\.]+#
hasFloats true
 -- [0-9_]+\.[0-9_]*
hasIntegers true
 -- [0-9_]+
hasFixedPoint true
hasScientificNotation true

wikipedia https://en.wikipedia.org/wiki/Ada_(programming_language)
 example
  with Ada.Text_IO; use Ada.Text_IO;
  
  procedure Traffic is
  
     type Airplane_ID is range 1..10;             -- 10 airplanes
  
     task type Airplane (ID: Airplane_ID);        -- task representing airplanes, with ID as initialisation parameter
     type Airplane_Access is access Airplane;     -- reference type to Airplane
  
     protected type Runway is                     -- the shared runway (protected to allow concurrent access)
        entry Assign_Aircraft (ID: Airplane_ID);  -- all entries are guaranteed mutually exclusive
        entry Cleared_Runway (ID: Airplane_ID);
        entry Wait_For_Clear;
     private
        Clear: Boolean := True;                   -- protected private data - generally more than just a flag...
     end Runway;
     type Runway_Access is access all Runway;
  
     -- the air traffic controller task takes requests for takeoff and landing
     task type Controller (My_Runway: Runway_Access) is
        -- task entries for synchronous message passing
        entry Request_Takeoff (ID: in Airplane_ID; Takeoff: out Runway_Access);
        entry Request_Approach(ID: in Airplane_ID; Approach: out Runway_Access);
     end Controller;
  
     --  allocation of instances
     Runway1    : aliased Runway;              -- instantiate a runway
     Controller1: Controller (Runway1'Access); -- and a controller to manage it
  
     ------ the implementations of the above types ------
     protected body Runway is
        entry Assign_Aircraft (ID: Airplane_ID)
   when Clear is   -- the entry guard - calling tasks are blocked until the condition is true
        begin
         Clear := False;
         Put_Line (Airplane_ID'Image (ID) & " on runway ");
        end;
  
        entry Cleared_Runway (ID: Airplane_ID)
   when not Clear is
        begin
           Clear := True;
           Put_Line (Airplane_ID'Image (ID) & " cleared runway ");
        end;
  
        entry Wait_For_Clear
   when Clear is
        begin
           null;      -- no need to do anything here - a task can only enter if "Clear" is true
        end;
     end Runway;
  
     task body Controller is
     begin
        loop
           My_Runway.Wait_For_Clear;   -- wait until runway is available (blocking call)
           select                      -- wait for two types of requests (whichever is runnable first)
              when Request_Approach'count = 0 =>  -- guard statement - only accept if there are no tasks queuing on Request_Approach
               accept Request_Takeoff (ID: in Airplane_ID; Takeoff: out Runway_Access)
               do                                 -- start of synchronized part
                 My_Runway.Assign_Aircraft (ID);  -- reserve runway (potentially blocking call if protected object busy or entry guard false)
                 Takeoff := My_Runway;            -- assign "out" parameter value to tell airplane which runway
               end Request_Takeoff;               -- end of the synchronised part
           or
              accept Request_Approach (ID: in Airplane_ID; Approach: out Runway_Access) do
                 My_Runway.Assign_Aircraft (ID);
                 Approach := My_Runway;
              end Request_Approach;
           or                          -- terminate if no tasks left who could call
              terminate;
           end select;
        end loop;
     end;
  
     task body Airplane is
        Rwy : Runway_Access;
     begin
        Controller1.Request_Takeoff (ID, Rwy); -- This call blocks until Controller task accepts and completes the accept block
        Put_Line (Airplane_ID'Image (ID) & "  taking off...");
        delay 2.0;
        Rwy.Cleared_Runway (ID);               -- call will not block as "Clear" in Rwy is now false and no other tasks should be inside protected object
        delay 5.0; -- fly around a bit...
        loop
           select   -- try to request a runway
              Controller1.Request_Approach (ID, Rwy); -- this is a blocking call - will run on controller reaching accept block and return on completion
              exit; -- if call returned we're clear for landing - leave select block and proceed...
           or
              delay 3.0;  -- timeout - if no answer in 3 seconds, do something else (everything in following block)
              Put_Line (Airplane_ID'Image (ID) & "   in holding pattern");  -- simply print a message
           end select;
        end loop;
        delay 4.0;  -- do landing approach...
        Put_Line (Airplane_ID'Image (ID) & "            touched down!");
        Rwy.Cleared_Runway (ID);  -- notify runway that we're done here.
     end;
  
     New_Airplane: Airplane_Access;
  
  begin
     for I in Airplane_ID'Range loop  -- create a few airplane tasks
        New_Airplane := new Airplane (I); -- will start running directly after creation
        delay 4.0;
     end loop;
  end Traffic;
 related spark ravenscar-profile algol-68 pascal smalltalk java eiffel chapel nim pl-sql plpgsql ruby rust seed7 sql-psm vhdl unicode lisp setl algol algol-60 apse
 summary Ada is a structured, statically typed, imperative, wide-spectrum, and object-oriented high-level computer programming language, extended from Pascal and other languages. It has built-in language support for design-by-contract, extremely strong typing, explicit concurrency, offering tasks, synchronous message passing, protected objects, and non-determinism. Ada improves code safety and maintainability by using the compiler to find errors in favor of runtime errors. Ada is an international standard; the current version (known as Ada 2012) is defined by ISO/IEC 8652:2012. Ada was originally designed by a team led by Jean Ichbiah of CII Honeywell Bull under contract to the United States Department of Defense (DoD) from 1977 to 1983 to supersede over 450 programming languages used by the DoD at that time. Ada was named after Ada Lovelace (1815–1852), who has been credited with being the first computer programmer.
 pageId 1242
 dailyPageViews 768
 created 2001
 backlinksCount 744
 revisionCount 1280
 appeared 1980
 fileExtensions adb ads

hopl https://hopl.info/showlanguage.prx?exp=840
tiobe Ada
 currentRank 28
pypl Ada

domainName adaic.org
 registered 1998
 awisRank
  2022 1556974

githubBigQuery Ada
 repos 2172
 users 1848

linguistGrammarRepo https://github.com/textmate/ada.tmbundle
 firstCommit 2005
 lastCommit 2015
 committerCount 4
 commitCount 44

isbndb 64
 year|publisher|title|authors|isbn13
 2014|Cambridge University Press|Programming in Ada 2012|Barnes, John|9781107424814
 1999|Addison-Wesley|Ada 95: Problem Solving and Program Design (3rd Edition)|Feldman, Michael B. and Koffman, Elliot B.|9780201361230
 1986|Archon Books|The Calculating Passion of Ada Byron|Baum, Joan|9780208021199
 2006|Pearson|Programming in Ada 2005 with CD|Barnes, John|9780321340788
 1987|Tab Books|Power Programming With Ada For The Ibm Pc|Winters and John W.|9780830679027
 1984|Cambridge University Press|Ada For Multi-microprocessors (the Ada Companion Series)|M. Tedd|9780521301039
 1995|John Wiley &Sons|Rendezvous with ADA 95 2e|J. Naiditch, David|9780471012764
 2019|Candlewick|Dreaming in Code: Ada Byron Lovelace, Computer Pioneer|McCully, Emily Arnold|9780763693565
 1993|Addison-Wesley|Programming in Ada: Plus an Overview of Ada 9X (International computer science series)|Barnes, J. G. P.|9780201624076
 1986|Allyn And Bacon|Ada Programming With Applications|Eugen N Vasilescu|9780205087440
 1991|Silicon Press|Ada|Gehani, Narain|9780929306087
 1998|Dissertation.Com.|Distributed Programming in ADA with Protected Objects|Ledru, Pascal|9781581120349
 2015|Lulu.com|Ada Programming Success In A Day|Sam Key|9781329461680
 2002|Springer|Consolidated Ada reference manual: language and standard libraries : international standard ISO/IEC 8652/1995(E) with technical corrigendum 1|N/a|9783540430384
 1994|Jones And Bartlett Publishers, Inc|Programming And Problem Solving With Ada|Nell Dale and Et Al|9780669294279
 20030806|Springer Nature|Consolidated Ada Reference Manual|Erhard Ploedereder; S. Tucker Taft; Randall L. Brukardt|9783540453406
 2019|Apress|Beginning Ada Programming: From Novice to Professional|Shvets, Andrew T.|9781484254271
 2019|Apress|Beginning Ada Programming: From Novice to Professional|Shvets, Andrew T.|9781484254288
 20140114|Springer Nature|Ada 2012 Reference Manual. Language and Standard Libraries|L. Loh|9783642454196
 2019|Simon & Schuster Books for Young Readers|Ada Lace and the Suspicious Artist (5) (An Ada Lace Adventure)|Calandrelli, Emily|9781534416888
 2018|CreateSpace Independent Publishing Platform|Introduction to Ada Programming, 2nd Edition|Shvets, Andrew T.|9781987673852
 2018|Bodleian Library, University of Oxford|Ada Lovelace: The Making of a Computer Scientist|Hollings, Christopher and Martin, Ursula and Rice, Adrian|9781851244881
 2022|Cambridge University Press|Programming in Ada 2012 with a Preview of Ada 2022|Barnes, John|9781009181341
 1998|Addison-Wesley Professional|Programming in Ada 95 (2nd Edition) (International Computer Science Series)|Barnes, John|9780201342932
 1990|Addison-Wesley|Ada Programmer's Handbook and Language Reference Manual|Gonzalez, Dean W.|9780805325287
 1997|Addison-Wesley|Ada 95 for C and C ++ Programmers (International Computer Science Series)|Johnston, Simon|9780201403633
 2001-04-05T00:00:01Z|Addison Wesley|Real Time Systems and Programming Languages: Ada 95, Real-Time Java and Real-Time C/POSIX (3rd Edition)|Burns, Alan and Wellings, Andy|9780201729887
 2016|LernerClassroom|Programming Pioneer Ada Lovelace (STEM Trailblazer Bios)|Bodden, Valerie|9781512413038
 2007|Cambridge University Press|Concurrent and Real-Time Programming in Ada|Burns, Alan and Wellings, Andy|9780521866972
 2000|Jones & Bartlett Learning|Programming and Problem Solving with Ada 95|Nell B. Dale and Chip Weems and John W. McCormick|9780792376767
 2000|Jones & Bartlett Learning|Programming and Problem Solving with Ada 95|Nell B. Dale and Chip Weems and John W. McCormick|9780763707927
 2011-05-16T00:00:01Z|Cambridge University Press|Building Parallel, Embedded, and Real-Time Applications with Ada|McCormick, John W. and Singhoff, Frank and Hugues, Jérôme|9780521197168
 1995|Pearson Education|Programming in Ada 95 (International Computer Science Series)|Barnes, John|9780201877007
 1984T|Addison-Wesley|Programming in ADA (International computer science series)|Barnes, J. G. P|9780201137996
 1996|Addison-Wesley|Software Construction and Data Structures with Ada 95 (2nd Edition)|Feldman, Michael B.|9780201887952
 1996-10-24T00:00:01Z|Prentice Hall|Ada 95: The Craft of Object-Oriented Programming|English, John|9780132303507
 2015|CreateSpace Independent Publishing Platform|ADA Programming Success In A Day: Beginner’s guide to fast, easy and efficient learning of ADA programming|Key, Sam|9781515371328
 1989T|Addison-Wesley|Programming in ADA (International computer science series)|Barnes, J. G. P|9780201175660
 1990|Prentice Hall|Introduction to Programming Using Ada|Volper, Dennis and Katz, Martin D.|9780134935294
 1983|Horizon Pubs & Distributors Inc|Programming in ADA|Sincovec, Richard F. and Wiener, Richard|9780471870890
 1990|Benjamin-Cummings Pub Co|File Structures With Ada (Benjamin Cummings Series in Computer Science)|Miller, Nancy E. and Petersen, Charles G.|9780805304404
 1981|Prentice Hall International|The Ada programming language: A guide for programmers|Pyle, I. C|9780130039217
 2018|Abdo Publishing|Computer Programming: From ADA Lovelace to Mark Zuckerberg (Stem Stories)|Doudna, Kelly|9781532115455
 1997|Springer|Ada 95 Rationale: The Language - The Standard Libraries (Lecture Notes in Computer Science, 1247)||9783540631439
 2013|Springer|Ada 2012 Rationale: The Language -- The Standard Libraries (Lecture Notes in Computer Science (8338))|Barnes, John|9783642452093
 1983|Prentice Hall|The Programming Languages: Pascal, Modula, Chill and Ada|Smedema, Kees|9780137297566
 1991|Addison-Wesley|Programming in Ada Plus Language Reference Manual (International Computer Science Series)|Barnes|9780201565393
 1991|Cambridge University Press|Rationale for the Design of the Ada Programming Language (The Ada Companion Series)|Ichbiah, J.|9780521392679
 2021|Wiley-ISTE|Concepts and Semantics of Programming Languages 2: Modular and Object-oriented Constructs with OCaml, Python, C++, Ada and Java|Hardin, Therese and Jaume, Mathieu and Pessaux, François and Viguie Donzeau-Gouge, Veronique|9781786306029
 1993-03-01T00:00:01Z|Chapman & Hall|Introduction to Ada|Cooling, J. E. and Cooling, N.|9780412448102
 1996|Springer|Reliable Software Technologies - Ada Europe 96: 1996 Ada-Europe International Conference on Reliable Software Technologies, Montreux, Switzerland, ... (Lecture Notes in Computer Science, 1088)||9783540613176
 1982|Prentice Hall|Programming Embedded Systems With Ada|Downes, Valerie A.|9780137300105
 1984T|Prentice-Hall|Ada, an advanced introduction: Including reference manual for the Ada programming language (Prentice-Hall software series)|Gehani, Narain|9780130039972
 1996|McGraw-Hill College|Ada Minimanual to Accompany Programming Languages|Benjamin|9780070053182
 1982|John Wiley & Sons|Problem Solving with ADA (Wiley Medical Publication)|Mayoh, B. H.|9780471100256
 1991-11-01|McGraw Hill Higher Education|Programming Languages: Paradigm and Practice: Ada Mini-Manual|Appleby|9780070025783
 1990|Cambridge University Press|Distributed Ada: Developments and Experiences: Proceedings of the Distributed Ada '89 Symposium, University of Southampton, 11–12 December 1989|Bishop, Judy M.|9780521392518
 1990|Springer|Programming with Specifications: An Introduction to ANNA, A Language for Specifying Ada Programs (Monographs in Computer Science)|Luckham, David|9780387972541
 1996|Jones & Bartlett Learning|Programming and Problem Solving With Ada|Nell B. Dale and Chip Weems and John W. McCormick|9780763702939
 1993|Prentice Hall|Introduction to Abstract Data Types Using Ada|Hillam, Bruce|9780130459497
 1983|Castle House Publications Ltd|Reference Manual for the ADA Programming Language|Ichbiah, Jean D. & etc.|9780719400971
 2011|Cambridge University Press|Building Parallel, Embedded, And Real-time Applications With Ada|John W. McCormick and Frank Singhoff and Jérôme Hugues|9781139500005
 2010||Ada Programming Language: Ada|Books and LLC|9781156382783
 1988|Eyrolles|Ada|Narain Gehani|9782212084214

githubLanguage Ada
 fileExtensions adb ada ads
 trendingProjectsCount 0
 type programming
 aceMode ada
 tmScope source.ada
 aliases ada95 or ada2005
 repos 4785

indeedJobs ada developer
 2017 2184

semanticScholar 50
 year|title|doi|citations|influentialCitations|authors|paperId
 1983|The Programming Language Ada Reference Manual American National Standards Institute, Inc. ANSI/MIL-STD-1815A-1983|10.1007/3-540-12328-8|478|0|G. Goos and J. Hartmanis and D. Barstow and W. Brauer and P. B. Hansen and D. Gries and D. Luckham and C. Moler and A. Pnueli and G. Seegmüller and J. Stoer and N. Wirth|0db8635ac2161a3eda9e69ccb3cbfcdcd443597f
 1979|Rationale for the design of the Ada programming language|10.1145/956653.956654|423|16|J. Ichbiah and B. Krieg-Brueckner and B. Wichmann and J. Barnes and O. Roubine and J. Heliard|5bd19234d0c46775d07fe9e98c157f4f6d3f13f3
 1983|The Programming Language Ada|10.1007/3-540-10693-6|146|1|G. Goos and J. Hartmanis and W. Brauer and P. B. Hansen and D. Gries and C. Moler and G. Seegmüller and J. Stoer and N. Wirth|06e41d8bfca86aacba4779fa57533b0ad483fcd9
 1990|Programming with Specifications: An Introduction to ANNA, A Language for Specifying Ada Programs|10.5860/choice.28-5114|95|1|D. Luckham|c7cf8a74d165939386c2f2ba991788a4946b8f84
 1982|The programming language ADA reference manual: Springer-Verlag (1981) pp 243, $7.90, DM 16.50|10.1016/0141-9331(82)90378-7|74|1|S. J. Young|1fa0aff383fa6dc0aefcdcc166d320135c0d4e49
 1982|"Review of ""The Ada programming language by Ian C. Pyle"", Prentice-Hall, Inc., Englewood Cliffs, N.J., 1981."|10.1145/1041326.1041337|53|0|P. Hilfinger|a31990b9ccfaac5a80229de9c27ff645a8f92c1c
 1980|Reference Manual for the Ada Programming Language. Proposed Standard Document|10.21236/ada090709|49|0|J. Ichbiah and B. Krieg-Brueckner and B. Wichmann and H. Ledgard and J. Heliard|c84bede16ef707b5ad9c00aad0bf9b0382b5ead5
 1983|The ada programming language|10.1016/0011-684x(85)90286-2|46|2|S. Saib and R. E. Fritz|c94126df9ae162da0ca25ffccdbd8c52cb362e55
 1998|Guidance for the use of the Ada programming language in high integrity systems|10.1145/290214.290222|44|1|B. Wichmann|c1efd5c0dcab29a50cdcc5bca94438957e50f9d4
 1985|The ada programming language|10.5860/choice.36-1004|42|1|I. Pyle|7c5fd21c5143acea788ddd1b6e8d93096785239f
 1982|The ADA programming language: Pyle, I C, Prentice-Hall International (1981) pp 293, £8.95|10.1016/0141-9331(82)90377-5|39|0|S. J. Young|189da10ccf871122d736fd3fa1d140c7f4e44554
 1985|Object-Based Computing and the Ada Programming Language|10.1109/MC.1985.1662826|34|0|G. Buzzard and T. Mudge|093f95ae840dfc4bd827b6be63540490ecd359f4
 1984|Using Ada as a programming language for robot-based manufacturing cells|10.1109/TSMC.1984.6313313|26|0|R. Volz and T. Mudge and D. A. Gal|fd8a692903506c79ce2f47cf00867d2f14265228
 2014|Programming in Ada 2012|10.1017/CBO9781139696616|17|0|J. Barnes|5754a4c9f110e8307609d2bc91533d9ecb82843c
 1983|Why Ada is not just another programming language|10.1145/800173.809685|17|0|J. Sammet|51b9e742858f056959914fd7ee1150968a5eb922
 1987|A Survey of Real-Time Performance Benchmarks for the Ada Programming Language|10.21236/ada200608|15|0|P. Donohoe|d50947c4e453bb3d420201bbec758c5201769477
 2014|Safe parallel programming in ada with language extensions|10.1145/2663171.2663181|13|0|S. Taft and B. Moore and L. M. Pinho and S. Michell|9c325ccd1c05de79bbcdee1cdf0de80e5d0396c8
 1985|Implementing Ada as the primary programming language|10.1145/323287.323389|9|1|Howard Evans and W. Patterson|14081e6ebabd4b930f1363603693c3fbdfe4a30c
 2018|Converging safety and high-performance domains: Integrating OpenMP into Ada|10.23919/DATE.2018.8342162|8|0|Sara Royuela and L. M. Pinho and E. Quiñones|ccd833915d5d2cace0c6a0d34760b60eab5a393e
 1899|The importance of Ada programming support environments|10.1145/1500774.1500815|7|0|T. Standish|e8416288ccd237bc5f36258cd2e32bd7a46edefa
 1996|Ada 95: An Effective Concurrent Programming Language|10.1007/BFb0013478|7|0|A. Burns and A. Wellings|a5dfb43a52ea2d24ef3494facc711fef4d1ff1a4
 1996|Using Ada as the first programming language: a retrospective|10.1109/SEEP.1996.534005|6|0|R. K. Allen and D. Grant and R. Smith|b3f100b2320a6417d4bef3fa0ef13f5558e2202c
 1981|Self-assessment procedure VIII: a self-assessment procedure dealing with the programming language Ada|10.1145/358769.358785|6|0|P. Wegner|d6f3c64b6625b582f3603be26b39dc0dd9352bea
 1990|Built-in reliability in the Ada programming language|10.1109/NAECON.1990.112833|6|1|T. Wu|7668ba4ae828a5b23e074a61a230edbbe54c5aa4
 2014|Towards a Runtime Verification Framework for the Ada Programming Language|10.1007/978-3-319-08311-7_6|6|0|A. Pedro and D. Pereira and L. M. Pinho and J. Pinto|627769c65b4bac6649b4d27cd3a22dd8ad6c294c
 1986|Engineering VAX Ada for a multi-language programming environment|10.1145/24208.24215|5|0|C. Mitchell|4abecab1498a0b7b7b436ebf08b31a1a04e3664a
 2003|Ada as a language for programming clusters of SMPs|10.17951/AI.2003.1.1.1-7|5|1|Przemysław Stpiczyński|33d24df6203b4bc474d0afedd756908094c402d2
 1979|TCOL Ada : an intermediate representation for the DOD standard programming language|10.21236/ada955948|5|0|B. Schatz|3c67231ccae5f9cd14d681fb2a5835f03e1db3ff
 1988|Experience with Ada as a first programming language|10.1145/54138.54149|5|0|Atanas Radensky and Emilia Zivkova and V. Petrova and Rumiana Lesseva and Christina Zascheva|a837805d46632f54180fe817c444aa1003608d73
 1981|Some comments on ADA as a real-time programming language|10.1145/954269.954282|5|0|A. Mahjoub|fd95d78b0a63c2e2cb47663c42fb38e624bb9959
 1990|Can Ada be used as a primary programming language?: major problems and their solutions by means of subsets|10.1145/323410.323452|5|0|Atanas Radensky|0156665673118b67b8bb9e7cfb0a41aa22771092
 1987|Is Ada an object oriented programming language?|10.1145/25267.25272|5|0|H. Touati|c2ce45f92d0d58ddc890af5d39c3154cff2c0703
 1994|Ada programming language for numerical computation|10.1109/NAECON.1994.332950|5|0|T. Wu|fcf479a134e593ff4a3eb783e8a9aa3957757938
 1980|The use of the Ada language for programming a distributed system|10.1016/S1474-6670(17)65159-0|4|1|V. Downes and S. Goldsack|a8ff42da6c1b74bae3b975a3271ea31644316409
 1982|Types in the Programming Language Ada|10.1007/978-1-4612-5196-5_14|4|0|B. Krieg-Brückner|1afeaecca6f9c07f6909fee5894203b3dbc54d03
 1995|Information Technology. Programming Language. The SQL Ada Module Description Language (SAMeDL).|10.3403/00539178|4|1|M. Graham|d5067e3310269f48c6035eee6db9d4e0e52f7b6e
 1986|ADDS - A Dialogue Development System for the Ada Programming Language|10.1016/S0020-7373(86)80046-3|4|0|A. Burns and J. Robinson|6669b65c09d65260d81ecf52b8658bed78f0655b
 2010|The Evolution of Real-Time Programming Revisited: Programming the Giotto Model in Ada 2005|10.1007/978-3-642-13550-7_14|3|0|A. Wellings and A. Burns|c01cde4d526b8709ed928528407923db38c0a7d7
 2010|AdaStreams: A Type-Based Programming Extension for Stream-Parallelism with Ada 2005|10.1007/978-3-642-13550-7_15|3|0|Jingun Hong and Kirak Hong and Bernd Burgstaller and Johann Blieberger|f8c945e0eee3e1ab9373f31cad42c6c4c77b9456
 1991|VADS APSE: an integrated Ada programming support environment|10.1145/112629.112638|3|0|E. Matthews and G. Burns|43bbe6388f88d2f0f43eaf93055a4c3c6a3b46a6
 1980|Some short comments on the definition and the documentation of the ADA programming language|10.1145/947680.947686|3|0|R. Nicolescu|84a27f3e956cbcd7aa367a00e61e8042802e999c
 2016|Rationale For The Design Of The Ada Programming Language|10.5860/choice.29-5168|3|1|S. Eberhart|8369c68a3c6ac543c134a0b1a5f963acdd62eada
 1992|IAda: A language for robot programming based on Ada|10.1016/0921-8890(92)90045-Z|2|0|D. Duhaut and P. Bidaud and D. Fontaine|9a3f9e15e26b683b05c8c217f7a07c015b9d2803
 1983|The current programming language standards scene VIIIA: ADA|10.1016/0167-8051(83)90010-4|2|0|A. McGettrick|eb47d46be8baa713fcff66e57b49913fe74ef813
 2016|Why the Expressive Power of Programming Languages Such as Ada Is Needed for Future Cyber Physical Systems|10.1007/978-3-319-39083-3_1|2|0|A. Burns|acf36a8fd5e2952ae9d72212984c3c15c3daebce
 1994|Proposals for enhancement of the Ada programming language|10.5075/EPFL-THESIS-1227|2|0|Mats Weber|caeecffdc6baeb1440fb40466206636d307b9563
 1980|"Comments on the suggested implementation of tasking facilities in the ""rationale for the design of the ADA programming language"""|10.1145/947727.947733|2|0|K. Tai and K. Garrard|574e48b95a03cce88e8a1e5b37448ec1bba7baa8
 2012|Teaching 'Concepts of Programming Languages' with Ada|10.1007/978-3-642-30598-6_5|1|0|T. Tempelmeier|b5d480c144de0f4f5a7f9c7bd9b5b46fda97f705
 1981|Ada programming language standardization|10.1016/0164-1212(81)90009-1|1|0|Paul M. Cohen|de9b22cf99188af170f37770f8160c6819240b6c
 2015|From Byron to the Ada Programming Language|10.1145/2867731.2867745|1|0|J. Barnes|e73889075e3ca97186208255c7a359c106f527c6
