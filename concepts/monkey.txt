Monkey
======

Monkey is a programming language created in 2011 by Anthony Diamond.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222011%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 2011
 https://pldb.io/concepts/../lists/creators.html#q=Anthony%20Diamond Anthony Diamond

#611 on PLDB
13 Years Old
254 Repos

git clone https://github.com/Regal-Internet-Brothers/webcc-monkey

Monkey X is a high-level programming language designed for video game development for many different platforms, including desktop and laptop computers, mobile phones, tablets, and video game consoles. The language itself is an object-oriented dialect of BASIC, which the compiler translates into native source code for several target platforms. The resulting code is then compiled normally. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Monkey_(programming_language) Read more on Wikipedia...

- Tags: programming language
- Monkey is developed on GitHub and has 0 stars
- There are at least 254 Monkey repos on GitHub
- Early development of Monkey happened in https://github.com/Regal-Internet-Brothers
- Monkey is written in JavaScript, HTML, Markdown
- The  Google BigQuery Public Dataset GitHub snapshot shows 53 users using Monkey in 116 repos on GitHub
- Explore Monkey snippets on Rosetta Code
- Pygments supports syntax highlighting for Monkey
- GitHub supports syntax highlighting for Monkey
- See also: (15 related languages) Linux, BlitzBasic, C, C#, JavaScript, Java, BASIC, Android, iOS, Python, OpenGL, WebGL, Objective-C, LLVM IR, Haxe

puts(&quot;Hello World&quot;)

&#39;Showcases use of Lambda functions and Generics.

#Import &quot;&lt;std&gt;&quot;
Using std..

Function Main()

	Local testStack := New Stack&lt; MyObject &gt;
	
	For Local n := 1 To 20
		Local newItem := New MyObject
		newItem.depth = Rnd( 0, 100 )
		testStack.Push( newItem )
	Next
		
	testStack.Sort( Lambda:Int( x:MyObject,y:MyObject )
		Return x.depth&lt;=&gt;y.depth
	End )
	
	For Local n := Eachin testStack
		Print( n.depth )
	Next
	
End

Struct MyObject
	Field depth := 0
End

&#39; The &#39;Player&#39; class, as referenced previously (Placement does not matter):
Class Player
  &#39; Declare all of our fields (Class-local variables):
  
  &#39; These two variables will act as our position on the screen.
  &#39; (Alternatively, an &#39;Array or third-party class could be used)
  Field x:Float, y:Float
  
  &#39; This will be a reference to an &#39;Image&#39; object we&#39;ll specify.
  Field image:Image
  
  &#39; Constructor(s):
  
  &#39; Overloading &#39;New&#39; mainly works the same way as constructors in other languages.
  &#39; Returning is generally not recommended for constructors.
  Method New(img:Image, x:Float=100, y:Float=100)
    &#39; Due to the arguments using the same names, &#39;Self&#39;
    &#39; is required to resolve our fields&#39; names:
    Self.image = img
    
    Self.x = x
    Self.y = y
  End
  
  &#39; Methods:
  
  &#39; This will be our main render-method for this object:
  Method Draw:Void()
    &#39; Draw the &#39;image&#39; object to the screen using our &#39;x&#39; and &#39;y&#39; fields.
    DrawImage(image, x, y)
    
    &#39; Returning in a &#39;Void&#39; function is not required. (Some still recommend it)
    Return
  End
End

Language features
======================================================

row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Example
 Token 
row
 Feature Binary Literals
 FeatureLink ../features/hasBinaryNumbers.html
 Supported ✓
 Example
  ' \%[10]+
 Token 
row
 Feature Integers
 FeatureLink ../features/hasIntegers.html
 Supported ✓
 Example
  ' [0-9]+
 Token 
row
 Feature Floats
 FeatureLink ../features/hasFloats.html
 Supported ✓
 Example
  ' [0-9]+\.[0-9]*(?!\.)
 Token 
row
 Feature Hexadecimals
 FeatureLink ../features/hasHexadecimals.html
 Supported ✓
 Example
  ' \$[0-9a-fA-Z]+
 Token 
row
 Feature Strings
 FeatureLink ../features/hasStrings.html
 Supported ✓
 Example
  "Hello world"
 Token "
row
 Feature Print() Debugging
 FeatureLink ../features/hasPrintDebugging.html
 Supported ✓
 Example
 Token puts
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
  ' A comment
 Token 
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Example
  ' A comment
 Token '
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token
