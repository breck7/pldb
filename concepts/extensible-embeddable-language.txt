Extensible Embeddable Language
==============================

Extensible Embeddable Language is an open source programming language created in 2005 by David Olofson.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222005%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D
 https://pldb.io/concepts/../lists/creators.html#q=David%20Olofson

#2380 on PLDB
19 Years Old

The Extensible Embeddable Language (EEL) is a scripting and programming language in development by David Olofson. EEL is intended for scripting in realtime systems with cycle rates in the kHz range, such as musical synthesizers and industrial control systems, but also aspires to be usable as a platform independent general purpose programming language.. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Extensible_Embeddable_Language

- Extensible Embeddable Language Wikipedia page
 https://en.wikipedia.org/wiki/Extensible_Embeddable_Language
- Extensible Embeddable Language first developed in https://github.com/olofson
- See also: (3 related languages)Lua, C, Pascal

export function main&lt;args&gt;
{
    print(&quot;Recursion test 1:\n&quot;);
    
    procedure recurse(arg)
    {
        print(&quot;arg = &quot;, arg, &quot;\n&quot;);
        if arg
             recurse(arg - 1);
    }
    
    recurse(10);
    
    print(&quot;Recursion test 2; Mutual Recursion:\n&quot;);
    
    procedure mrecurse2(arg);
    
    procedure mrecurse1(arg)
    {
         print(&quot;arg = &quot;, arg, &quot;\n&quot;);
         if arg
              mrecurse2(arg);
    }
    
    procedure mrecurse2(arg)
    {
         mrecurse1(arg - 1);
    };
    
    mrecurse1(10);
    
    print(&quot;Recursion test 2; Mutual Recursion with Function Reference:\n&quot;);
    
    procedure mrrecurse1(arg, fn)
    {
         print(&quot;arg = &quot;, arg, &quot;\n&quot;);
         if arg
              fn(arg, fn);
    }
    
    local mrr2 = procedure (arg, fn)
    {
         mrrecurse1(arg - 1, fn);
    };
    
    mrrecurse1(10, mrr2);
    
    print(Recursion tests done.\n);
    return 0;
}
