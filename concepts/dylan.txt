printViewSourceBadge

Dylan
=====

Dylan is a programming language created in 1992.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%221992%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 1992

#401 on PLDB
32 Years Old
150 Repos

Dylan  is a multi-paradigm programming language that includes support for functional and object-oriented programming, and is dynamic and reflective while providing a programming model designed to support efficient machine code generation, including fine-grained control over dynamic and static behaviors. It was created in the early 1990s by a group led by Apple Computer. A concise and thorough overview of the language may be found in the Dylan Reference Manual. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Dylan_(programming_language) Read more on Wikipedia...

- Tags: programming language
- There are at least 150 Dylan repos on GitHub
- Early development of Dylan happened in Apple
- The  Google BigQuery Public Dataset GitHub snapshot shows 67 users using Dylan in 112 repos on GitHub
- Explore Dylan snippets on Rosetta Code
- Dylan on HOPL
 https://hopl.info/showlanguage.prx?exp=1682 Dylan on HOPL
- Dylan appears in the TIOBE Index
- CodeMirror package for syntax highlighting Dylan
- Pygments supports syntax highlighting for Dylan
- GitHub supports syntax highlighting for Dylan
- opendylan.org was registered in 2004
- See also: (10 related languages) Algol, Scheme, EuLisp, Lasso, Python, Ruby, Common Lisp, Unix, Java, Smalltalk

Module: main

define function main
    (name :: &lt;string&gt;, arguments :: &lt;vector&gt;)
  format-out(&quot;Hello, world!\n&quot;);
  exit-application(0);
end function main;

main(application-name(), application-arguments());

define method main (#rest args)
  princ(&quot;Hello World&quot;);
end;

main();

module:			hello-world
author:			Homer
copyright:		(c) 1994 Homer
version:		1.0

// Hello World in DYLAN

define method main (#rest args)
  princ(&quot;Hello world!&quot;);
end;

main();

define method turn-blue (w :: &lt;window&gt;)
  w.color := $blue;
end method;

local in end below until from then for use case elseif else by cleanup finally when begin above select let if otherwise signal afterwards unless while define rename create to export

Language features
======================================================

row
 Feature Macros
 FeatureLink ../features/hasMacros.html
 Supported ✓
 Example
  define macro table
    { table(?table-class:expression, ?table-contents) }
      => { let ht = make(?table-class); ?table-contents; ht; }
    { table(?rest:*) } => { table(, ?rest); }
  
    table-contents:
    { } => { }
    { ?key:expression => ?value:expression, ... }
      => { ht[?key] := ?value; ... }
  end macro table
  
 Token 
row
 Feature Conditionals
 FeatureLink ../features/hasConditionals.html
 Supported ✓
 Example
 Token 
row
 Feature While Loops
 FeatureLink ../features/hasWhileLoops.html
 Supported ✓
 Example
 Token 
row
 Feature Strings
 FeatureLink ../features/hasStrings.html
 Supported ✓
 Example
  "Hello world"
 Token "
row
 Feature Assignment
 FeatureLink ../features/hasAssignment.html
 Supported ✓
 Example
 Token :=
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Example
  // A comment
 Token //
row
 Feature Multiple Inheritance
 FeatureLink ../features/hasMultipleInheritance.html
 Supported ✓
 Example
 Token 
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
 Token 
row
 Feature Multiple Dispatch
 FeatureLink ../features/hasMultipleDispatch.html
 Supported ✓
 Example
 Token 
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token

printViewSource
