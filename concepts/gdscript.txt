GDScript
========

GDScript is a programming language created in 2008.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222008%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 2008

#605 on PLDB
16 Years Old
39k Repos

GDScript is a high level, dynamically typed programming language used to create content. It uses a syntax similar to Python (blocks are indent-based and many keywords are similar). Its goal is to be optimized for and tightly integrated with Godot Engine, allowing great flexibility for content creation and integration.

- Tags: programming language
- There are at least 39,447 GDScript repos on GitHub
- Early development of GDScript happened in https://github.com/godotengine
- The  Google BigQuery Public Dataset GitHub snapshot shows 513 users using GDScript in 681 repos on GitHub
- Pygments supports syntax highlighting for GDScript
- GitHub supports syntax highlighting for GDScript
- Read more about GDScript on the web: 1.
 https://en.wikipedia.org/wiki/Godot_(game_engine) 1.
- 2 PLDB concepts link to GDScript: GAP, Pygments

# A file is a class!

# Inheritance

extends BaseClass

# Member Variables

var a = 5
var s = &quot;Hello&quot;
var arr = [1, 2, 3]
var dict = {&quot;key&quot;: &quot;value&quot;, 2:3}

# Constants

const ANSWER = 42
const THE_NAME = &quot;Charly&quot;

extends Node2D

func _ready():
	print(&quot;Hello World&quot;)

# Taken from https://github.com/okamstudio/godot/wiki/gdscript
# a file is a class!

# inheritance

extends BaseClass

# member variables

var a = 5
var s = &quot;Hello&quot;
var arr = [1, 2, 3]
var dict = {&quot;key&quot;:&quot;value&quot;, 2:3}

# constants

const answer = 42
const thename = &quot;Charly&quot;

# built-in vector types

var v2 = Vector2(1, 2)
var v3 = Vector3(1, 2, 3)

# function

func some_function(param1, param2):
    var local_var = 5

    if param1 &lt; local_var:
        print(param1)
    elif param2 &gt; 5:
        print(param2)
    else:
        print(&quot;fail!&quot;)

    for i in range(20):
        print(i)

    while(param2 != 0):
        param2 -= 1

    var local_var2 = param1+3
    return local_var2

# subclass

class Something:
    var a = 10

# constructor

func _init():
    print(&quot;constructed!&quot;)
    var lv = Something.new()
    print(lv.a)

Language features
======================================================

row
 Feature Integers
 FeatureLink ../features/hasIntegers.html
 Supported ✓
 Example
  # \d+j?
 Token 
row
 Feature Floats
 FeatureLink ../features/hasFloats.html
 Supported ✓
 Example
  # (\d+\.\d*|\d*\.\d+)([eE][+-]?[0-9]+)?j?
 Token 
row
 Feature Hexadecimals
 FeatureLink ../features/hasHexadecimals.html
 Supported ✓
 Example
  # 0[xX][a-fA-F0-9]+
 Token 
row
 Feature Strings
 FeatureLink ../features/hasStrings.html
 Supported ✓
 Example
  "Hello world"
 Token "
row
 Feature Print() Debugging
 FeatureLink ../features/hasPrintDebugging.html
 Supported ✓
 Example
 Token print
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
  # A comment
 Token 
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Example
  # A comment
 Token #
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token

View source
