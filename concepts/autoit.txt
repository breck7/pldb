AutoIt
======

AutoIt is an open source programming language created in 1999 by Jonathan Bennett.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%221999%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 1999
 https://pldb.io/concepts/../lists/creators.html#q=Jonathan%20Bennett Jonathan Bennett

#320 on PLDB
25 Years Old
5k Repos

AutoIt  is a freeware automation language for Microsoft Windows. In its earliest release, the software was primarily intended to create automation scripts (sometimes called macros) for Microsoft Windows programs but has since grown to include enhancements in both programming language design and overall functionality. While the scripting language in AutoIt 1 and 2 was statement-driven, designed primarily for simulating user interaction, from version 3 onwards the AutoIt syntax is similar to that found in the BASIC family of languages. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/AutoIt Read more on Wikipedia...

- Tags: programming language
- There are at least 4,732 AutoIt repos on GitHub
- Early development of AutoIt happened in AutoIt Consulting Ltd
- The  Google BigQuery Public Dataset GitHub snapshot shows 561 users using AutoIt in 650 repos on GitHub
- There are 12 Project Euler users using AutoIt
- Explore AutoIt snippets on Rosetta Code
- AutoIt appears in the TIOBE Index
- Pygments supports syntax highlighting for AutoIt
- GitHub supports syntax highlighting for AutoIt
- See also: (9 related languages) BASIC, TCP, UDP, AutoHotkey, KiXtart, ThinBasic, Visual Basic, Winbatch, Expect

MsgBox(0, &quot;Message Box&quot;, &quot;Hello World&quot;)

; Find Average by JohnOne, modified by czardas
#include &lt;MsgBoxConstants.au3&gt;

_Example() ; Run the example.

Func _Example()
    ; Display an input box and ask the user to enter some numbers separated by commas.
    Local $sInput = InputBox(&quot;Find Average&quot;, &quot;Enter some numbers separated by commas: 1,2,42,100,3&quot;)

	; If an error occurred then exit the script.
	If @error Then Exit

    ; Populate an array with the user&#39;s input.
    Local $aSplit = StringSplit($sInput, &quot;,&quot;)

    ; Pass the array to the function _Find_Average() and then check for errors.
    Local $fAverage = _Find_Average($aSplit)
    If @error Then Exit

    ; Display the result in a message box.
    MsgBox($MB_OK, &quot;Find Average&quot;, &quot;Result: &quot; &amp; $fAverage)
EndFunc   ;==&gt;_Example

Func _Find_Average($aArray)
    ; If the input is not of the correct type (an array), then return an error along with the details.
    If Not IsArray($aArray) Then Return SetError(1, 0, VarGetType($aArray))
	; More detailed checks are possible, but for brevity just one is performed here.

    ; Declare a variable to store the sum of the numbers.
    Local $iArraySum = 0

    ; Loop through the array.
    For $i = 1 To $aArray[0]
        ; Increment the sum by the number in each array element.
        $iArraySum += Number($aArray[$i])
    Next

    ; Return the average rounded to 2 decimal places.
    Return Round($iArraySum / $aArray[0], 2)
EndFunc   ;==&gt;_Find_Average

#include-once #include #endregion #forcedef #forceref #region and byref case continueloop dim do else elseif endfunc endif endselect exit exitloop for func global if local next not or return select step then to until wend while exit

Language features
======================================================

row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Example
 Token 
row
 Feature Integers
 FeatureLink ../features/hasIntegers.html
 Supported ✓
 Example
  ; \d+
 Token 
row
 Feature Floats
 FeatureLink ../features/hasFloats.html
 Supported ✓
 Example
  ; (\d+\.\d*|\d*\.\d+)([eE][+-]?[0-9]+)?
 Token 
row
 Feature Hexadecimals
 FeatureLink ../features/hasHexadecimals.html
 Supported ✓
 Example
  ; 0[xX][a-fA-F0-9]+
 Token 
row
 Feature Octals
 FeatureLink ../features/hasOctals.html
 Supported ✓
 Example
  ; 0\d+
 Token 
row
 Feature Conditionals
 FeatureLink ../features/hasConditionals.html
 Supported ✓
 Example
 Token 
row
 Feature While Loops
 FeatureLink ../features/hasWhileLoops.html
 Supported ✓
 Example
 Token 
row
 Feature Strings
 FeatureLink ../features/hasStrings.html
 Supported ✓
 Example
  "Hello world"
 Token "
row
 Feature Print() Debugging
 FeatureLink ../features/hasPrintDebugging.html
 Supported ✓
 Example
 Token MsgBox
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Example
  ; A comment
 Token ;
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
 Token 
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token
