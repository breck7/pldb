bog
===

bog is a programming language created in 2020.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222020%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D

#798 on PLDB
4 Years Old

git clone https://github.com/Vexu/bog

Small, strongly typed, embeddable language.

- bog is developed on GitHub and has 254 stars
- bog first developed in https://github.com/Vexu/bog/issues
- bog is written in Zig, Markdown, C, YAML

let {print} = import &quot;std.io&quot;
let world = &quot;world&quot;
print(f&quot;hello {world}!&quot;)

Language features
======================================================

row
 Feature Async Await
 FeatureLink ../features/hasAsyncAwait.html
 Supported ✓
 Token 
 Example
  let {print} = import "std.io"
  let foo = fn()
      print("foo started")
      let bar_frame = async bar()
      print("in foo")
      let bar_res = await bar_frame
      print("foo finished")
      return bar_res
  let bar = fn()
      print("bar started")
      suspend
      print("bar resumed")
      suspend
      print("bar finished")
      return 1
  print("main started")
  let foo_frame = async foo()
  print("in main")
  let res = await foo_frame
  print("main finished:", res)
row
 Feature hasForLoops
 FeatureLink ../features/hasForLoops.html
 Supported ✓
 Token 
 Example
  let mut sum = 0
  for let c in "hellö wörld"
    match c
        "h" => sum += 1
        "e" => sum += 2
        "l" => sum += 3
        "ö" => sum += 4
        "w" => sum += 5
        "d" => sum += 6
row
 Feature hasTryCatch
 FeatureLink ../features/hasTryCatch.html
 Supported ✓
 Token 
 Example
  let foo = fn(arg)
    try
        fails_on_1(arg)
        fails_on_2(arg)
        fails_on_3(arg)
    catch let err
        return err
    return 99
row
 Feature Destructuring
 FeatureLink ../features/hasDestructuring.html
 Supported ✓
 Token 
 Example
  let add = fn ((a,b)) a + b
  let tuplify = fn (a,b) (a,b)
  return add(tuplify(1,2)) # 3
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported ✓
 Token 
 Example
row
 Feature File Imports
 FeatureLink ../features/hasImports.html
 Supported ✓
 Token 
 Example
  let {print} = import "std.io"
row
 Feature Strings
 FeatureLink ../features/hasStrings.html
 Supported ✓
 Token 
 Example
  "pldb"
row
 Feature Assignment
 FeatureLink ../features/hasAssignment.html
 Supported ✓
 Token 
 Example
  let pldb = "pldb"
row
 Feature Print() Debugging
 FeatureLink ../features/hasPrintDebugging.html
 Supported ✓
 Token 
 Example
