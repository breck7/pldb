Caltech Intermediate Form
=========================

Caltech Intermediate Form is a programming language created in 1980.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%221980%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 1980

#2892 on PLDB
44 Years Old

Caltech Intermediate Form (CIF) is a file format for describing integrated circuits. CIF provides a limited set of graphics primitives that are useful for describing the two-dimensional shapes on the different layers of a chip. The format allows hierarchical description, which makes the representation concise. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Caltech_Intermediate_Form Read more on Wikipedia...

- Tags: programming language
- Early development of Caltech Intermediate Form happened in California Institute of Technology
- Caltech Intermediate Form on HOPL
 https://hopl.info/showlanguage.prx?exp=890 Caltech Intermediate Form on HOPL

cifFile ::= (blank* command? semi)* endCommand blank*
command ::= primCommand | defDeleteCommand | defStartCommand semi (blank* primCommand? semi)* defFinishCommand
primCommand ::= polygonCommand | boxCommand | roundFlashCommand | wireCommand | layerCommand | callCommand | userExtensionCommand | commentCommand
polygonCommand ::= &quot;P&quot; path
boxCommand ::= &quot;B&quot; integer sep integer sep point (sep point)?
roundFlashCommand ::= &quot;R&quot; integer sep point
wireCommand ::= &quot;W&quot; integer sep path
layerCommand ::= &quot;L&quot; blank* shortname
defStartCommand ::= &quot;D&quot; blank* &quot;S&quot; integer (sep integer sep integer)?
defFinishCommand ::= &quot;D&quot; blank* &quot;F&quot;
defDeleteCommand ::= &quot;D&quot; blank* &quot;D&quot; integer
callCommand ::= &quot;C&quot; integer transformation
userExtensionCommand ::= digit userText
commentCommand ::= &quot;(&quot; commentText &quot;)&quot;
endCommand ::= &quot;E&quot;
transformation ::= (blank* (&quot;T&quot; point |&quot;M&quot; blank* &quot;X&quot; |&quot;M&quot; blank* &quot;Y&quot; |&quot;R&quot; point)*)*
path ::= point (sep point)*
point ::= sInteger sep sInteger
sInteger ::= sep* &quot;-&quot;? integerD
integer ::= sep* integerD
integerD ::= digit+
shortname ::= c c? c? c?
c ::= digit | upperChar
userText ::= userChar*
commentText ::= commentChar* | commentText &quot;(&quot; commentText &quot;)&quot; commentText
semi ::= blank* &quot;;&quot; blank*
sep ::= upperChar | blank
digit ::= &quot;0&quot; | &quot;1&quot; | ... | &quot;9&quot;
upperChar ::= &quot;A&quot; | &quot;B&quot; | ... | &quot;Z&quot;
blank ::= any ASCII character except digit, upperChar, &quot;-&quot;, &quot;(&quot;, &quot;)&quot;, or &quot;;&quot;
userChar ::= any ASCII character except &quot;;&quot;
commentChar ::= any ASCII character except &quot;(&quot; or &quot;)&quot;
