../code/conceptPage.scroll

id elm
name Elm
appeared 2012
creators Evan Czaplicki
tags pl
website http://elm-lang.org
blog https://elm-lang.org/news
latestVersion 0.19.1
webRepl http://elm-lang.org/try
roadmap https://github.com/elm/compiler/blob/master/roadmap.md
fileExtensions elm
writtenIn haskell markdown json elm bourne-shell yaml javascript css xml python dockerfile
compilesTo javascript

isOpenSource true
visualParadigm false
clocExtensions elm
fileType text
docs https://elm-lang.org/docs
faq https://faq.elm-community.org/
codeMirror elm
rosettaCode http://www.rosettacode.org/wiki/Category:Elm
packageRepository https://package.elm-lang.org/
repoStats
 firstCommit 2012
 commits 5829
 committers 120
 files 236
 newestCommit 2023
country United States and France
originCommunity https://github.com/elm
projectEuler Elm
 memberCount
  2022 4

helloWorldCollection Elm
 -- Hello world in Elm
 
 import Text
 
 main = Text.plainText "Hello, world!"
pygmentsHighlighter Elm
 filename elm.py
 fileExtensions elm
rijuRepl https://riju.codes/elm
 example
  module Main exposing (..)
  
  output : String
  output = "Hello, world!"
  
twitter https://twitter.com/elmlang
leachim6 Elm
 filepath e/Elm.elm
 fileExtensions elm
 example
  import Html exposing (text)
  
  main =
    text "Hello World"
  
languageServerProtocolProject https://github.com/elm-tooling/elm-language-server
 writtenIn elm

githubRepo https://github.com/elm-lang/elm-compiler
 stars 7484
 forks 659
 subscribers 206
 created 2012
 updated 2024
 firstCommit 2012
 description Compiler for Elm, a functional language for reliable webapps.
 issues 336

lineCommentToken --
multiLineCommentTokens {- -}
stringToken "

hasComments true
hasTypeInference true
hasLineComments true
 -- A comment
hasMultiLineComments true
 {- A comment
 -}
hasSemanticIndentation true
hasCaseInsensitiveIdentifiers false
hasStrings true
 "Hello world"
hasFloats true
 -- _?\d+\.(?=\d+)
hasIntegers true
 -- _?\d+

wikipedia https://en.wikipedia.org/wiki/Elm_(programming_language)
 example
  -- This is a single line comment
  
  {- This is a multi-line comment.
     It can span multiple lines.
  -}
  
  {- It is possible to {- nest -} multi-line comments -}
  
  -- Here we define a value named ''greeting''. The type is inferred as a String.
  greeting =
      "Hello World!"
  
   -- It is best to add type annotations to top-level declarations.
  hello : String
  hello =
      "Hi there."
  
  -- Functions are declared the same way, with arguments following the function name.
  add x y =
      x + y
  
  -- Again, it is best to add type annotations.
  hypotenuse : Float -> Float -> Float
  hypotenuse a b =
      sqrt (a^2 + b^2)
  
  -- Functions are also curried; here we've curried the multiplication
  -- infix operator with a `2`
  multiplyBy2 : number -> number
  multiplyBy2 =
      (*) 2
  
  -- If-expressions are used to branch on values
  absoluteValue : number -> number
  absoluteValue number =
      if number < 0 then negate number else number
  
   -- Records are used to hold values with named fields
  book : { title : String, author : String, pages : Int }
  book =
      { title = "Steppenwolf"
      , author = "Hesse"
      , pages = 237
      }
  
  -- Record access is done with `.`
  title : String
  title =
      book.title
  
  -- Record access `.` can also be used as a function
  author : String
  author =
      .author book
  
  -- We can create entirely new types with the `type` keyword.
  -- The following value represents a binary tree.
  type Tree a
      = Empty
      | Node a (Tree a) (Tree a)
  
  -- It is possible to inspect these types with case-expressions.
  depth : Tree a -> Int
  depth tree =
      case tree of
          Empty ->
              0
  
          Node value left right ->
              1 + max (depth left) (depth right)
 related haskell standard-ml ocaml f-sharp vuejs javascript typescript
 summary Elm is a domain-specific programming language for declaratively creating web browser-based graphical user interfaces. Elm is purely functional, and is developed with emphasis on usability, performance, and robustness. It advertises "no runtime exceptions in practice," made possible by the Elm compiler's static type checking.
 pageId 37552825
 dailyPageViews 268
 created 2012
 backlinksCount 54
 revisionCount 395
 appeared 2012
 fileExtensions elm

tiobe Elm

domainName elm-lang.org
 registered 2011
 awisRank
  2022 272317
  2017 111935

githubBigQuery Elm
 repos 2864
 users 2094

linguistGrammarRepo https://github.com/elm-community/Elm.tmLanguage
 firstCommit 2013
 lastCommit 2017
 committerCount 19
 commitCount 295
 sampleCount 3
 example
  
  main = asText (qsort [3,9,1,8,5,4,7])
  
  qsort lst =
    case lst of
      x:xs -> qsort (filter ((>=)x) xs) ++ [x] ++ qsort (filter ((<)x) xs)
      [] -> []
  
  
  {---------------------
  
  QuickSort works as follows:
   - Choose a pivot element which be placed in the "middle" of the sorted list.
     In our case we are choosing the first element as the pivot.
   - Gather all of the elements less than the pivot (the first filter).
     We know that these must come before our pivot element in the sorted list.
     Note: ((>=)x) === (\y -> (>=) x y) === (\y -> x >= y)
   - Gather all of the elements greater than the pivot (the second filter).
     We know that these must come after our pivot element in the sorted list.
   - Run `qsort` on the lesser elements, producing a sorted list that contains
     only elements less than the pivot. Put these before the pivot.
   - Run `qsort` on the greater elements, producing a sorted list. Put these
     after the pivot.
  
  Note that choosing a bad pivot can have bad effects. Take a sorted list with
  N elements. The pivot will always be the lowest member, meaning that it does
  not divide the list very evenly. The list of lessers has 0 elements
  and the list of greaters has N-1 elemens. This means qsort will be called
  N times, each call looking through the entire list. This means, in the worst
  case, QuickSort will make N^2 comparisons.
  
  ----------------------}
  

isbndb 5
 year|publisher|title|authors|isbn13
 2019||Practical Elm For A Busy Developer|Alex S. Korban|9780473484309
 20190702|O'Reilly Media, Inc.|Programming Elm|Jeremy Fairbank|9781680507171
 2018-03-30|Packt Publishing|Elm Web Development|Ajdin Imsirovic|9781788292375
 20200404|Manning Publications|Elm in Action|Richard Feldman|9781638355885
 20180821|Springer Nature|Web Applications with Elm|Wolfgang Loder|9781484226100

githubLanguage Elm
 fileExtensions elm
 trendingProjectsCount 0
 type programming
 aceMode elm
 codemirrorMode elm
 codemirrorMimeType text/x-elm
 tmScope source.elm
 repos 19905

indeedJobs elm engineer
 2017 127

semanticScholar 4
 year|title|doi|citations|influentialCitations|authors|paperId
 2019|Model-View-Update-Communicate: Session Types meet the Elm Architecture|10.4230/DARTS.6.2.13|5|2|S. Fowler|0c500a3661fe5ef06e09ccc26e9252863d499ca6
 2018|Using Elm to Introduce Algebraic Thinking to K-8 Students|10.4204/EPTCS.270.2|4|0|Curtis D'Alves and Tanya Bouman and Christopher W. Schankula and J. Hogg and Levin Noronha and Emily Horsman and R. Siddiqui and C. Anand|9b5288f0d7cbdc8481abb055574008c8e34dd1c2
