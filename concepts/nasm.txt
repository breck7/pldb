Netwide Assembler
=================

Netwide Assembler is an open source assembly language created in 1996.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%221996%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D

#680 on PLDB
28 Years Old

The Netwide Assembler (NASM) is an assembler and disassembler for the Intel x86 architecture. It can be used to write 16-bit, 32-bit (IA-32) and 64-bit (x86-64) programs. NASM is considered to be one of the most popular assemblers for Linux. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Netwide_Assembler

- Netwide Assembler website
 http://www.nasm.us
- Netwide Assembler appears in categories: assembly language
- Netwide Assembler Wikipedia page
 https://en.wikipedia.org/wiki/Netwide_Assembler
- Netwide Assembler first developed in https://github.com/netwide-assembler
- Pygments supports syntax highlighting for Netwide Assembler
- nasm.us was registered in 2007
- See also: (9 related languages)x86 Assembly, Assembly language, X86, IA-32, Linux, Common Object File Format, Extensible Linking Format, PowerPC, SPARC

global _start

section .data

	query_string:		db	&quot;Enter a character:  &quot;
	query_string_len:	equ	$ - query_string
	out_string:			db	&quot;You have input:  &quot;
	out_string_len:		equ	$ - out_string

section .bss

	in_char:			resw 4

section .text

_start:

	mov	rax, 0x2000004	 	; put the write-system-call-code into register rax
	mov	rdi, 1				; tell kernel to use stdout
	mov	rsi, query_string	; rsi is where the kernel expects to find the address of the message
	mov	rdx, query_string_len	; and rdx is where the kernel expects to find the length of the message
	syscall

	; read in the character
	mov	rax, 0x2000003		; read system call
	mov	rdi, 0				; stdin
	mov	rsi, in_char		; address for storage, declared in section .bss
	mov	rdx, 2				; get 2 bytes from the kernel&#39;s buffer (one for the carriage return)
	syscall

	; show user the output
	mov	rax, 0x2000004		; write system call
	mov	rdi, 1				; stdout
	mov	rsi, out_string
	mov	rdx, out_string_len
	syscall

	mov	rax, 0x2000004		; write system call
	mov	rdi, 1				; stdout
	mov	rsi, in_char
	mov	rdx, 2				; the second byte is to apply the carriage return expected in the string
	syscall

	; exit system call
	mov	rax, 0x2000001		; exit system call
        xor     rdi, rdi
	syscall

Language features
======================================================

row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Token 
 Example
  ; A comment
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Token ;
 Example
  ; A comment
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Token 
 Example
