StoneCutter
===========

StoneCutter is a grammar language created in 2020 by John D. Leidel and David Donofrio and Frank Conlon.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222020%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 2020
 https://pldb.io/concepts/../lists/creators.html#q=John%20D.%20Leidel John D. Leidel
 https://pldb.io/concepts/../lists/creators.html#q=David%20Donofrio David Donofrio
 https://pldb.io/concepts/../lists/creators.html#q=Frank%20Conlon Frank Conlon

#4304 on PLDB
4 Years Old

In this work we introduce the StoneCutter instruction set design language and tool infrastructure. StoneCutter provides a familiar, C-like language construct by which to develop the implementation for individual, programmable instructions. The LLVM-based StoneCutter compiler performs individual instruction and whole-ISA optimizations in order to generate a high performance, Chisel HDL representation of the target design. Utilizing the existing Chisel tools, users can also generate C++ cycle accurate simulation models as well as Verilog representations of the target design. As a result, StoneCutter provides a very rapid design environment for development and experimentation.

- Tags: grammarLanguage
- Early development of StoneCutter happened in Tactical Computing Laboratories LLC
- Read more about StoneCutter on the web: 1.
 https://dl.acm.org/doi/10.1145/3387902.3394029 1.
