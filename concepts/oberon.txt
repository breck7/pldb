Oberon
======

Oberon is a programming language created in 1986 by Niklaus Wirth.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%221986%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 1986
 https://pldb.io/concepts/../lists/creators.html#q=Niklaus%20Wirth Niklaus Wirth

#310 on PLDB
38 Years Old

Oberon is a general-purpose programming language created in 1986 by Niklaus Wirth and the latest member of the Wirthian family of ALGOL-like languages (Euler, Algol-W, Pascal, Modula, and Modula-2). Oberon was the result of a concentrated effort to increase the power of Modula-2, the direct successor of Pascal, and simultaneously to reduce its complexity. Its principal new feature is the concept of type extension of record types: It permits the construction of new data types on the basis of existing ones and to relate them, deviating from the dogma of strictly static data typing. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Oberon_(programming_language) Read more on Wikipedia...

- Tags: programming language
- Interview with the creator of Oberon: 1.
 https://pldb.io/blog/niklausWirth.html 1.
- Early development of Oberon happened in Eidgenössische Technische Hochschule Zürich
- There are 289 members in the Oberon subreddit
- There are 3 Project Euler users using Oberon
- Oberon on HOPL
 https://hopl.info/showlanguage.prx?exp=1415 Oberon on HOPL
- Oberon appears in the TIOBE Index
- Indeed.com has 0 matches for "applescript engineer".
- projectoberon.com was registered in 2011
- See also: (17 related languages) Modula-2, Oberon-2, Zonnon, Go, Nim, Algol, Euler, Pascal, Modula, Ada, Linux, Solaris, Lex, Yacc, X86, Obliq, Visual Studio
- 1 PLDB concepts link to Oberon: Oberon-2

MODULE Main;

IMPORT Out;

BEGIN
  Out.String(&quot;Hello, world!&quot;);
  Out.Ln;
END Main.

MODULE HelloWorld;

IMPORT Out;

BEGIN
   Out.Open;
   Out.String(&#39;Hello World&#39;);
END HelloWorld.

MODULE Rectangles;

IMPORT Figures;

TYPE
   Rectangle* = POINTER TO RectangleDesc;

   RectangleDesc* = RECORD
      (Figures.FigureDesc)
      x, y, w, h : INTEGER;
   END;

PROCEDURE Draw* (r : Rectangle);
BEGIN
  (* ... *)
END Draw;

(* Other procedures here *)

PROCEDURE Handle* (f: Figure; VAR msg: Figures.Message);
   VAR
      r : Rectangle;
BEGIN
   r := f(Rectangle);
   IF    msg IS Figures.DrawMsg THEN Draw(r)
   ELSIF msg IS Figures.MarkMsg THEN Mark(r)
   ELSIF msg IS Figures.MoveMsg THEN Move(r, msg(Figures.MoveMsg).dx, msg(Figures.MoveMsg).dy)
   ELSE  (* ignore *)
   END
END Handle;

PROCEDURE New* (VAR r : Rectangle);
BEGIN
   NEW(r);
   Figures.Init(r, Handle);
END New;

END Rectangles.

Language features
======================================================

row
 Feature Strings
 FeatureLink ../features/hasStrings.html
 Supported ✓
 Example
  'Hello world'
 Token '
row
 Feature Assignment
 FeatureLink ../features/hasAssignment.html
 Supported ✓
 Example
 Token :=
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
  (* A comment
  *)
 Token 
row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Example
  (* A comment
  *)
 Token (* *)
row
 Feature Pointers
 FeatureLink ../features/hasPointers.html
 Supported ✓
 Example
 Token 
row
 Feature Print() Debugging
 FeatureLink ../features/hasPrintDebugging.html
 Supported ✓
 Example
 Token Out.String
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token

View source
