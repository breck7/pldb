Ragel
=====

Ragel is an open source programming language created in 2007.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222007%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 2007

#672 on PLDB
17 Years Old
66 Repos

git clone https://github.com/bnoordhuis/ragel

Ragel is a finite-state machine compiler and a parser generator. Initially Ragel supported output for C, C++ and Assembly source code,. Although subsequently extended to support several other languages (said to be Objective C, D, Go, Ruby, and Java) this support of other languages was withdrawn . Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Ragel Read more on Wikipedia...

- Tags: programming language
- Ragel is developed on GitHub and has 156 stars
- There are at least 66 Ragel repos on GitHub
- Early development of Ragel happened in https://github.com/bnoordhuis/ragel/issues
- Ragel is written in C++, Make, Bourne shell, Vim script, awk, M4, OCaml, Tex, Ruby, Lex
- The  Google BigQuery Public Dataset GitHub snapshot shows 295 users using Ragel in 317 repos on GitHub
- Pygments supports syntax highlighting for Ragel
- See also: (9 related languages) C, D, Go, Ruby, Java, Regular Expressions, ASCII, XUML, Umple

=begin
%%{
  machine simple_scanner;

  action Emit {
    emit data[(ts+8)..(te-7)].pack(&#39;c*&#39;)
  }

  foo = &#39;STARTFOO&#39; any+ :&gt;&gt; &#39;ENDFOO&#39;;
  
  main := |*
    foo =&gt; Emit;
    any;
  *|;
}%%
=end

# Scans a file for &quot;STARTFOO[...]ENDFOO&quot; blocks and outputs their contents.
#
# ENV[&#39;CHUNK_SIZE&#39;] determines how much of the file to read in at a time, allowing you to control memory usage.
#
# Uses ragel&#39;s scanner functionality even though it&#39;s not strictly necessary.
class SimpleScanner
  attr_reader :path

  def initialize(path)
    @path = path
    %% write data;
    # % (this fixes syntax highlighting)
  end

  def emit(foo)
    $stdout.puts foo
  end
  
  def perform
    # So that ragel doesn&#39;t try to get it from data.length
    pe = :ignored
    eof = :ignored

    %% write init;
    # % (this fixes syntax highlighting)

    leftover = []
    
    File.open(path) do |f|
      while chunk = f.read(ENV[&#39;CHUNK_SIZE&#39;].to_i)
        data = leftover + chunk.unpack(&#39;c*&#39;)
        p ||= 0
        pe = data.length

        %% write exec;
        # % (this fixes syntax highlighting)
        if ts
          leftover = data[ts..pe]
          p = p - ts
          ts = 0
        else
          leftover = []
          p = 0
        end
      end
    end
  end
end

s = SimpleScanner.new ARGV[0]
s.perform

Language features
======================================================

row
 Feature Integers
 FeatureLink ../features/hasIntegers.html
 Supported ✓
 Example
  # [+-]?[0-9]+
 Token 
row
 Feature Hexadecimals
 FeatureLink ../features/hasHexadecimals.html
 Supported ✓
 Example
  # 0x[0-9A-Fa-f]+
 Token 
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
  # A comment
 Token 
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Example
  # A comment
 Token #
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token

View source
