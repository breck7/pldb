title SourcePawn
appeared 2014
type pl
country United States
originCommunity AlliedModders LLC

hasMultiLineComments true
 /* A comment
 */
hasComments true
 /* A comment
 */
hasSemanticIndentation false
hasOctals true
hasHexadecimals true
hasFloats true
hasIntegers true
hasLineComments true

multiLineCommentTokens /* */

githubRepo https://github.com/alliedmodders/sourcepawn
 firstCommit 2014
 stars 239
 forks 53
 subscribers 33
 created 2014
 updated 2022
 description A small, statically typed scripting language.
 issues 62

repoStats
 firstCommit 2014
 commits 1344
 committers 44
 files 1220

githubLanguage SourcePawn
 fileExtensions sp inc
 trendingProjectsCount 0
 type programming
 aceMode text
 tmScope source.sourcepawn
 aliases sourcemod
 repos 7547
githubBigQuery SourcePawn
 repos 9023
 users 6524

pygmentsHighlighter SourcePawn
 filename pawn.py
 fileExtensions sp
linguistGrammarRepo https://github.com/github-linguist/sublime-sourcepawn
 firstCommit 2013
 lastCommit 2016
 committerCount 6
 commitCount 56
 sampleCount 6
 example
  /* Fixed point arithmetic
   *
   * (c) Copyright 1998-2011, ITB CompuPhase
   * This file is provided as is (no warranties).
   */
  #pragma library Fixed
  
  const fround_method: {
    fround_round = 0,
    fround_floor,
    fround_ceil,
    fround_tozero,
    fround_unbiased
  }
  
  native Fixed:fixed(value);
  native Fixed:strfixed(const string[]);
  native Fixed:fmul(Fixed:oper1, Fixed:oper2);
  native Fixed:fdiv(Fixed:dividend, Fixed:divisor);
  native Fixed:ffract(Fixed:value);
  native       fround(Fixed:value, fround_method:method=fround_round);
  native Fixed:fpower(Fixed:value, exponent);
  native Fixed:fsqroot(Fixed:value);
  native Fixed:fabs(Fixed:value);
  
  #pragma rational Fixed(3)
  
  /* user defined operators */
  native Fixed:operator*(Fixed:oper1, Fixed:oper2) = fmul;
  native Fixed:operator/(Fixed:oper1, Fixed:oper2) = fdiv;
  native Fixed:operator=(oper) = fixed;
  
  stock Fixed:operator++(Fixed:oper)
      return oper + fixed(1);
  
  stock Fixed:operator--(Fixed:oper)
      return oper - fixed(1);
  
  stock Fixed:operator*(Fixed:oper1, oper2)
      return Fixed: (_:oper1 * oper2);            /* "*" is commutative */
  
  stock Fixed:operator/(Fixed:oper1, oper2)
      return oper1 / fixed(oper2);
  
  stock Fixed:operator/(oper1, Fixed:oper2)
      return fdiv(fixed(oper1), oper2);
  
  stock Fixed:operator+(Fixed:oper1, oper2)
      return oper1 + fixed(oper2);                /* "+" is commutative */
  
  stock Fixed:operator-(Fixed:oper1, oper2)
      return oper1 - fixed(oper2);
  
  stock Fixed:operator-(oper1, Fixed:oper2)
      return fixed(oper1) - oper2;
  
  stock bool:operator>(Fixed:oper1, oper2)
      return oper1 > fixed(oper2);
  
  stock bool:operator>(oper1, Fixed:oper2)
      return fixed(oper1) > oper2;
  
  stock bool:operator>=(Fixed:oper1, oper2)
      return oper1 >= fixed(oper2);
  
  stock bool:operator>=(oper1, Fixed:oper2)
      return fixed(oper1) >= oper2;
  
  stock bool:operator<(Fixed:oper1, oper2)
      return oper1 < fixed(oper2);
  
  stock bool:operator<(oper1, Fixed:oper2)
      return fixed(oper1) < oper2;
  
  stock bool:operator<=(Fixed:oper1, oper2)
      return oper1 <= fixed(oper2);
  
  stock bool:operator<=(oper1, Fixed:oper2)
      return fixed(oper1) <= oper2;
  
  stock bool:operator==(Fixed:oper1, oper2)       /* "==" is commutative */
      return oper1 == fixed(oper2);
  
  stock bool:operator!=(Fixed:oper1, oper2)       /* "!=" is commutative */
      return oper1 != fixed(oper2);
  
  /* forbidden operations */
  forward operator%(Fixed:oper1, Fixed:oper2);
  forward operator%(Fixed:oper1, oper2);
  forward operator%(oper1, Fixed:oper2);

fileType text
isOpenSource true
centralPackageRepositoryCount 0
