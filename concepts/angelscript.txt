Angelscript
===========

Angelscript is a programming language created in 2003 by Andreas Jönsson.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222003%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D
 https://pldb.io/concepts/../lists/creators.html#q=Andreas%20J%C3%B6nsson

#547 on PLDB
21 Years Old
1k Repos

AngelScript is a game-oriented interpreted compiled scripting language. AngelScript features static typing, object handles (similar to C++ pointers but garbage collected via reference counting), object-orientation, single inheritance, multiple inheritance with interfaces. Allows operators to be registered and overloaded. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/AngelScript

- Angelscript website
 http://angelcode.com/angelscript
- Angelscript Wikipedia page
 https://en.wikipedia.org/wiki/AngelScript
- There are at least 1,140 Angelscript repos on GitHub
- The  Google BigQuery Public Dataset GitHub snapshot shows 275 users using Angelscript in 286 repos on GitHub
- Explore Angelscript snippets on Rosetta Code
- Angelscript appears in the TIOBE Index
- GitHub supports syntax highlighting for Angelscript
- See also: (1 related languages)Eclipse

void main() { print(&quot;Hello World\n&quot;); }

// Hello world in AngelScript

void main() { print(&quot;Hello world\n&quot;); }

/*
*	This is a sample script.
*/

#include &quot;BotManagerInterface.acs&quot;

BotManager::BotManager g_BotManager( @CreateDumbBot );

CConCommand@ m_pAddBot;

void PluginInit()
{
	g_BotManager.PluginInit();
	
	@m_pAddBot = @CConCommand( &quot;addbot&quot;, &quot;Adds a new bot with the given name&quot;, @AddBotCallback );
}

void AddBotCallback( const CCommand@ args )
{
	if( args.ArgC() &lt; 2 )
	{
		g_Game.AlertMessage( at_console, &quot;Usage: addbot &lt;name&gt;&quot; );
		return;
	}
	
	BotManager::BaseBot@ pBot = g_BotManager.CreateBot( args[ 1 ] );
	
	if( pBot !is null )
	{
		g_Game.AlertMessage( at_console, &quot;Created bot &quot; + args[ 1 ] + &quot;\n&quot; );
	}
	else
	{
		g_Game.AlertMessage( at_console, &quot;Could not create bot\n&quot; );
	}
}

final class DumbBot : BotManager::BaseBot
{
	DumbBot( CBasePlayer@ pPlayer )
	{
		super( pPlayer );
	}
	
	void Think()
	{
		BotManager::BaseBot::Think();
		
		// If the bot is dead and can be respawned, send a button press
		if( Player.pev.deadflag &gt;= DEAD_RESPAWNABLE )
		{
			Player.pev.button |= IN_ATTACK;
		}
		else
			Player.pev.button &amp;= ~IN_ATTACK;
		
		KeyValueBuffer@ pInfoBuffer = g_EngineFuncs.GetInfoKeyBuffer( Player.edict() );
		
		pInfoBuffer.SetValue( &quot;topcolor&quot;, Math.RandomLong( 0, 255 ) );
		pInfoBuffer.SetValue( &quot;bottomcolor&quot;, Math.RandomLong( 0, 255 ) );
		
		if( Math.RandomLong( 0, 100 ) &gt; 10 )
			Player.pev.button |= IN_ATTACK;
		else
			Player.pev.button &amp;= ~IN_ATTACK;
			
		for( uint uiIndex = 0; uiIndex &lt; 3; ++uiIndex )
		{
			m_vecVelocity[ uiIndex ] = Math.RandomLong( -50, 50 );
		}
	}
}

BotManager::BaseBot@ CreateDumbBot( CBasePlayer@ pPlayer )
{
	return @DumbBot( pPlayer );
}

and abstract* auto bool break case cast class const continue default do double else enum false final* float for from* funcdef get* if import in inout int interface int8 int16 int32 int64 is mixin namespace not null or out override* private protected return set* shared* super* switch this* true typedef uint uint8 uint16 uint32 uint64 void while xor * ** / % + - = > ( ) == != ? : = += -= *= /= %= **= ++ -- & , { } ; | ^ ~ > >>> &= |= ^= >= >>>= . && || ! [ ] ^^ @ !is :: 123456789 123.123e123 123.123e123f 0x1234FEDC 0d123987 0o1276 0b1010 'abc' "abc" """heredoc""" _Abc123 // /* */

Language features
======================================================

row
 Feature Conditionals
 FeatureLink ../features/hasConditionals.html
 Supported ✓
 Token 
 Example
row
 Feature Switch Statements
 FeatureLink ../features/hasSwitch.html
 Supported ✓
 Token 
 Example
row
 Feature Constants
 FeatureLink ../features/hasConstants.html
 Supported ✓
 Token 
 Example
row
 Feature Classes
 FeatureLink ../features/hasClasses.html
 Supported ✓
 Token 
 Example
row
 Feature While Loops
 FeatureLink ../features/hasWhileLoops.html
 Supported ✓
 Token 
 Example
row
 Feature Booleans
 FeatureLink ../features/hasBooleans.html
 Supported ✓
 Token true false
 Example
row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Token /* */
 Example
  /* A comment
  */
row
 Feature Print() Debugging
 FeatureLink ../features/hasPrintDebugging.html
 Supported ✓
 Token print
 Example
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Token 
 Example
  // A comment
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Token //
 Example
  // A comment
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Token 
 Example
