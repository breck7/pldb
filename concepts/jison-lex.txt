Jison Lex
=========

Jison Lex is an open source programming language created in 2013 by Zachary Carter.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222013%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D
 https://pldb.io/concepts/../lists/creators.html#q=Zachary%20Carter

#812 on PLDB
11 Years Old
0 Repos

git clone https://github.com/zaach/jison-lex

generates lexical analyzers. used by jison.

- Jison Lex is developed on GitHub and has 50 stars
- There are at least 0 Jison Lex repos on GitHub
- Jison Lex first developed in https://github.com/zaach/jison-lex/issues
- Jison Lex is written in JavaScript, Lex, JSON, Markdown
- GitHub supports syntax highlighting for Jison Lex

%%
\n+                         {yy.freshLine = true;}
\s+                         {yy.freshLine = false;}
&quot;y{&quot;[^}]*&quot;}&quot;                {yytext = yytext.substr(2, yyleng - 3); return &#39;ACTION&#39;;}
[a-zA-Z_][a-zA-Z0-9_-]*     {return &#39;NAME&#39;;}
&#39;&quot;&#39;([^&quot;]|&#39;\&quot;&#39;)*&#39;&quot;&#39;          {return &#39;STRING_LIT&#39;;}
&quot;&#39;&quot;([^&#39;]|&quot;\&#39;&quot;)*&quot;&#39;&quot;          {return &#39;STRING_LIT&#39;;}
&quot;|&quot;                         {return &#39;|&#39;;}
&quot;[&quot;(&quot;\]&quot;|[^\]])*&quot;]&quot;         {return &#39;ANY_GROUP_REGEX&#39;;}
&quot;(&quot;                         {return &#39;(&#39;;}
&quot;)&quot;                         {return &#39;)&#39;;}
&quot;+&quot;                         {return &#39;+&#39;;}
&quot;*&quot;                         {return &#39;*&#39;;}
&quot;?&quot;                         {return &#39;?&#39;;}
&quot;^&quot;                         {return &#39;^&#39;;}
&quot;/&quot;                         {return &#39;/&#39;;}
&quot;\\&quot;[a-zA-Z0]               {return &#39;ESCAPE_CHAR&#39;;}
&quot;TEMPLATEquot;                         {return &#39;TEMPLATE#39;;}
&quot;&lt;&lt;EOF&gt;&gt;&quot;                   {return &#39;TEMPLATE#39;;}
&quot;.&quot;                         {return &#39;.&#39;;}
&quot;%%&quot;                        {return &#39;%%&#39;;}
&quot;{&quot;\d+(&quot;,&quot;\s?\d+|&quot;,&quot;)?&quot;}&quot;   {return &#39;RANGE_REGEX&#39;;}
/&quot;{&quot;                        %{if (yy.freshLine) { this.input(&#39;{&#39;); return &#39;{&#39;; } else { this.unput(&#39;y&#39;); }%}
&quot;}&quot;                         %{return &#39;}&#39;;%}
&quot;%{&quot;(.|\n)*?&quot;}%&quot;            {yytext = yytext.substr(2, yyleng - 4); return &#39;ACTION&#39;;}
.                           {/* ignore bad characters */}
&lt;&lt;EOF&gt;&gt;                     {return &#39;EOF&#39;;}

Language features
======================================================

row
 Feature Booleans
 FeatureLink ../features/hasBooleans.html
 Supported âœ“
 Token true false
 Example
