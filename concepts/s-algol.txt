S-algol
=======

S-algol is a programming language created in 1979 by Ron Morrison and Tony Davie.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%221979%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D
 https://pldb.io/concepts/../lists/creators.html#q=Ron%20Morrison
 https://pldb.io/concepts/../lists/creators.html#q=Tony%20Davie

#1148 on PLDB
45 Years Old

S-algol (St Andrews Algol) is a computer programming language derivative of ALGOL 60 developed at the University of St Andrews in 1979 by Ron Morrison and Tony Davie. The language is a modification of ALGOL to contain orthogonal data types that Morrison created for his PhD thesis.  Morrison would go on to become professor at the university and head of the department of computer science. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/S-algol

- S-algol Wikipedia page
 https://en.wikipedia.org/wiki/S-algol
- S-algol first developed in University of St Andrews
- S-algol on HOPL
 https://hopl.info/showlanguage.prx?exp=869
- See also: (7 related languages)ALGOL 60, PS-algol, Unix, Pascal, C, Napier88, Algol

write &quot;Hello World&quot;
?

! Comments are introduced by an exclamation point and continue until end of line.

! The let keyword introduces declarations of constants and variables
! Identifiers start with an alphabetic character followed by alphanumeric characters or the full stop (.)
! An initial value must be given, and this determines the data type of declaration

let width := 10                   ! := sets the value of a variable, this is an int
let animal := &quot;dog&quot;               ! type string

let x := -7 ; let y := x + x      ! ; separates clauses, needed only if there are two or more clauses on a line

let n.a = 6.022e+23               ! = is used to set the value of a constant, this is a cfloat (constant float)

! if and case can have values and be used in expressions
let no.of.lives := if animal = &quot;cat&quot; then 9 else 1

! Sieve of Eratosthenes
write &quot;Find primes up to n = ?&quot;
let n = readi                     ! constant values can be set during the program run
let p = vector 2::n of true       ! vector of bool with bounds 2 to n
for i = 2 to truncate(sqrt(n)) do ! for indexes are constants so they use = rather than :=
    if p(i) do                    ! vector dereference uses parens like a procedure call
        for j = 2 * i to n by i do
            p(j) := false
for i = 2 to n do
    if p(i) do write i, &quot;&#39;n&quot;      ! &#39;n in a literal string is a newline

! structure (record) type for a binary tree of cstrings
! the pntr data type can point to a structure of any type, type checking is done at runtime
structure tree.node(cstring name ; pntr left, right)

! inserts a new string into the binary tree head
procedure insert.tree(cpntr head ; cstring new -&gt; pntr)
! the case clause ends with a mandatory default option, use default : {} if it is not needed
case true of
    head = nil       : tree.node(new, nil, nil)
    new &lt; head(name) : { head(left) := insert.tree(head(left), new) ; head }
    new &gt; head(name) : { head(right) := insert.tree(head(right), new) ; head }
    default          : head

procedure print.tree(cpntr head)
if head ~= nil do                 ! ~= is the not equals operator
begin
    print.tree(head(left))
    write head(name), &quot;&#39;n&quot;
    print.tree(head(right))
end

let fruit := nil
fruit := insert.tree(fruit, &quot;banana&quot;)
fruit := insert.tree(fruit, &quot;kiwi&quot;)
fruit := insert.tree(fruit, &quot;apple&quot;)
fruit := insert.tree(fruit, &quot;peach&quot;)
print.tree(fruit)                 ! print in sorted order

! The end of the S-algol program is indicated by ?
?

Language features
======================================================

row
 Feature Booleans
 FeatureLink ../features/hasBooleans.html
 Supported ✓
 Token true false
 Example
row
 Feature Strings
 FeatureLink ../features/hasStrings.html
 Supported ✓
 Token "
 Example
  "Hello world"
row
 Feature Print() Debugging
 FeatureLink ../features/hasPrintDebugging.html
 Supported ✓
 Token write
 Example
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Token 
 Example
  ! A comment
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Token !
 Example
  ! A comment
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Token 
 Example
