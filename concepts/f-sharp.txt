F#
==

F# is an open source programming language created in 2005 by Don Syme.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222005%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 2005
 https://pldb.io/concepts/../lists/creators.html#q=Don%20Syme Don Syme

#67 on PLDB
19 Years Old

F# (pronounced F sharp) is a strongly typed, multi-paradigm programming language that encompasses functional, imperative, and object-oriented programming methods. F# is most often used as a cross-platform Common Language Infrastructure (CLI) language, but it can also generate JavaScript and graphics processing unit (GPU) code. F# is developed by the F# Software Foundation, Microsoft and open contributors. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/F_Sharp_(programming_language) Read more on Wikipedia...

- Tags: programming language
- Early development of F# happened in Microsoft Research
- The  Google BigQuery Public Dataset GitHub snapshot shows 4k users using F# in 6k repos on GitHub
- Check out the 128 F# meetup groups on Meetup.com.
- There are 1,245 Project Euler users using F#
- In the 2021 StackOverflow developer survey F# programmers reported a median salary of $81,037. 1% of respondents reported using F#. 804 programmers reported using F#, and 2,157 said they wanted to use it
- F# on HOPL
 https://hopl.info/showlanguage.prx?exp=3716 F# on HOPL
- F# appears in the TIOBE Index
- F# Ubuntu package
 https://packages.ubuntu.com/jammy/fsharp F# Ubuntu package
- Monaco package for syntax highlighting F#
- Pygments supports syntax highlighting for F#
- GitHub supports syntax highlighting for F#
- F# appears in the Quine Relay project
- There is 1 Jupyter Kernel for F#
- There is a central package repository for F#
- Read more about F# on the web: 1.
 https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/index 1.
- 19 PLDB concepts link to F#: Ace Editor, Blech, cloc, corescript, Dafny, F*, Gforth, jsil-compiler, juniper, mal, preforth, Pygments, r3, reforth, Roslyn compiler, spiral, tao3d, Vale, Wonkey

module Program

let square num = num * num

printfn &quot;Hello, world!&quot;

printfn &quot;Hello World&quot;

(* Hello World in F# *)

printf &quot;Hello World!\n&quot;

module Sample

open System

type Foo =
    {
        Bar : string
    }

type Baz = interface end

let Sample1(xs : int list) : string =
    xs
    |&gt; List.map (fun x -&gt; string x)
    |&gt; String.concat &quot;,&quot;

/// A simple prime number detector
let isPrime (n:int) =
   let bound = int (sqrt (float n))
   seq {2 .. bound} |&gt; Seq.forall (fun x -&gt; n % x &lt;&gt; 0)

// We are using async workflows
let primeAsync n =
    async { return (n, isPrime n) }

/// Return primes between m and n using multiple threads
let primes m n =
    seq {m .. n}
        |&gt; Seq.map primeAsync
        |&gt; Async.Parallel
        |&gt; Async.RunSynchronously
        |&gt; Array.filter snd
        |&gt; Array.map fst

// Run a test
primes 1000000 1002000
    |&gt; Array.iter (printfn &quot;%d&quot;)

abstract and atomic as assert asr base begin break checked component const constraint constructor continue class default delegate do done downcast downto elif else end exception eager event external extern false finally for fun function fixed functor global if in include inherit inline interface internal land lor lsl lsr lxor lazy let match member mod module mutable namespace method mixin new not null of open or object override private parallel process protected pure public rec return static sealed struct sig then to true tailcall trait try type upcast use val void virtual volatile when while with yield

Language features
======================================================

row
 Feature Binary Literals
 FeatureLink ../features/hasBinaryNumbers.html
 Supported ✓
 Example
  // 0[bB][01][01_]*[uU]?[yslLn]?
 Token 
row
 Feature Integers
 FeatureLink ../features/hasIntegers.html
 Supported ✓
 Example
  // \d[\d_]*[uU]?[yslLnQRZINGmM]?
 Token 
row
 Feature Floats
 FeatureLink ../features/hasFloats.html
 Supported ✓
 Example
  // -?\d[\d_]*(.[\d_]*)?([eE][+\-]?\d[\d_]*)[fFmM]?
 Token 
row
 Feature Hexadecimals
 FeatureLink ../features/hasHexadecimals.html
 Supported ✓
 Example
  // 0[xX][\da-fA-F][\da-fA-F_]*[uU]?[yslLn]?[fF]?
 Token 
row
 Feature Octals
 FeatureLink ../features/hasOctals.html
 Supported ✓
 Example
  // 0[oO][0-7][0-7_]*[uU]?[yslLn]?
 Token 
row
 Feature Conditionals
 FeatureLink ../features/hasConditionals.html
 Supported ✓
 Example
 Token 
row
 Feature Access Modifiers
 FeatureLink ../features/hasAccessModifiers.html
 Supported ✓
 Example
 Token 
row
 Feature Functions
 FeatureLink ../features/hasFunctions.html
 Supported ✓
 Example
 Token 
row
 Feature Constants
 FeatureLink ../features/hasConstants.html
 Supported ✓
 Example
 Token 
row
 Feature Classes
 FeatureLink ../features/hasClasses.html
 Supported ✓
 Example
 Token 
row
 Feature While Loops
 FeatureLink ../features/hasWhileLoops.html
 Supported ✓
 Example
 Token 
row
 Feature Booleans
 FeatureLink ../features/hasBooleans.html
 Supported ✓
 Example
 Token true false
row
 Feature Strings
 FeatureLink ../features/hasStrings.html
 Supported ✓
 Example
 Token "
row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Example
  (* A comment
  *)
 Token (* *)
row
 Feature Print() Debugging
 FeatureLink ../features/hasPrintDebugging.html
 Supported ✓
 Example
 Token printfn
row
 Feature Units of Measure
 FeatureLink ../features/hasUnitsOfMeasure.html
 Supported ✓
 Example
  // https://fsharpforfunandprofit.com/posts/units-of-measure/
  [] type N = kg m/sec^2
  
  let force1 = 5.0
  let force2 = 5.0
  
  force1 = force2 // true
 Token 
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Example
  // A comment
 Token //
row
 Feature Type Inference
 FeatureLink ../features/hasTypeInference.html
 Supported ✓
 Example
 Token 
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported ✓
 Example
 Token 
row
 Feature Operator Overloading
 FeatureLink ../features/hasOperatorOverloading.html
 Supported ✓
 Example
 Token 
row
 Feature Namespaces
 FeatureLink ../features/hasNamespaces.html
 Supported ✓
 Example
  namespace Widgets
  type MyWidget1 =
     member this.WidgetName = "Widget1"
  module WidgetsModule =
     let widgetName = "Widget2"
 Token 
row
 Feature File Imports
 FeatureLink ../features/hasImports.html
 Supported ✓
 Example
  open module-or-namespace-name
  open System.IO
  open List
  open Seq
 Token 
row
 Feature Directives
 FeatureLink ../features/hasDirectives.html
 Supported ✓
 Example
  #if VERSION1
  let function1 x y =
     printfn "x: %d y: %d" x y
     x + 2 * y
  #else
  let function1 x y =
     printfn "x: %d y: %d" x y
     x - 2*y
  #endif
  // Line directives as source maps can be used when compiling to F#:
  #line 25 "C:\\Projects\\MyProject\\MyProject\\Script1"
 Token 
row
 Feature Doc comments
 FeatureLink ../features/hasDocComments.html
 Supported ✓
 Example
  /// Adds 2 numbers
  let rec add x y =
   x + y
 Token 
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
 Token 
row
 Feature Case Insensitive Identifiers
 FeatureLink ../features/hasCaseInsensitiveIdentifiers.html
 Supported X
 Example
 Token
