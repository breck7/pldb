import ../code/conceptPage.scroll

id oz
name Oz
appeared 1991
creators Gert Smolka
tags pl
website http://mozart.github.io

isOpenSource true
visualParadigm false
fileType text
wordRank 2692
docs https://www.ps.uni-saarland.de/oz2/documentation/ http://mozart2.org/mozart-v1/doc-1.4.0/tutorial/index.html
codeMirror oz
rosettaCode http://www.rosettacode.org/wiki/Category:Oz
country Germany
originCommunity Universität des Saarlandes
projectEuler Oz
 memberCount
  2019 4
  2022 4

helloWorldCollection Oz
 % Hello World in Oz
 
 functor
 import
   System
   Application
 define
   {System.showInfo "Hello World!"}
   {Application.exit 0}
 end
rijuRepl https://riju.codes/oz
 example
  functor
  import
      Application
      System
  define
      {System.showInfo 'Hello, world!'}
      {Application.exit 0}
  end

lineCommentToken %
booleanTokens true false

hasComments true
hasLineComments true
 % A comment
hasSemanticIndentation false
hasBooleans true

wikipedia https://en.wikipedia.org/wiki/Oz_(programming_language)
 example
  class Counter
     attr val
     meth init(Value)
        val:=Value
     end
     meth browse
        {Browse @val}
     end
     meth inc(Value)
        val :=@val+Value
     end
  end
  
  local C in
     C = {New Counter init(0)}
     {C inc(6)}
     {C browse}
  end
 related erlang lisp prolog alice scala unix freebsd linux curry mercury visual-prolog
 summary Oz is a multiparadigm programming language, developed in the Programming Systems Lab at Université catholique de Louvain, for programming language education. It has a canonical textbook: Concepts, Techniques, and Models of Computer Programming. Oz was first designed by Gert Smolka and his students in 1991. In 1996, development of Oz continued in cooperation with the research group of Seif Haridi and Peter Van Roy at the Swedish Institute of Computer Science. Since 1999, Oz has been continually developed by an international group, the Mozart Consortium, which originally consisted of Saarland University, the Swedish Institute of Computer Science, and the Université catholique de Louvain. In 2005, the responsibility for managing Mozart development was transferred to a core group, the Mozart Board, with the express purpose of opening Mozart development to a larger community. The Mozart Programming System is the primary implementation of Oz. It is released with an open source license by the Mozart Consortium. Mozart has been ported to different flavors of Unix, FreeBSD, Linux, Windows, and macOS.
 pageId 256916
 dailyPageViews 78
 created 2003
 backlinksCount 60
 revisionCount 228
 appeared 1991

hopl https://hopl.info/showlanguage.prx?exp=2327
tiobe Oz

domainName mozart.github.io
 awisRank
  2017 3368943

githubBigQuery Oz
 repos 72
 users 70

linguistGrammarRepo https://github.com/eregon/oz-tmbundle
 firstCommit 2010
 lastCommit 2012
 committerCount 2
 commitCount 59
 sampleCount 1
 example
  % You can get a lot of information about Oz by following theses links  :
  % - http://mozart.github.io/
  % - http://en.wikipedia.org/wiki/Oz_(programming_language)
  % There is also a well known book that uses Oz for pedagogical reason :
  % - http://mitpress.mit.edu/books/concepts-techniques-and-models-computer-programming
  % And there are two courses on edX about 'Paradigms of Computer Programming' that also uses Oz for pedagogical reason :
  % - https://www.edx.org/node/2751#.VHijtfl5OSo
  % - https://www.edx.org/node/4436#.VHijzfl5OSo
  %
  % Here is an example of some code written with Oz.
  
  declare
  % Computes the sum of square of the N first integers.
  fun {Sum N}
    local SumAux in
      fun {SumAux N Acc}
        if N==0 then Acc
        else
          {Sum N-1 Acc}
        end
      end
      {SumAux N 0}
    end
  end
  
  % Returns true if N is a prime and false otherwize
  fun {Prime N}
    local PrimeAcc in
      fun {PrimeAcc N Acc}
  	    if(N == 1) then false
  	    elseif(Acc == 1) then true
  	    else
  	      if (N mod Acc) == 0 then false
  	      else
  	       {PrimeAcc N Acc-1}
  	      end
  	   end
      end
    {PrimeAcc N (N div 2)}
    end
  end
  
  % Reverse a list using cells and for loop (instead of recursivity)
  fun {Reverse L}
    local RevList in
      RevList = {NewCell nil}
      for E in L do
        RevList := E|@RevList
      end
      @RevList
    end
  end
  

githubLanguage Oz
 fileExtensions oz
 trendingProjectsCount 0
 type programming
 aceMode text
 codemirrorMode oz
 codemirrorMimeType text/x-oz
 tmScope source.oz
 repos 371

indeedJobs oz engineer
 2022 0

semanticScholar 22
 year|title|doi|citations|influentialCitations|authors|paperId
 1996|The Oz Programming Model|10.1007/BFb0015252|344|15|G. Smolka|a0ae020a14de2b76598b81f8c2556cc0a3f7cc22
 1997|Mobile objects in distributed Oz|10.1145/265943.265972|116|4|P. V. Roy and Seif Haridi and P. Brand and G. Smolka and Michael Mehl and R. Scheidhauer|39864a975b5e91de623665e080337f066e9c6f77
 1993|Object-Oriented Concurrent Constraint Programming in Oz|10.1007/978-3-642-78545-0_3|111|0|G. Smolka and M. Henz and J. Würtz|4b0b130602cca2044e027669c3e388b55cf50206
 1994|Encapsulated Search and Constraint Programming in Oz|10.1007/3-540-58601-6_96|68|0|Christian Schulte and G. Smolka and J. Würtz|0f7e0b3ab153c5fd5796321eb29eae65d49932b0
 1995|Using Oz for College Timetabling|10.1007/3-540-61794-9_58|65|1|M. Henz and J. Würtz|17ecb640560df069fcfb43a79f11f0d5863f278c
 1994|The Definition of Kernel Oz|10.1007/3-540-59155-9_14|57|2|G. Smolka|c67f30469ee981f91d7d65f0396de0534d34402f
 2002|Logic programming in the context of multiparadigm programming: the Oz experience|10.1017/S1471068403001741|55|2|P. V. Roy and P. Brand and D. Duchier and Seif Haridi and M. Henz and Christian Schulte|59de7c9bfad41d5a4b9372bbbdb20252235ca598
 1997|An overview of the design of Distributed Oz|10.1145/266670.266726|54|1|Seif Haridi and P. V. Roy and G. Smolka|628f81e7ea25a065a23d55dfa86aee641a18bb5e
 1999|Logic Programming in Oz with Mozart|10.7551/mitpress/4304.003.0010|22|1|P. V. Roy|d04967af2209e726a502d63365f4accbfe16a56e
 1996|Virtual reality programming in Oz|10.1007/978-3-7091-7488-3_4|22|2|Tomas Axling and Seif Haridi and L. Fahlén|e2a71cf789d9a7f33a36dce3d43d6009585a482b
 1997|Objects in Oz|10.22028/D291-25701|16|2|M. Henz|30077a00fcbcae9e8c88ca85b8f5489f1c82b1bd
 2004|Strasheela: Design and Usage of a Music Composition Environment Based on the Oz Programming Model|10.1007/978-3-540-31845-3_23|13|0|Torsten Anders and C. Anagnostopoulou and Michael Alcorn|3fb32d3ef26e56cd4091fb6702c459b2cd20f5ef
 1998|Lösen kombinatorischer Probleme mit Constraintprogrammierung in Oz|10.22028/D291-25755|10|0|Jörg Würtz|2ac5f93874908107a52398cc928417df4e221e3b
 1997|Constraint-Based Scheduling in Oz|10.1007/978-3-642-60744-8_40|8|0|J. Würtz|bfffc8e419b9c05b7999561dedd81f68f21a95a5
 1994|Constraint Programming in Oz|10.7551/mitpress/4283.003.0013|8|0|Tobias Müller and K. Popov and Christian Schulte and J. Würtz|9733a192994b32c1ca5af41f1f49368201e28977
 2004|The CURRENT Platform: Building Conversational Agents in Oz|10.1007/978-3-540-31845-3_14|7|0|T. Lager and Fredrik Kronlid|477e934569677d22b16a053575ce8d944df86b64
 2004|The Development of Oz and Mozart|10.1007/978-3-540-31845-3_1|6|0|G. Smolka|f85fc3cdf9a8e32a383312d666c6f59a51ceb0f0
 1995|The Oz Programming Model (Extended Abstract)|10.1007/BFb0020450|5|0|G. Smolka|20ee7067494999a4c05678b0305abbdbc808e283
 2004|A Program Verification System Based on Oz|10.1007/978-3-540-31845-3_4|3|0|Isabelle Dony and B. L. Charlier|9e17663abf4679c2fc0b7fa361fed7fe133cabd8
 2020|A history of the Oz multiparadigm language|10.1145/3386333|3|0|P. V. Roy and Seif Haridi and C. Schulte and G. Smolka|f7286d7f80225f0386ff7f5e1ceedaeaece12130
 1996|The Oz Programming Language and System (Abstract)|10.1007/BFb0027821|3|0|G. Smolka|c5d091b371a17b9dfa749dfde3afe2091329f85a
 2004|Compiling Formal Specifications to Oz Programs|10.1007/978-3-540-31845-3_6|2|0|Tim Wahls|7804cf5eb823a0acb992a37c7dc5f5f528bc2f30
