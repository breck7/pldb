Protocol Buffers
================

Protocol Buffers is an open source interface design language created in 2008.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222008%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 2008

#82 on PLDB
16 Years Old
24k Repos

Protocol Buffers is a method of serializing structured data. It is useful in developing programs to communicate with each other over a wire or for storing data. The method involves an interface description language that describes the structure of some data and a program that generates source code from that description for generating or parsing a stream of bytes that represents the structured data. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Protocol_Buffers Read more on Wikipedia...

- Tags: interface design language
- There are at least 23,747 Protocol Buffers repos on GitHub
- Early development of Protocol Buffers happened in Google
- The  Google BigQuery Public Dataset GitHub snapshot shows 10k users using Protocol Buffers in 12k repos on GitHub
- ANTLR grammar for Protocol Buffers
- Monaco package for syntax highlighting Protocol Buffers
- Pygments supports syntax highlighting for Protocol Buffers
- GitHub supports syntax highlighting for Protocol Buffers
- Indeed.com has 94 matches for "protocol buffers developer".
- See also: (12 related languages) XML, Thrift, Java, C#, Python, Go, Ruby, Objective-C, Perl, PHP, Scala, Julia
- 43 PLDB concepts link to Protocol Buffers: Ace Editor, Apache Hbase, avro, Bazel, Cap'n Proto, Carbon, Chapel, Claro, Closure Templates, crush, Cue, dgraph, egel, EverParse3D, firrtl, FlatBuffers, groff, HHVM, Impala, Ion, Iterm2, kaitai, ko, Kotlin, Kubernetes, Logica, m3db, MicroPython, MongoDB, obsidian, onnx, Please Build, PROMETHEUS, Pygments, PyTorch, Rholang, Solidity, tao3d, TensorFlow, Wyvern, Xgboost, XGBoost, YARA

message Person {
  required string name = 1;
  required int32 id = 2;
  optional string email = 3;
}

package tutorial;

option java_package = &quot;com.example.tutorial&quot;;
option java_outer_classname = &quot;AddressBookProtos&quot;;

message Person {
  required string name = 1;
  required int32 id = 2;
  optional string email = 3;

  enum PhoneType {
    MOBILE = 0;
    HOME = 1;
    WORK = 2;
  }

  message PhoneNumber {
    required string number = 1;
    optional PhoneType type = 2 [default = HOME];
  }

  repeated PhoneNumber phone = 4;
}

message AddressBook {
  repeated Person person = 1;
}

// polyline.cpp
#include &quot;polyline.pb.h&quot;  // generated by calling &quot;protoc polyline.proto&quot;

Line* createNewLine(const std::string&amp; name) {
  // create a line from (10, 20) to (30, 40)
  Line* line = new Line;
  line-&gt;mutable_start()-&gt;set_x(10);
  line-&gt;mutable_start()-&gt;set_y(20);
  line-&gt;mutable_end()-&gt;set_x(30);
  line-&gt;mutable_end()-&gt;set_y(40);
  line-&gt;set_label(name);
  return line;
}

Polyline* createNewPolyline() {
  // create a polyline with points at (10,10) and (20,20)
  Polyline* polyline = new Polyline;
  Point* point1 = polyline-&gt;add_point();
  point1-&gt;set_x(10);
  point1-&gt;set_y(10);
  Point* point2 = polyline-&gt;add_point();
  point2-&gt;set_x(20);
  point2-&gt;set_y(20);
  return polyline;
}

syntax import weak public package option repeated oneof map reserved to max enum message service rpc stream returns package optional true false

Language features
======================================================

row
 Feature Integers
 FeatureLink ../features/hasIntegers.html
 Supported ✓
 Example
  // \d+[LlUu]*
 Token 
row
 Feature Floats
 FeatureLink ../features/hasFloats.html
 Supported ✓
 Example
  // (\d+\.\d*|\.\d+|\d+)[eE][+-]?\d+[LlUu]*
 Token 
row
 Feature Hexadecimals
 FeatureLink ../features/hasHexadecimals.html
 Supported ✓
 Example
  // 0x[0-9a-fA-F]+[LlUu]*
 Token 
row
 Feature Octals
 FeatureLink ../features/hasOctals.html
 Supported ✓
 Example
  // 0[0-7]+[LlUu]*
 Token 
row
 Feature Access Modifiers
 FeatureLink ../features/hasAccessModifiers.html
 Supported ✓
 Example
 Token 
row
 Feature Booleans
 FeatureLink ../features/hasBooleans.html
 Supported ✓
 Example
 Token true false
row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Example
  /* A comment
  */
 Token /* */
row
 Feature Strings
 FeatureLink ../features/hasStrings.html
 Supported ✓
 Example
 Token 
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
  // A comment
 Token 
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Example
  // A comment
 Token //
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token
