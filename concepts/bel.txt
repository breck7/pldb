Bel
===

Bel is a programming language created in 2019 by Paul Graham.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222019%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D
 https://pldb.io/concepts/../lists/creators.html#q=Paul%20Graham

#1410 on PLDB
5 Years Old

- Bel website
 http://paulgraham.com/bel.html
- Bel docs
 https://sep.yimg.com/ty/cdn/paulgraham/bellanguage.txt?t=1595850613&
- 1 languages in PLDB linking to Bel: Arc

; Bel in Bel. 9 October 2019, 9:14 GMT
(def no (x)
  (id x nil))
(def atom (x)
  (no (id (type x) &#39;pair)))
(def all (f xs)
  (if (no xs)      t
      (f (car xs)) (all f (cdr xs))
                   nil))
(def some (f xs)
  (if (no xs)      nil
      (f (car xs)) xs
                   (some f (cdr xs))))
(def reduce (f xs)
  (if (no (cdr xs))
      (car xs)
      (f (car xs) (reduce f (cdr xs)))))
(def cons args
  (reduce join args))
(def append args
  (if (no (cdr args)) (car args)
      (no (car args)) (apply append (cdr args))
                      (cons (car (car args))
                            (apply append (cdr (car args))
                                          (cdr args)))))

Language features
======================================================

row
 Feature Macros
 FeatureLink ../features/hasMacros.html
 Supported ✓
 Token 
 Example
  ; A macro is essentially a function that generates code. I would have
  ; liked the first example of a macro to be something simpler, but fn
  ; is the one we need first. So I'll introduce macros using a simpler
  ; macro that isn't part of Bel, then explain fn.
  ; Here is a very simple macro:
  (mac nilwith (x)
    (list 'cons nil x))
row
 Feature Strings
 FeatureLink ../features/hasStrings.html
 Supported ✓
 Token 
 Example
  (\h \e \l \l \o)
  ; can also be represented as
  "hello"
row
 Feature Booleans
 FeatureLink ../features/hasBooleans.html
 Supported ✓
 Token 
 Example
  ; The symbol nil represents falsity as well as the empty list.
  ; The symbol t is the default representation for truth, but any object other than nil also counts as true.
row
 Feature Functions
 FeatureLink ../features/hasFunctions.html
 Supported ✓
 Token 
 Example
  (fn (x) (+ x 1))
row
 Feature Expressions
 FeatureLink ../features/hasExpressions.html
 Supported ✓
 Token 
 Example
  (+ 1 2)
row
 Feature Streams
 FeatureLink ../features/hasStreams.html
 Supported ✓
 Token 
 Example
row
 Feature Lists
 FeatureLink ../features/hasLists.html
 Supported ✓
 Token 
 Example
  ; here is a list of a, b, and c:
  (a . (b . (c . nil)))
  ; can be written as
  (a b c)
row
 Feature Characters
 FeatureLink ../features/hasCharacters.html
 Supported ✓
 Token 
 Example
  \p
  ; Characters that aren't letters may have longer names. For example the bell character, after which Bel is named, is
  \bel
row
 Feature hasSymbols
 FeatureLink ../features/hasSymbols.html
 Supported ✓
 Token 
 Example
  foo
row
 Feature Pairs
 FeatureLink ../features/hasPairs.html
 Supported ✓
 Token 
 Example
  (foo . bar)
row
 Feature Print() Debugging
 FeatureLink ../features/hasPrintDebugging.html
 Supported ✓
 Token prn
 Example
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Token 
 Example
  ; A comment
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Token ;
 Example
  ; A comment
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Token 
 Example
row
 Feature Case Insensitive Identifiers
 FeatureLink ../features/hasCaseInsensitiveIdentifiers.html
 Supported X
 Token 
 Example
