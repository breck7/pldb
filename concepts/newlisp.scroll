import ../code/conceptPage.scroll

id newlisp
name NewLisp
appeared 1991
creators Lutz Mueller
tags pl
website http://www.newlisp.org/
latestVersion 10.7.5

isOpenSource true
writtenIn lisp c html bourne-shell make yaml vim-script css markdown xml
tryItOnline http://www.newlisp.org/newlisp-js
fileType text
docs http://www.newlisp.org/index.cgi?Documentation
rosettaCode http://www.rosettacode.org/wiki/Category:NewLISP
centralPackageRepositoryCount 0
repoStats
 firstCommit 2008
 commits 139
 committers 6
 files 269
 newestCommit 2019
country United States
originCommunity http://kosh.sdf.org
projectEuler newLISP
 memberCount
  2022 1

pygmentsHighlighter NewLisp
 filename lisp.py
 fileExtensions lsp nl kif
twitter https://twitter.com/newlisp
leachim6 NewLISP
 filepath n/NewLISP.lsp
 fileExtensions lsp
 example
  #!/usr/bin/newlisp
  (print "Hello World\n")
  (exit)
  

githubRepo https://github.com/kosh04/newlisp
 firstCommit 2008
 stars 87
 forks 18
 subscribers 10
 created 2014
 updated 2022
 description newLISP mirror repository (unofficial)
 issues 8

printToken print

hasComments true
hasPrintDebugging true
hasSemanticIndentation false
hasLineComments true

wikipedia https://en.wikipedia.org/wiki/NewLISP
 related lisp common-lisp scheme pascal c tcl s-expressions xml utf-8 tcp udp linux solaris sqlite smtp ftp opengl
 summary newLISP is an open source scripting language in the Lisp family of programming languages developed by Lutz Mueller and released under the GNU General Public License.
 pageId 1964813
 created 2005
 backlinksCount 48
 revisionCount 242
 dailyPageViews 18
 appeared 1991

domainName newlisp.org
 registered 1999
 awisRank
  2022 5805944

githubBigQuery NewLisp
 repos 812
 users 774

linguistGrammarRepo https://github.com/textmate/lisp.tmbundle
 firstCommit 2005
 lastCommit 2018
 committerCount 6
 commitCount 40
 sampleCount 3
 example
  #!/usr/bin/env newlisp
  
  (constant 'NUM 8)
  
  (define (intersects? q1 q2)
  	(or
  		(= (q1 0) (q2 0))
  		(= (q1 1) (q2 1))
  		(= (abs (- (q1 0) (q2 0))) (abs (- (q1 1) (q2 1))))))
  
  (define (variant? alist)
  	(set 'logic nil)
  	(cond
  		((= (length alist) 1) true)
  		((> (length alist) 1)
  			(while (> (length alist) 1)
  				(set 'q (pop alist -1))
  				(dolist (el alist)
  					(push
  						(intersects?
  							(list q (inc (length alist)))
  							(list el (+ 1 $idx)))
  					logic -1)))
  			(not (apply or logic)))))
  
  (define (fork-by-line alist)
  	(let (res '())
  		(dolist (i (sequence 1 NUM))
  			(set 'tmp alist)
  			(push i tmp -1)
  			(setf res (push tmp res -1)))
  		res))
  
  (define (find-variants num)
  	(let (res '())
  		(cond
  			((< num 1)
  				(begin (println "num < 1") (exit)))
  			((= num 1)
  				(dolist (i (sequence 1 NUM)) (push (list i) res -1)))
  			((> num 1)
  				(dolist (v (find-variants (dec num)))
  					(set 'passed (filter variant? (fork-by-line v)))
  					(if (not (empty? passed)) (extend res passed)))))
  		res))
  		
  (set 'solutions (find-variants NUM))
  (println (length solutions))
  ;;(exit)

githubLanguage NewLisp
 fileExtensions nl lisp lsp
 trendingProjectsCount 0
 type programming
 interpreters newlisp
 aceMode lisp
 codemirrorMode commonlisp
 codemirrorMimeType text/x-common-lisp
 tmScope source.lisp
 repos 476

semanticScholar 0
