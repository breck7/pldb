GraphQL
=======

GraphQL is a query language created in 2012 by Lee Byron.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222012%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D
 https://pldb.io/concepts/../lists/creators.html#q=Lee%20Byron

#60 on PLDB
12 Years Old
1 Repos

GraphQL is a data query language developed internally by Facebook in 2012 before being publicly released in 2015. It provides an alternative to REST and ad-hoc webservice architectures.. It allows clients to define the structure of the data required, and exactly the same structure of the data is returned from the server. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/GraphQL

- GraphQL website
 http://graphql.org/
- GraphQL appears in categories: queryLanguage
- GraphQL Wikipedia page
 https://en.wikipedia.org/wiki/GraphQL
- GraphQL docs
 https://graphql.org/learn/
- There are at least 1 GraphQL repos on GitHub
- GraphQL first developed in Facebook
- GraphQL on Twitter
 https://twitter.com/graphql
- There are 17,480 members in the GraphQL subreddit
- ANTLR grammar for GraphQL
- GraphQL LSP implementation
- Monaco package for syntax highlighting GraphQL
- GitHub supports syntax highlighting for GraphQL
- Annual Reports for GraphQL
 https://graphql.org/foundation/annual-reports/
- Release Notes for GraphQL
 https://github.com/graphql/graphql-js/releases
- Official Blog page for GraphQL
 https://graphql.org/blog/
- Events page for GraphQL
 https://graphql.org/community/upcoming-events/
- Frequently Asked Questions for GraphQL
 https://graphql.org/faq/
- GraphQL leet sheet
 https://cheatsheets.zip/graphql
- graphql.org was registered in 2015
- See also: (3 related languages)JavaScript, Ruby, Scala
- 7 languages in PLDB linking to GraphQL: Ace Editor, cloc, dgraph, gintonic, Noms GraphQL, Pygments, wasmer

{
    &quot;Hello World&quot;
}

# Copyright (c) 2015, Facebook, Inc.
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree. An additional grant
# of patent rights can be found in the PATENTS file in the same directory.

schema {
  query: QueryType
  mutation: MutationType
}

type Foo implements Bar {
  one: Type
  two(argument: InputType!): Type
  three(argument: InputType, other: String): Int
  four(argument: String = &quot;string&quot;): String
  five(argument: [String] = [&quot;string&quot;, &quot;string&quot;]): String
  six(argument: InputType = {key: &quot;value&quot;}): Type
}

interface Bar {
  one: Type
  four(argument: String = &quot;string&quot;): String
}

union Feed = Story | Article | Advert

scalar CustomScalar

enum Site {
  DESKTOP
  MOBILE
}

input InputType {
  key: String!
  answer: Int = 42
}

extend type Foo {
  seven(argument: [String]): Type
}

directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @include(if: Boolean!)
  on FIELD
   | FRAGMENT_SPREAD
   | INLINE_FRAGMENT

null true false query mutation subscription extend schema directive scalar type interface union enum input implements fragment on

Language features
======================================================

row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
  # A comment
 Token 
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Example
  # A comment
 Token #
row
 Feature hasIds
 FeatureLink ../features/hasIds.html
 Supported ✓
 Example
  # The ID scalar type represents a unique identifier, often used to refetch an object or as the key for a cache. The ID type is serialized in the same way as a String; however, defining it as an ID signifies that it is not intended to be human‐readable.
  query {
    hero {
      name
    }
    droid(id: "2000") {
      name
    }
  }
 Token 
row
 Feature Lists
 FeatureLink ../features/hasLists.html
 Supported ✓
 Example
 Token 
row
 Feature Union Types
 FeatureLink ../features/hasUnionTypes.html
 Supported ✓
 Example
  union SearchResult = Human | Droid | Starship
 Token 
row
 Feature Strings
 FeatureLink ../features/hasStrings.html
 Supported ✓
 Example
 Token "
row
 Feature Integers
 FeatureLink ../features/hasIntegers.html
 Supported ✓
 Example
 Token 
row
 Feature Interfaces
 FeatureLink ../features/hasInterfaces.html
 Supported ✓
 Example
  interface Character {
   id: ID!
   name: String!
   friends: [Character]
   appearsIn: [Episode]!
  }
  type Human implements Character {
    id: ID!
    name: String!
    friends: [Character]
    appearsIn: [Episode]!
    starships: [Starship]
    totalCredits: Int
  }
  type Droid implements Character {
    id: ID!
    name: String!
    friends: [Character]
    appearsIn: [Episode]!
    primaryFunction: String
  }
 Token 
row
 Feature Floats
 FeatureLink ../features/hasFloats.html
 Supported ✓
 Example
 Token 
row
 Feature Enums
 FeatureLink ../features/hasEnums.html
 Supported ✓
 Example
  enum Episode {
    NEWHOPE
    EMPIRE
    JEDI
  }
 Token 
row
 Feature Booleans
 FeatureLink ../features/hasBooleans.html
 Supported ✓
 Example
 Token true false
row
 Feature Case Insensitive Identifiers
 FeatureLink ../features/hasCaseInsensitiveIdentifiers.html
 Supported X
 Example
 Token 
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token
