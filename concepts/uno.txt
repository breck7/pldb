Uno
===

Uno is an open source programming language created in 2002.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222002%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D

#769 on PLDB
22 Years Old
232 Repos

git clone https://github.com/fuse-open/uno

Try now: TIO

Extremely fast, native C#-dialect and powerful tooling for mobile and desktop developers

- Uno website
 https://fuseopen.com
- Uno is developed on GitHub and has 75 stars
- There are at least 232 Uno repos on GitHub
- Uno is written in C#, XML, Java, C++, Bourne shell, Objective C++, Markdown, JSON, JavaScript, Python, Gradle, CMake, XAML, Bash, YAML, Make, Swift, TypeScript
- The  Google BigQuery Public Dataset GitHub snapshot shows 24 users using Uno in 37 repos on GitHub
- GitHub supports syntax highlighting for Uno
- fuseopen.com was registered in 2017
- Read more about Uno on the web: 1.
 https://fuseopen.com/docs/uno/uno-lang.html

using Uno;
using Uno.Collections;
using Uno.Graphics;
using Uno.Scenes;
using Uno.Designer;
using Uno.Content;
using Uno.Content.Models;
using Uno.UI;

namespace PONG2D
{
	public class PlayerPads : Node
	{

		Image _player1Image;
		Image _player2Image;

		[Inline]
		public Image Player1
		{
			get { return _player1Image; }
			set
			{
				if (_player1Image != value)
				{
					_player1Image = value;
					
				}
			}
		}

		[Inline]
		public Image Player2
		{
			get { return _player2Image; }
			set
			{
				if (_player2Image != value)
				{
					_player2Image = value;
					
				}
			}
		}

		[Hide]
		public float2 Player1Pos
		{
			get { return (Player1.ActualPosition); }
			set
			{
				if (Player1 != null)
					Player1.Position = value;
				
			}
		}

		[Hide]
		public float2 Player2Pos
		{
			get { return (Player2.ActualPosition); }
			set
			{
				if (Player2 != null)
					Player2.Position = value;
				
			}
		}
		
		public Rect Player1Rect
		{
			get { return new Rect(Player1Pos, float2(Player1.Width, Player2.Height)); }
			set
			{
				Player1Pos = value.Position;
				if (Player1 != null)
				{
					Player1.Width = value.Size.X;
					Player1.Height = value.Size.Y;
				}
			}
		}
		
		public Rect Player2Rect
		{
			get { return new Rect(Player2Pos, float2(Player2.Width, Player2.Height)); }
			set
			{
				Player2Pos = value.Position;
				if (Player2 != null)
				{
					Player2.Width = value.Size.X;
					Player2.Height = value.Size.Y;
				}
			}
		}

		public Ball Ball
		{
			get;
			set;
		}
		
		public float PadVelocity { get; set; }

		public PlayerPads()
		{

		}

		void UpdatePositions()
		{
			
		}

		protected override void OnUpdate()
		{
			base.OnUpdate();

			if (Input.IsKeyDown(Uno.Platform.Key.W))
			{
				Player1Pos = float2(0, Player1Pos.Y - PadVelocity);
			}

			if (Input.IsKeyDown(Uno.Platform.Key.S))
			{
				Player1Pos = float2(0, Player1Pos.Y + PadVelocity);
			}

			if (Input.IsKeyDown(Uno.Platform.Key.Up))
			{
				Player2Pos = float2(0, Player2Pos.Y - PadVelocity);
			}

			if (Input.IsKeyDown(Uno.Platform.Key.Down))
			{
				Player2Pos = float2(0, Player2Pos.Y + PadVelocity);
			}
			
			if (Ball != null)
			{
				
				if (Ball.BallRectangle.Intersects(Player1Rect) ||
					Ball.BallRectangle.Intersects(Player2Rect))
				{
					
					Ball.BallVelocity = float2(Ball.BallVelocity.X * -1f, Ball.BallVelocity.Y);
				}
			}
			
		}

	}
}
