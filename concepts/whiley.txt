Whiley
======

Whiley is a programming language created in 2009 by David J. Pearce.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222009%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 2009
 https://pldb.io/concepts/../lists/creators.html#q=David%20J.%20Pearce David J. Pearce

#539 on PLDB
15 Years Old
2 Repos

git clone https://github.com/Whiley/WhileyCompiler

Whiley is an experimental programming language that combines features from the functional and imperative paradigms, and supports formal specification through function preconditions, postconditions and loop invariants. The language uses flow-sensitive typing also known as "flow typing." The Whiley project began in 2009 in response to the "Verifying Compiler Grand Challenge" put forward by Tony Hoare in 2003. The first public release of Whiley was in June, 2010.Primarily developed by David Pearce, Whiley is an open source project with contributions from a small community. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Whiley_(programming_language) Read more on Wikipedia...

- Tags: programming language
- Whiley is developed on GitHub and has 216 stars
- There are at least 2 Whiley repos on GitHub
- Whiley is written in Java, Markdown, YAML
- The  Google BigQuery Public Dataset GitHub snapshot shows 1 users using Whiley in 1 repos on GitHub
- Pygments supports syntax highlighting for Whiley
- whiley.org was registered in 2009

// Define the type of natural numbers
type nat is (int x) where x &gt;= 0
public function indexOf(int[] items, int item) -&gt; (int|null index)
// If int returned, element at this position matches item
ensures index is int ==&gt; items[index] == item
// If int returned, element at this position is first match
ensures index is int ==&gt; no { i in 0 .. index | items[i] == item }
// If null returned, no element in items matches item
ensures index is null ==&gt; no { i in 0 .. |items| | items[i] == item }:
    //
    nat i = 0
    //
    while i &lt; |items|
    // No element seen so far matches item
    where no { j in 0 .. i | items[j] == item }:
        //
        if items[i] == item:
            return i
        i = i + 1
    //
    return null

import std::ascii
import std::io

method main(ascii::string[] args):
    io::println(&quot;Hello World&quot;)

Language features
======================================================

row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Example
 Token 
row
 Feature Binary Literals
 FeatureLink ../features/hasBinaryNumbers.html
 Supported ✓
 Example
  // [01]+b
 Token 
row
 Feature Integers
 FeatureLink ../features/hasIntegers.html
 Supported ✓
 Example
  // [0-9]+
 Token 
row
 Feature Floats
 FeatureLink ../features/hasFloats.html
 Supported ✓
 Example
  // [0-9]+\.[0-9]+
 Token 
row
 Feature Hexadecimals
 FeatureLink ../features/hasHexadecimals.html
 Supported ✓
 Example
  // 0x[0-9a-fA-F]+
 Token 
row
 Feature Strings
 FeatureLink ../features/hasStrings.html
 Supported ✓
 Example
  "Hello world"
 Token "
row
 Feature Print() Debugging
 FeatureLink ../features/hasPrintDebugging.html
 Supported ✓
 Example
 Token io::println
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
  // A comment
 Token 
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Example
  // A comment
 Token //
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token

View source
