../code/conceptPage.scroll

id yul
name Yul
appeared 2016
tags pl
oldName Joyfully Universal Language for (Inline) Assembly
 // https://docs.soliditylang.org/en/v0.8.17/yul.html
description JULIA is an intermediate language that can compile to various different backends (EVM 1.0, EVM 1.5 and eWASM are planned). Because of that, it is designed to be a usable common denominator of all three platforms. It can already be used for “inline assembly” inside Solidity and future versions of the Solidity compiler will even use JULIA as intermediate language. It should also be easy to build high-level optimizer stages for JULIA.

country United States
originCommunity https://github.com/ethereum
reference https://solidity.readthedocs.io/en/v0.4.21/julia.html

example
 {
     function power(base:u256, exponent:u256) -> result:u256
     {
         switch exponent
         case 0:u256 { result := 1:u256 }
         case 1:u256 { result := base }
         default:
         {
             result := power(mul(base, base), div(exponent, 2:u256))
             switch mod(exponent, 2:u256)
                 case 1:u256 { result := mul(base, result) }
         }
     }
 }
