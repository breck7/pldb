import ../code/conceptPage.scroll

id icon
name Icon
appeared 1977
creators Ralph Griswold
tags pl
website http://www.cs.arizona.edu/icon

tryItOnline icon
fileType text
wordRank 2368
docs https://www2.cs.arizona.edu/icon/
rosettaCode http://www.rosettacode.org/wiki/Category:Icon
quineRelay Icon
ubuntuPackage icont
country United States
originCommunity The University of Arizona

helloWorldCollection Icon
 # Hello world in Icon (http://www.cs.arizona.edu/icon/)
 
 procedure main()
     write("Hello world")
 end
 
pygmentsHighlighter Icon
 filename unicon.py
 fileExtensions icon ICON
rijuRepl https://riju.codes/icon
 example
  procedure main ()
      write("Hello, world!")
  end
  
leachim6 Icon
 filepath i/Icon.icn
 fileExtensions icn
 example
  procedure main()
      write("Hello World");
  end

lineCommentToken #
printToken write
stringToken "

hasLineComments true
 # A comment
hasComments true
 # A comment
hasPrintDebugging true
hasSemanticIndentation false
hasStrings true
 "Hello world"
hasHexadecimals true
 # \b([+-]?([2-9]|[12][0-9]|3[0-6])[rR][0-9a-zA-Z]+)\b
hasFloats true
 # [+-]?[0-9]*\.([0-9]*)([Ee][+-]?[0-9]*)?
hasIntegers true
 # \b([+-]?[0-9]+[KMGTPkmgtp]?)\b

wikipedia https://en.wikipedia.org/wiki/Icon_(programming_language)
 example
  procedure main()
       s := "Mon Dec 8"
       s ? write(Mdate() | "not a valid date")
   end
   # Define a matching function that returns
   # a string that matches a day month dayofmonth
   procedure Mdate()
   # Define some initial values
   static dates
   static days
   initial {
          days := ["Mon","Tue","Wed","Thr","Fri","Sat","Sun"]
          dates := ["Jan","Feb","Mar","Apr","May","Jun",
                    "Jul","Aug","Sep","Oct","Nov","Dec"]
   }
   every suspend   (retval <-  tab(match(!days)) ||     # Match a day
                               =" " ||                  # Followed by a blank
                               tab(match(!dates)) ||    # Followed by the month
                               =" " ||                  # Followed by a blank
                               matchdigits(2)           # Followed by at least 2 digits
                   ) &
                   (=" " | pos(0) ) &                   # Either a blank or the end of the string
                   retval                               # And finally return the string
   end
   # Matching function that returns a string of n digits
   procedure matchdigits(n)
       suspend (v := tab(many(&digits)) & *v <= n) & v
   end
 related snobol algol python unicon c pascal java smalltalk clu
 summary Icon is a very high-level programming language featuring goal-directed execution and many facilities for managing strings and textual patterns. It is related to SNOBOL and SL5, string processing languages. Icon is not object-oriented, but an object-oriented extension called Idol was developed in 1996 which eventually became Unicon.
 pageId 14801
 dailyPageViews 50
 created 2001
 backlinksCount 82
 revisionCount 184
 appeared 1977

hopl https://hopl.info/showlanguage.prx?exp=510
tiobe Icon

isbndb 3
 year|publisher|title|authors|isbn13
 1994|Wiley|The Icon Book: Visual Symbols for Computer Systems and Documentation|Horton, William|9780471599005
 1998|Peer To Peer Communications|Graphics Programming In Icon|Ralph E. Griswold and Gregg M. Townsend and Clinton L. Jeffery|9781573980098
 1983|Prentice-hall|The Icon Programming Language (prentice-hall Software Series)|Ralph E Griswold|9780134497778

semanticScholar 19
 year|title|doi|citations|influentialCitations|authors|paperId
 1981|Generators in Icon|10.1145/357133.357136|52|2|R. Griswold and D. R. Hanson and John T. Korb|58e38b184055909109cc30da6ce3f1a002eae242
 1980|A portable storage management system for the icon programming language|10.1002/spe.4380100607|27|3|D. R. Hanson|832ce1c8ffed3006738fe3df7ee22e017e3f09c9
 1979|The icon programming language: an overview|10.1145/988078.988082|21|1|R. Griswold and D. R. Hanson and John T. Korb|208d59a0d3972f13928d9faccdaa349e4994765a
 1983|Measuring the Performance and Behavior of Icon Programs|10.1109/TSE.1983.236299|20|0|Cary A. Coutant and R. Griswold and D. R. Hanson|44524266fe1762db18c784521cd02dc8937b812b
 1982|The Evaluation of Expressions in Icon|10.1145/69622.357184|15|1|R. Griswold|e407c3e678d961acc9762efc61b3169dbd4998f4
 1994|A framework for execution monitoring in icon|10.1002/spe.4380241104|13|2|C. Jeffery and R. Griswold|219ecaedc38688bb39af5bdc2ea87ee5c9c5ee9c
 1983|The implementation of generators and goal‐directed evaluation in icon|10.1002/spe.4380130605|11|0|S. Wampler and R. Griswold|8911415a3dc4dc4255c19aba2597eaabf3a1de10
 1990|String Scanning in the Icon Programming Language|10.1093/comjnl/33.2.98|11|0|R. Griswold|a160b5ee89bd7424acf5fe64b6487284484e2f1e
 1992|An optimizing compiler for the icon programming language|10.1002/spe.4380220803|11|1|Kenneth Walker and R. Griswold|ac4ad25831b1d1d26a4498610f070a7481f97bd3
 1993|History of the Icon programming language|10.1145/155360.155363|10|0|R. Griswold and Madge T. Griswold|b373998ddc18275d1204d3bc8506592c27441512
 1987|A recursive interpreter for the Icon programming language|10.1145/29650.29665|10|0|Janalee O'Bagy and R. Griswold|8cae0300ac4db01589d408e586210ef83b150ac5
 1993|The design and implementation of dynamic hashing for sets and tables in icon|10.1002/spe.4380230402|9|1|W. Griswold and Gregg M. Townsend|737ddd66e85e40fed99fb00ef0819dd08b617778
 2000|A new implementation of the Icon language|10.1002/(SICI)1097-024X(20000710)30:8%3C925::AID-SPE321%3E3.0.CO;2-V|9|1|T. Proebsting and Gregg M. Townsend|6d475fd00ff3a9ac0e4435261ed3de8df13067a7
 1983|Co-Expressions in Icon|10.1093/comjnl/26.1.72|6|0|S. Wampler and R. Griswold|9ed1304db28f6a53dbad488b8c40b6d878e00295
 1986|Logicon: An integration of prolog into icon|10.1002/spe.4380161005|6|1|G. Lapalme and S. Chapleau|9f925f796da32e45b2b92b568ed90d08c29aa9fd
 1984|Expression evaluation in the icon programming language|10.1145/800055.802034|5|0|R. Griswold|0f3d8f0d864c9faeefdd02beeadbfa759b969c17
 1988|Modeling software tools with ICON|10.1109/ICSE.1988.93701|4|0|O. Fonorow|877572d7c81d2113483a706f902edf318bf41c4a
 1979|The Icon programming language a new approach to high-level string processing|10.1145/800177.810019|2|0|R. Griswold|61791f3b783ed9743b793a191e09dd34e32c3cae
 1992|Garbage collection alternatives for icon|10.1002/spe.4380220804|1|1|M. Fernández and D. R. Hanson|08a9c225357dc043c45c147293488b402724e4c5
