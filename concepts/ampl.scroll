../code/conceptPage.scroll

id ampl
name AMPL
appeared 1985
creators Robert Fourer and David Gay and Brian Kernighan
tags pl
website https://ampl.com/
standsFor A Mathematical Programming Language
lab AMPL Optimization LLC

isOpenSource false
fileType text
docs https://ampl.com/learn/docs/
eventsPageUrl https://ampl.com/about/upcoming-events/
faq https://ampl.com/learn/docs/faqs/
rosettaCode http://www.rosettacode.org/wiki/Category:AMPL
country United States

pygmentsHighlighter Ampl
 filename ampl.py
 fileExtensions run
example
 set PROD;  # products
 
 param rate {PROD} > 0;     # tons produced per hour
 param avail >= 0;          # hours available in week
 
 param profit {PROD};       # profit per ton
 param market {PROD} >= 0;  # limit on tons sold in week
 
 var Make {p in PROD} >= 0, <= market[p]; # tons produced
 
 maximize Total_Profit: sum {p in PROD} profit[p] * Make[p];
 
                # Objective: total profits from all products
 
 subject to Time: sum {p in PROD} (1/rate[p]) * Make[p] <= avail;
 
                # Constraint: total of hours used by all
                # products may not exceed hours available
twitter https://twitter.com/amplopt

lineCommentToken #
assignmentToken :=

hasLineComments true
 # A comment
hasComments true
 # A comment
hasSemanticIndentation false
hasAssignment true
hasFloats true
 # (\d+\.(?!\.)\d*|\.(?!.)\d+)([eE][+-]?\d+)?
hasIntegers true
 # \d+([eE][+-]?\d+)?
hasMultiLineComments true

wikipedia https://en.wikipedia.org/wiki/AMPL
 example
  set Plants;
   set Markets;
  
   # Capacity of plant p in cases
   param Capacity{p in Plants};
  
   # Demand at market m in cases
   param Demand{m in Markets};
  
   # Distance in thousands of miles
   param Distance{Plants, Markets};
  
   # Freight in dollars per case per thousand miles
   param Freight;
  
   # Transport cost in thousands of dollars per case
   param TransportCost{p in Plants, m in Markets} :=
       Freight * Distance[p, m] / 1000;
  
   # Shipment quantities in cases
   var shipment{Plants, Markets} >= 0;
  
   # Total transportation costs in thousands of dollars
   minimize cost:
       sum{p in Plants, m in Markets} TransportCost[p, m] * shipment[p, m];
  
   # Observe supply limit at plant p
   s.t. supply{p in Plants}: sum{m in Markets} shipment[p, m] <= Capacity[p];
  
   # Satisfy demand at market m
   s.t. demand{m in Markets}: sum{p in Plants} shipment[p, m] >= Demand[m];
  
   data;
  
   set Plants := seattle san-diego;
   set Markets := new-york chicago topeka;
  
   param Capacity :=
       seattle   350
       san-diego 600;
  
   param Demand :=
       new-york 325
       chicago  300
       topeka   275;
  
   param Distance : new-york chicago topeka :=
       seattle        2.5      1.7     1.8
       san-diego      2.5      1.8     1.4;
  
   param Freight := 90;
 related linux unix awk c algebraic-modeling-language nl xml excel-app
 summary A Mathematical Programming Language (AMPL) is an algebraic modeling language to describe and solve high-complexity problems for large-scale mathematical computing (i.e., large-scale optimization and scheduling-type problems). It was developed by Robert Fourer, David Gay, and Brian Kernighan at Bell Laboratories. AMPL supports dozens of solvers, both open source and commercial software, including CBC, CPLEX, FortMP, Gurobi, MINOS, IPOPT, SNOPT, KNITRO, and LGO. Problems are passed to solvers as nl files. AMPL is used by more than 100 corporate clients, and by government agencies and academic institutions. One advantage of AMPL is the similarity of its syntax to the mathematical notation of optimization problems. This allows for a very concise and readable definition of problems in the domain of optimization. Many modern solvers available on the NEOS Server (formerly hosted at the Argonne National Laboratory, currently hosted at the University of Wisconsin, Madison) accept AMPL input. According to the NEOS statistics AMPL is the most popular format for representing mathematical programming problems.
 pageId 1076270
 dailyPageViews 109
 created 2004
 backlinksCount 133
 revisionCount 237
 appeared 1985
 fileExtensions mod dat run

hopl https://hopl.info/showlanguage.prx?exp=7232

domainName ampl.com
 registered 1995
 awisRank
  2022 971333

githubBigQuery AMPL
 repos 852
 users 806

linguistGrammarRepo https://github.com/ampl/sublime-ampl
 firstCommit 2013
 lastCommit 2013
 committerCount 2
 commitCount 12
 sampleCount 2
 example
  # A toy knapsack problem from the LocalSolver docs written in AMPL.
  
  set I;
  param Value{I};
  param Weight{I};
  param KnapsackBound;
  var Take{I} binary;
  
  maximize TotalValue: sum{i in I} Take[i] * Value[i];
  s.t. WeightLimit: sum{i in I} Take[i] * Weight[i] <= KnapsackBound;
  
  data;
  
  param:
  I: Weight Value :=
  0    10     1
  1    60    10
  2    30    15
  3    40    40
  4    30    60
  5    20    90
  6    20   100
  7     2    15;
  
  param KnapsackBound := 102;
  

isbndb 2
 year|publisher|title|authors|isbn13
 1997|Cengage Learning|AMPL: A Modeling Language for Mathematical Programming (with AMPL Plus Student Edition for Microsoft Windows) (The Scientific Press Series)|Fourer, Robert and Gay, David M. and Kernighan, Brian W.|9780894262326
 1997-01-13T00:00:01Z|Cengage Learning|AMPL: A Modeling Language for Mathematical Programming (with AMPL Plus Student Edition for Microsoft Windows) (The Scientific Press Series)|Fourer, Robert and Gay, David M. and Kernighan, Brian W.|9780534509835

githubLanguage AMPL
 fileExtensions ampl mod
 trendingProjectsCount 0
 type programming
 aceMode text
 tmScope source.ampl
 repos 5570

indeedJobs ampl developer
 2022 3

semanticScholar 2
 year|title|doi|citations|influentialCitations|authors|paperId
 1996|DIY DEA: Implementing data envelopment analysis in the mathematical programming language AMPL|10.1016/0305-0483(96)00003-5|8|0|R. Green|2a84d88be4d3283124da624af001a3f0c4c01885
 1984|Loslan implementation of the AMPL message-passing system|10.1145/948596.948600|2|0|J. Milewski|7c0626677098596348ea9d02ad5f569a7aa2e19d

goodreads
 title|year|author|goodreadsId|rating|ratings|reviews
 Ampl: A Modeling Language for Mathematical Programming|1993|Robert Fourer|2176571|4.00|17|0
 AMPL: A modeling language for mathematical programming : with AMPL Plus student edition for Microsoft Windows|1997|Robert Fourer|3846900|0.0|0|0
 Ampl: A Modeling Language for Mathematical Programming: With Ampl Plus Student Edition for Microsoft Windows|1997|Robert Fourer|20874764|0.0|0|0
 Ampl: A Modeling Language for Math Programming Package (with User Guide)|1999|Robert Fourer|20874765|2.00|1|0
 Ampl: A Molding Language for Mathematical Programming/Book & IBM 5 1/4 Disk|1991|Robert Fourer|2247991|0.0|0|0
 Mathematical Optimization Software: Mathematica, General Algebraic Modeling System, Propt, Ioso, Mps, Ampl, Apmonitor, Tomsym, Worhp, Dido|2011|Source Wikipedia|15185414|0.0|0|0
