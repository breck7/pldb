../code/conceptPage.scroll

id sather
name Sather
appeared 1990
creators Steve Omohundro
tags pl
website https://www.gnu.org/software/sather/
lab University of California Berkeley && University of Waikato && GNU project

visualParadigm false
fileType text
rosettaCode http://www.rosettacode.org/wiki/Category:Sather
country United States and New Zealand

helloWorldCollection Sather
 -- Hello World in Sather
 
     class HELLO is
        main is #OUT + "Hello World!\n" end
     end
 
leachim6 Sather
 filepath s/Sather.sa
 fileExtensions sa
 example
  class MAIN is
     main is
        loop
           #OUT + "Hello World\n"
        end
     end
  end
  

lineCommentToken --
printToken #OUT

hasComments true
hasLineComments true
 -- A comment
hasPrintDebugging true
hasSemanticIndentation false

wikipedia https://en.wikipedia.org/wiki/Sather
 example
  upto!(once m:INT):SAME is
      i: INT := self; -- initialise i to the value of self,
                      -- that is the integer of which this method is called
      loop
        if i>m then
          quit;  -- leave the loop when i goes beyond m
        end;
        yield i; -- else use i as return value and stay in the loop
        i := i + 1; -- and increment
      end;
    end;
 related eiffel clu common-lisp scheme cool rust c
 summary Sather is an object-oriented programming language. It originated circa 1990 at the International Computer Science Institute (ICSI) at the University of California Berkeley, developed by an international team led by Steve Omohundro. It supports garbage collection and generics by subtypes. Originally, it was based on Eiffel, but it has diverged, and now includes several functional programming features. It is probably best to view it as an object-oriented language, with many ideas borrowed from Eiffel. Even the name is inspired by Eiffel; the Sather Tower is a recognizable landmark at Berkeley, named after Jane Krom Sather, the widow of Peder Sather, who donated large sums to the foundation of the university. Sather also takes inspiration from other programming languages and paradigms: iterators, design by contract, abstract classes, multiple inheritance, anonymous functions, operator overloading, contravariant type system. The original Berkeley implementation (last stable version 1.1 was released in 1995, no longer maintained) has been adopted by the Free Software Foundation therefore becoming GNU Sather. Last stable GNU version (1.2.3) was released in July 2007 and the software is currently not maintained. There were several other variants: Sather-K from the University of Karlsruhe; Sather-W from the University of Waikato (implementation of Sather version 1.3); Peter Naulls' port of ICSI Sather 1.1 to RISC OS; and pSather, a parallel version of ICSI Sather addressing non-uniform memory access multiprocessor architectures but presenting a shared memory model to the programmer. The former ICSI Sather compiler (now GNU Sather) is implemented as a compiler to C, i.e., the compiler does not output object or machine code, but takes Sather source code and generates C source code as an intermediate language. Optimizing is left to the C compiler. The GNU Sather compiler, written in Sather itself, is dual licensed under the GNU GPL & LGPL.
 pageId 28763
 dailyPageViews 21
 created 2001
 backlinksCount 31
 revisionCount 96
 appeared 1990

hopl https://hopl.info/showlanguage.prx?exp=1659
tiobe Sather

isbndb 1
 year|publisher|title|authors|isbn13
 2010||Class-based Programming Languages: Java, C++, Python, Eiffel, Smalltalk, Ruby, Simula, Common Lisp, Oberon, Clu, Objective-c, Squeak, Sather|Books and LLC|9781156829424

semanticScholar 3
 year|title|doi|citations|influentialCitations|authors|paperId
 1994|Engineering a Programming Language: The Type and Class System of Sather|10.1007/3-540-57840-4_33|89|5|C. Szyperski and S. Omohundro and S. Murer|47859a3e075dddf97b090c2316b67bc591783c14
 1992|Sather Provides Nonproprietary Access to Object‐Oriented Programming|10.1063/1.4823098|9|0|S. Omohundro|d09b97715cb4b8a58cb8a16973406210394dd422
 1997|Efficient Extensible Synchronization in Sather|10.1007/3-540-63827-X_45|7|0|Jürgen Quittek and B. Weissman|a081fa7ad5c7a3bccb2baf18077bffd1fa36bbfe
