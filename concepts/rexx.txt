Rexx
====

Rexx is a programming language created in 1979 by Mike Cowlishaw.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%221979%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 1979
 https://pldb.io/concepts/../lists/creators.html#q=Mike%20Cowlishaw Mike Cowlishaw

#276 on PLDB
45 Years Old
263 Repos

Rexx (Restructured Extended Executor) is an interpreted programming language developed at IBM by Mike Cowlishaw. It is a structured, high-level programming language designed for ease of learning and reading. Proprietary and open source REXX interpreters exist for a wide range of computing platforms; compilers exist for IBM mainframe computers. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/REXX Read more on Wikipedia...

- Tags: programming language
- Interview with the creator of Rexx: 1.
 https://pldb.io/blog/mikecowlishaw-interview.html 1.
- There are at least 263 Rexx repos on GitHub
- Early development of Rexx happened in IBM
- The  Google BigQuery Public Dataset GitHub snapshot shows 69 users using Rexx in 71 repos on GitHub
- There are 11 Project Euler users using Rexx
- Explore Rexx snippets on Rosetta Code
- Rexx on HOPL
 https://hopl.info/showlanguage.prx?exp=868 Rexx on HOPL
- Rexx appears in the TIOBE Index
- Rexx Ubuntu package
 https://packages.ubuntu.com/jammy/regina-rexx Rexx Ubuntu package
- Pygments supports syntax highlighting for Rexx
- GitHub supports syntax highlighting for Rexx
- Rexx appears in the Quine Relay project
- Indeed.com has 40 matches for "rexx engineer".
- See also: (17 related languages) ARexx, NetRexx, Object Rexx, PL/I, Algol, EXEC, EXEC 2, Perl, Assembly language, Tcl, Python, Java, Linux, Unix, Solaris, Visual Basic, JScript
- 5 PLDB concepts link to Rexx: JAL compiler, mal, Pawn, PAWN, Pygments

say &quot;Hello, world!&quot;

&lt;&lt;hello.rexx&gt;&gt;=
Say &quot;Hello World&quot;

/* rexx */
PARSE ARG filnamn
IF filnamn=&#39;&#39; THEN DO
   filnamn=&#39;raw&#39;
   filnamn=&#39;font.shapes&#39;
   end
IF ~open(fil,filnamn,r) THEN EXIT 10
pixwidth=48
ebwidth=pixwidth/8
pixheight=48
depth=4
SAY &quot;Skriver utfil...&quot;
CALL open utfil,&quot;RAM:utfil&quot;,W
CALL skriv pixwidth,2
CALL skriv pixheight,2
CALL skriv depth,2
CALL skriv ebwidth,2
bltsize=Right(C2B(D2C(pixheight)),10,&quot;00&quot;)
bltsize=bltsize || Right(C2B(D2C(ebwidth)),6,&quot;00&quot;)
/* SAY bltsize */
CALL skriv C2D(B2C(bltsize)),2
CALL skriv 0,4 /* xhandle, yhandle*/
CALL skriv 0,4 /* datapekare */
CALL skriv 0,4 /* cookiepekare */
CALL skriv ebwidth*pixheight,2 /* onebpmem */
CALL skriv ebwidth*pixheight+pixheight*2,2 /* onebpmemx */
CALL skriv ebwidth*pixheight*depth,2 /* allbpmem */
CALL skriv ebwidth*pixheight*depth+pixheight*2*depth,2 /* allbpmemx */
CALL skriv 0,2 /* padding */
CALL Close utfil
EXIT

skriv:
say &quot;Skriver TEMPLATEquot;D2X(arg(1)) &quot;(&quot;arg(2) &quot;byte)&quot;
call writech utfil,right(D2C(ARG(1)),ARG(2),&quot;00&quot;x)
return

visacookie:
   rad=copies(&#39;00&#39;x,pixheight*ebwidth)
   say &quot;Initierar bitmap till&quot; pixheight*ebwidth*depth
   say &quot;Ett bitplan =&quot; pixheight*ebwidth
   bmap.=&#39;&#39;
   say &quot;laser in&quot;
   do bitplan=1 to depth
      say &quot;laser plan&quot; bitplan
      rad=bitor(rad,readch(fil,pixheight*ebwidth))
      end
   ln=1
   say &quot;skriver ut&quot;
   do for pixheight
      say c2b(substr(rad,ln,bredd/8))
      ln=ln+bredd/8
      end
return

ChangeCodePage: procedure /* protect SIGNAL settings */
 signal on syntax name ChangeCodePage.Trap
 return SysQueryProcessCodePage()
 ChangeCodePage.Trap: return 1004 /* windows-1252 on OS/2 */

Language features
======================================================

row
 Feature Strings
 FeatureLink ../features/hasStrings.html
 Supported ✓
 Example
  "Hello world"
 Token "
row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Example
  /* A comment
  */
 Token /* */
row
 Feature Print() Debugging
 FeatureLink ../features/hasPrintDebugging.html
 Supported ✓
 Example
 Token say
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
  * => 1000000000 */
 Token 
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token 
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported X
 Example
 Token
