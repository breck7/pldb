Plain English
=============

Plain English is a programming language created in 2018 by Gerry Rzeppa and Dan Rzeppa.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222018%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D
 https://pldb.io/concepts/../lists/creators.html#q=Gerry%20Rzeppa
 https://pldb.io/concepts/../lists/creators.html#q=Dan%20Rzeppa

#2310 on PLDB
6 Years Old

- Plain English website
 http://osmosian.com/
- Plain English appears in categories: programming language
- Plain English first developed in https://github.com/Folds/english/issues
- osmosian.com was registered in 2005
- Read more about Plain English on the web: 1. 2.
 https://www.reddit.com/r/ProgrammingLanguages/comments/h0fpmi/this_plain_english_programming_language_makes_me/
 https://wiki.osdev.org/Plain_English_Programming

The background is a picture.

A button has a box and a name.

To clear the status:
  Clear the status&#39; string.
  Show everything.
 
To create the background:
  Draw the screen&#39;s box with the white color.
  Loop.
  Pick a spot anywhere in the screen&#39;s box.
  Pick a color between the lightest gray color and the white color.
  Dab the color on the spot.
  If a counter is past 80000, break.
  If the counter is evenly divisible by 1000, refresh the screen.
  Repeat.
  Extract the background given the screen&#39;s box. \or Create the background from the screen. Or something.
 
To create a work given a URL:
  Allocate memory for the work.
  Put the URL into the work&#39;s URL.
 
To create some works given a buffer:
  Destroy the works.
  Put nil into the current work.
  Slap a rider on the buffer.
  Loop.
  Move the rider (Googley image rules).
  If the rider&#39;s token is blank, exit.
  Create a work given the rider&#39;s token.
  Append the work to the works.
  Repeat.
 
The current work is a work.
 
To dab a color on a spot:
  Pick an ellipse&#39;s left-top within 1/16 inch of the spot.
  Pick the ellipse&#39;s right-bottom within 1/16 inch of the spot.
  Draw the ellipse with the color.
 
To decide if a spot is in a button:
  If the spot is in the button&#39;s box, say yes.
  Say no.
 
To decide if a work is finished:
  If the work is nil, say yes.
  If the work&#39;s painting is not nil, say yes.
  Say no.
 
To draw a button:
  Draw the button&#39;s name in the button&#39;s box.
 
To draw the status:
  Draw the status&#39; string in the center of the status&#39; box.
 
To draw a string in a box in the center: \ needed in sausage
  draw the string in the box with &quot;center&quot;.
 
To draw the text:
  Put the text&#39;s string then &quot;_&quot; into a string.
  Draw the string in the text&#39;s box.
 
To draw a work:
  If the work is nil, exit.
  If the work is not finished, exit.
  Draw the work&#39;s painting.
 
To finalize our stuff:
  Destroy the background.
  Destroy the works.
 
To finish a work:
  If the work is nil, exit.
  If the work is finished, exit.
  Create a picture given the work&#39;s URL.
  If the picture is nil, exit.
  Resize the picture to 5-1/2 inches by 5-1/2 inches.
  Center the picture in the screen&#39;s box.
  Draw the background.
  Draw the picture.
  Loop.
  Pick a spot anywhere near the picture&#39;s box.
  Mix a color given the spot.
  Dab the color on the spot.
  If a counter is past 20000, break.
  Repeat.
  Extract the work&#39;s painting given the picture&#39;s box.
  Destroy the picture.
 
To go to a work:
  If the work is nil, exit.
  Show &quot;Working...&quot; in the status.
  Put the work into the current work.
  Finish the current work.
  Clear the status.
  Show everything.
 
To handle any events:
  Deque an event.
  If the event is nil, exit.
  Handle the event.
  Repeat.
 
To handle an event:
  If the event&#39;s kind is &quot;set cursor&quot;, handle the event (set cursor); exit.
  If the event&#39;s kind is &quot;refresh&quot;, handle the event (refresh); exit.
  If the event&#39;s kind is &quot;left click&quot;, handle the event (left click); exit.
  If the event&#39;s kind is &quot;key down&quot;, handle the event (key down); exit.
 
To handle an event (backspace):
  If the text&#39;s string is blank, cluck; exit.
  Remove the last byte from the text&#39;s string.
  Show everything.
 
To handle an event (end):
  If the current work is nil, cluck; exit.
  If the current work is the works&#39; last, cluck; exit.
  Go to the works&#39; last.
 
To handle an event (enter):
  If the text&#39;s string is blank, cluck; exit.
  Show &quot;Working...&quot; in the status.
  Put &quot;http://images.google.com/images?q=&quot; into a URL.
\  Put &quot;http://images.google.com/images?safe=active&amp;q=&quot; into a URL.
  Convert the text&#39;s string to a query string.
  Append the query string to the URL.
  Read the URL into a buffer.
  If the i/o error is not blank, show the i/o error in the status; exit.
  Create the works given the buffer.
  If the works are empty, show &quot;Huh?&quot; in the status; exit.
  Go to the works&#39; first.
 
To handle an event (escape):
  Clear the text&#39;s string.
  Show everything.
 
To handle an event (home):
  If the current work is nil, cluck; exit.
  If the current work is the works&#39; first, cluck; exit.
  Go to the works&#39; first.
 
To handle an event (key down):
  Clear the status.
  If the event is modified, handle the event (shortcut); exit.
  If the event&#39;s byte is printable, handle the event (printable); exit.
  Put the event&#39;s key into a key.
  If the key is the escape key, handle the event (escape); exit.
  If the key is the backspace key, handle the event (backspace); exit.
  If the key is the enter key, handle the event (enter); exit.
  If the key is the home key, handle the event (home); exit.
  If the key is the end key, handle the event (end); exit.
  If the key is the page-up key, handle the event (page-up); exit.
  If the key is the page-down key, handle the event (page-down); exit.
 
To handle an event (left click):
  Clear the status.
  If the event&#39;s spot is in the print button, print.
  If the event&#39;s spot is in the quit button, quit.
 
To handle an event (page-down):
  If the current work is nil, cluck; exit.
  If the current work&#39;s next is nil, cluck; exit.
  Go to the current work&#39;s next.
 
To handle an event (page-up):
  If the current work is nil, cluck; exit.
  If the current work&#39;s previous is nil, cluck; exit.
  Go to the current work&#39;s previous.
 
To handle an event (printable):
  Append the event&#39;s byte to the text&#39;s string.
  Show everything.
 
To handle an event (refresh):
  Show everything.
 
To handle an event (set cursor):
  Show the arrow cursor.
 
To handle an event (shortcut):
  If the event&#39;s key is the q-key, quit; exit.
  If the event&#39;s key is the p-key, print; exit.
 
To initialize the buttons:
  Put the screen&#39;s bottom minus 1/2 inch into a spot&#39;s y.
  Put the screen&#39;s right minus 1/2 inch into the spot&#39;s x.
  Make the quit button given the spot and &quot;Quit&quot;.
  Put the quit button&#39;s left minus 1/2 inch into the spot&#39;s x.
  Make the print button given the spot and &quot;Print&quot;.
 
To initialize our stuff:
  Create the background.
  Initialize the status.
  Initialize the buttons.
  Initialize the text.
  Show &quot;Hello, World!&quot; in the status.
 
To initialize the status:
  Put the screen&#39;s center into a spot.
  Put the spot&#39;s x minus 1 inch into the status&#39; left.
  Put the spot&#39;s x plus 1 inch into the status&#39; right.
  Put the screen&#39;s bottom minus 3/4 inch into the status&#39; top.
  Put the screen&#39;s bottom minus 1/2 inch into the status&#39; bottom.
 
To initialize the text:
  Put the screen&#39;s left plus 1/2 inch into the text&#39;s left.
  Put the text&#39;s left plus 2 inches into the text&#39;s right.
  Put the screen&#39;s bottom minus 3/4 inch into the text&#39;s top.
  Put the screen&#39;s bottom minus 1/2 inch into the text&#39;s bottom.
 
To make a button given a spot and a name:
  Put the spot&#39;s x minus the name&#39;s width into the button&#39;s left.
  Put the spot&#39;s y minus 1/4 inch into the button&#39;s top.
  Put the spot into the button&#39;s right-bottom.
  Put the name into the button&#39;s name.
 
To mix a color given a spot:
  Get the color given the spot.
  If the color is not very very light, exit.
  Pick the color between the lightest gray color and the white color.
 
To move a rider (Googley image rules):
  Clear the rider&#39;s token.
  Loop.
  If the rider&#39;s source is blank, exit.
  If the rider&#39;s source starts with &quot;src=&quot;&quot;http://t&quot;, break.
  Add 1 to the rider&#39;s source&#39;s first.
  Repeat.
  Add &quot;src=&quot;&quot;&quot;&#39;s length to the rider&#39;s source&#39;s first.
  Position the rider&#39;s token on the rider&#39;s source.
  Move the rider (HTML attribute rules).
 
To move a rider (HTML attribute rules):
  If the rider&#39;s source is blank, exit.
  If the rider&#39;s source&#39;s first&#39;s target is the right-alligator byte, exit.
  If the rider&#39;s source&#39;s first&#39;s target is the double-quote byte, exit.
  Bump the rider.
  Repeat.
 
A painting is a picture.
 
To pick a spot anywhere near a box:
  Privatize the box.
  Outdent the box given 1/8 inch.
  Pick the spot anywhere in the box.
 
To print:
  If the current work is nil, cluck; exit.
  Show &quot;Printing...&quot; in the status.
  Begin printing.
  Begin a sheet.
  Center the current work&#39;s painting in the sheet.
  Draw the current work&#39;s painting.
  Center the current work&#39;s painting in the screen&#39;s box.
  End the sheet.
  End printing.
  Show &quot;Printed&quot; in the status.
 
The print button is a button.
 
To quit:
  Relinquish control.
 
The quit button is a button.
 
To run:
  Start up.
  Initialize our stuff.
  Handle any events.
  Finalize our stuff.
  Shut down.
 
To show everything:
  Hide the cursor.
  Draw the background.
  Draw the status.
  Draw the print button.
  Draw the quit button.
  Draw the text.
  Draw the current work.
  Refresh the screen.
 
To show a string in the status:
  Put the string into the status&#39; string.
  Show everything.
 
The status has a box and a string.
 
The text has a box and a string.
 
A work is a thing with a URL and a painting.
 
The works are some works.
