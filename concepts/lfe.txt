LFE
===

LFE, aka Lisp Flavored Erlang, is an open source programming language created in 2008 by Robert Virding.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222008%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D
 https://pldb.io/concepts/../lists/creators.html#q=Robert%20Virding

#458 on PLDB
16 Years Old
51 Repos

Lisp Flavored Erlang (LFE) is a functional, concurrent, general-purpose programming language and Lisp dialect built on top of Core Erlang and the Erlang Virtual Machine (BEAM). LFE builds on top of Erlang in order to provide a Lisp syntax for writing distributed, fault-tolerant, soft real-time, non-stop applications. LFE also extends Erlang to support meta-programming with Lisp macros and an improved developer experience with a feature-rich REPL. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/LFE_(programming_language)

- LFE Wikipedia page
 https://en.wikipedia.org/wiki/LFE_(programming_language)
- LFE docs
 http://docs.lfe.io/current/index.html
- There are at least 51 LFE repos on GitHub
- LFE first developed in https://github.com/lfe
- The  Google BigQuery Public Dataset GitHub snapshot shows 14 users using LFE in 15 repos on GitHub
- Explore LFE snippets on Rosetta Code
- GitHub supports syntax highlighting for LFE
- Release Notes for LFE
 http://docs.lfe.io/v0.7/classic-docs/release-notes.html
- Official Blog page for LFE
 https://blog.lfe.io/
- Indeed.com has 0 matches for "lfe developer".
- See also: (6 related languages)Erlang, Common Lisp, Scheme, Elixir, Hy, Lisp
- Read more about LFE on the web: 1.
 https://lfe.io/
- 1 languages in PLDB linking to LFE: cloc

;; Copyright (c) 2013 Duncan McGreggor &lt;oubiwann@cogitat.io&gt;
;;
;; Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.

;; File    : church.lfe
;; Author  : Duncan McGreggor
;; Purpose : Demonstrating church numerals from the lambda calculus

;; The code below was used to create the section of the user guide here:
;;    http://lfe.github.io/user-guide/recursion/5.html
;;
;; Here is some example usage:
;;
;; &gt; (slurp &#39;&quot;church.lfe&quot;)
;; #(ok church)
;; &gt; (zero)
;; #Fun&lt;lfe_eval.10.53503600&gt;
;; &gt; (church-&gt;int1 (zero))
;; 0
;; &gt; (church-&gt;int1 (three))
;; 3
;; &gt; (church-&gt;int1 (five))
;; 5
;; &gt; (church-&gt;int2 #&#39;five/0)
;; 5
;; &gt; (church-&gt;int2 (lambda () (get-church 25)))
;; 25

(defmodule church
  (export all))

(defun zero ()
  (lambda (s)
    (lambda (x) x)))

(defun one ()
  (lambda (s)
    (lambda (x)
      (funcall s x))))

(defun two ()
  (lambda (s)
    (lambda (x)
      (funcall s
        (funcall s x)))))

(defun three ()
  (lambda (s)
    (lambda (x)
      (funcall s
        (funcall s
          (funcall s x))))))

(defun four ()
  (lambda (s)
    (lambda (x)
      (funcall s
        (funcall s
          (funcall s
            (funcall s x)))))))

(defun five ()
  (get-church 5))

(defun int-successor (n)
  (+ n 1))

(defun church-&gt;int1 (church-numeral)
  &quot;
  Converts a called church numeral to an integer, e.g.:
  &gt; (church-&gt;int1 (five))
  &quot;
  (funcall
    (funcall church-numeral #&#39;int-successor/1) 0))

(defun church-&gt;int2 (church-numeral)
  &quot;
  Converts a non-called church numeral to an integer, e.g.:
  &gt; (church-&gt;int2 #&#39;five/0)
  &quot;
  (funcall
    (funcall
      (funcall church-numeral) #&#39;int-successor/1) 0))

(defun church-successor (church-numeral)
  (lambda (s)
    (lambda (x)
      (funcall s
        (funcall
          (funcall church-numeral s) x)))))

(defun get-church (church-numeral count limit)
  (cond ((== count limit) church-numeral)
        ((/= count limit)
         (get-church
           (church-successor church-numeral)
           (+ 1 count)
           limit))))

(defun get-church (integer)
  (get-church (zero) 0 integer))

(defun parse-args (flag)
  &quot;Given one or more command-line arguments, extract the passed values.

  For example, if the following was passed via the command line:

    $ erl -my-flag my-value-1 -my-flag my-value-2

  One could then extract it in an LFE program by calling this function:

    (let ((args (parse-args &#39;my-flag)))
      ...
      )
  In this example, the value assigned to the arg variable would be a list
  containing the values my-value-1 and my-value-2.&quot;
  (let ((`#(ok ,data) (init:get_argument flag)))
    (lists:merge data)))

(defun get-pages ()
  &quot;With no argument, assume &#39;url parameter was passed via command line.&quot;
  (let ((urls (parse-args &#39;url)))
    (get-pages urls)))

(defun get-pages (urls)
  &quot;Start inets and make (potentially many) HTTP requests.&quot;
  (inets:start)
  (plists:map
    (lambda (x)
      (get-page x)) urls))

(defun get-page (url)
  &quot;Make a single HTTP request.&quot;
  (let* ((method &#39;get)
         (headers &#39;())
         (request-data `#(,url ,headers))
         (http-options ())
         (request-options &#39;(#(sync false))))
    (httpc:request method request-data http-options request-options)
    (receive
      (`#(http #(,request-id #(error ,reason)))
       (io:format &quot;Error: ~p~n&quot; `(,reason)))
      (`#(http #(,request-id ,result))
       (io:format &quot;Result: ~p~n&quot; `(,result))))))

Language features
======================================================

row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Token 
 Example
  ; A comment
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Token ;
 Example
  ; A comment
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Token 
 Example
