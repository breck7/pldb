gazetteCss

FaCT
====

FaCT is an open source programming language created in 2017 by Deian Stefan.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222017%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 2017
 https://pldb.io/concepts/../lists/creators.html#q=Deian%20Stefan Deian Stefan

#909 on PLDB
7 Years Old

git clone https://github.com/PLSysSec/FaCT

FaCT is a domain-specific language that aids you in writing constant-time code for cryptographic routines that need to be free from timing side channels. This is the compiler for the Flexible and Constant Time cryptographic programming language. Real-world cryptographic code is often written in a subset of C intended to execute in constant-time, thereby avoiding timing side channel vulnerabilities. This C subset eschews structured programming as we know it: if-statements, looping constructs, and procedural abstractions can leak timing information when handling sensitive data. The resulting obfuscation has led to subtle bugs, even in widely-used high-profile libraries like OpenSSL. To address the challenge of writing constant-time cryptographic code, we present FaCT, a crypto DSL that provides high-level but safe language constructs. The FaCT compiler uses a secrecy type system to automatically transform potentially timing-sensitive high-level code into low-level, constant-time LLVM bitcode. We develop the language and type system, formalize the constant-time transformation, and present an empirical evaluation that uses FaCT to implement core crypto routines from several open-source projects including OpenSSL, libsodium, and curve25519-donna. Our evaluation shows that FaCT's design makes it possible to write \emph{readable}, high-level cryptographic code, with \emph{efficient}, \emph{constant-time} behavior.

- Tags: programming language
- FaCT is developed on GitHub and has 191 stars
- Early development of FaCT happened in University of California San Diego and Stanford University and PI for Security and Privacy and Inria and IMDEA Software Institute
- FaCT is written in OCaml, C, Bourne shell, Markdown, Make, Dockerfile
- Read more about FaCT on the web: 1.
 https://ranjitjhala.github.io/static/fact_dsl.pdf 1.

void
swap_conditional(secret mut uint64[5] a, secret mut uint64[5] b, secret uint64 swapi) {
  if (swapi == 1) {
    for (uint32 i from 0 to 5) {
      secret uint64 x = a[i];
      a[i] = b[i];
      b[i] = x;
    }
  }
}

View source
