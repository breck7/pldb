Ion
===

Ion is an interface design language created in 2016.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222016%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 2016

#1611 on PLDB
8 Years Old

Amazon Ion is a richly-typed, self-describing, hierarchical data serialization format offering interchangeable binary and text representations. The text format (a superset of JSON) is easy to read and author, supporting rapid prototyping. The binary representation is efficient to store, transmit, and skip-scan parse.

- Tags: interface design language
- Ion is a superset of JSON
- Early development of Ion happened in Amazon.com, Inc
- See also: (1 related languages) Protocol Buffers
- Read more about Ion on the web: 1.
 https://amzn.github.io/ion-docs/ 1.
- 1 PLDB concepts link to Ion: Ion Schema Language

/* Ion supports comments. */
// Here is a struct, which is similar to a JSON object
{
  // Field names don&#39;t always have to be quoted
  name: &quot;Fido&quot;,

  // This is an integer with a &#39;years&#39; annotation
  age: years::4,

  // This is a timestamp with day precision
  birthday: 2012-03-01T,

  // Here is a list, which is like a JSON array
  toys: [
    // These are symbol values, which are like strings,
    // but get encoded as integers in binary
    ball,
    rope,
  ],

  // This is a decimal -- a base-10 floating point value
  weight: pounds::41.2,

  // Here is a blob -- binary data, which is
  // base64-encoded in Ion text encoding
  buzz: {{VG8gaW5maW5pdHkuLi4gYW5kIGJleW9uZCE=}},
}

Language features
======================================================

row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Example
  /* A comment
  */
 Token /* */
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Example
  // A comment
 Token //
row
 Feature S-Expressions
 FeatureLink ../features/hasSExpressions.html
 Supported ✓
 Example
  null.sexp         // A null S-expression value
  ()                // An empty expression value
  (cons 1 2)        // S-expression of three values
  ([hello][there])  // S-expression containing two lists
  
  (a+-b)  ( 'a' '+-' 'b' )    // Equivalent; three symbols
  (a.b;)  ( 'a' '.' 'b' ';')  // Equivalent; four symbols
 Token 
row
 Feature Lists
 FeatureLink ../features/hasLists.html
 Supported ✓
 Example
  null.list         // A null list value
  []                // An empty list value
  [1, 2, 3]         // List of three ints
  [ 1 , two ]       // List of an int and a symbol
  [a , [b]]         // Nested list
  [ 1.2, ]          // Trailing comma is legal in Ion (unlike JSON)
  [ 1, , 2 ]        // ERROR: missing element between commas
 Token 
row
 Feature Type Annotations
 FeatureLink ../features/hasTypeAnnotations.html
 Supported ✓
 Example
  int32::12                                // Suggests 32 bits as end-user type
  'my.custom.type' :: { x : 12 , y : -1 }  // Gives a struct a user-defined type
  
  { field: something::'another thing'::value }  // Field's name must precede annotations of its value
  
  jpeg :: {{ ... }}                        // Indicates the blob contains jpeg data
  bool :: null.int                         // A very misleading annotation on the integer null
  '' :: 1                                  // An empty annotation
  null.symbol :: 1                         // ERROR: type annotation cannot be null
 Token 
row
 Feature hasSymbols
 FeatureLink ../features/hasSymbols.html
 Supported ✓
 Example
  myvar2       // A different symbol
  'hi ho'      // Symbol requiring quotes
 Token 
row
 Feature Decimals
 FeatureLink ../features/hasDecimals.html
 Supported ✓
 Example
  null.decimal      // A null decimal value
  0.123             // Type is decimal
  -0.12d4           // Type is decimal
  123_456.789_012   // Decimal with underscores
  -0d-1             // Decimal maintains precision: -0. != -0.0
  -0d0              // Negative zero decimal (distinct from positive zero)
 Token 
row
 Feature hasTimestamps
 FeatureLink ../features/hasTimestamps.html
 Supported ✓
 Example
  // Timestamps represent a specific moment in time, always include a local offset, and are capable of arbitrary precision.
  2007-02-23T12:14Z                // Seconds are optional, but local offset is not
  2007-01-01T00:00-00:00           // Happy New Year in UTC, unknown local offset
 Token 
row
 Feature Clobs
 FeatureLink ../features/hasClobs.html
 Supported ✓
 Example
  // The clob type is similar to blob in that it holds uninterpreted binary data. The difference is that the content is expected to be text, so we use a text notation that’s more readable than Base64.
  // An Ion clob type is similar to the blob type except that the denotation in the Ion text format uses an ASCII-based string notation rather than a base64 encoding to denote its binary value. It is important to make the distinction that clob is a sequence of raw octets and string is a sequence of Unicode code points.
  // The string may only contain legal 7-bit ASCII character
 Token 
row
 Feature hasBlobs
 FeatureLink ../features/hasBlobs.html
 Supported ✓
 Example
  // In the text format, blob values are denoted as RFC 4648-compliant Base64 text within two pairs of curly braces.
  // A valid blob value with one required padding character.
  {{ VG8gaW5maW5pdHkuLi4gYW5kIGJleW9uZCE= }}
 Token 
row
 Feature Strings
 FeatureLink ../features/hasStrings.html
 Supported ✓
 Example
  "hello world"
 Token 
row
 Feature Null
 FeatureLink ../features/hasNull.html
 Supported ✓
 Example
  null
 Token 
row
 Feature Multiline Strings
 FeatureLink ../features/hasMultilineStrings.html
 Supported ✓
 Example
  ( '''hello '''     // Sexp with one element
    '''world!'''  )
  
  ("hello world!")   // The exact same sexp value
  
  // This Ion value is a string containing three newlines. The serialized
  // form's first newline is escaped into nothingness.
  '''\
  The first line of the string.
  This is the second line of the string,
  and this is the third line.
  '''
 Token 
row
 Feature Integers
 FeatureLink ../features/hasIntegers.html
 Supported ✓
 Example
  // http://amzn.github.io/ion-docs/docs/spec.html
  null.int   // A null int value
  0          // Zero.  Surprise!
  -0         //   ...the same value with a minus sign
  123        // A normal int
  -123       // Another negative int
  0xBeef     // An int denoted in hexadecimal
  0b0101     // An int denoted in binary
  1_2_3      // An int with underscores
  0xFA_CE    // An int denoted in hexadecimal with underscores
  0b10_10_10 // An int denoted in binary with underscores
 Token 
row
 Feature Assignment
 FeatureLink ../features/hasAssignment.html
 Supported ✓
 Example
  // A subset of symbols called identifiers can be denoted in text without single-quotes.
 Token 
row
 Feature Floats
 FeatureLink ../features/hasFloats.html
 Supported ✓
 Example
  // http://amzn.github.io/ion-docs/docs/spec.html
  -0.12e4           // Type is float
 Token 
row
 Feature Structs
 FeatureLink ../features/hasStructs.html
 Supported ✓
 Example
  { first : "Tom" , last: "Riddle" }  // Structure with two fields
  {"first":"Tom","last":"Riddle"}     // The same value with confusing style
  {center:{x:1.0, y:12.5}, radius:3}  // Nested struct
 Token 
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
 Token 
row
 Feature Booleans
 FeatureLink ../features/hasBooleans.html
 Supported ✓
 Example
  null.bool
  true
  false
 Token 
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token
