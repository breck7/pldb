import ../code/conceptPage.scroll

id wasm
name WebAssembly
appeared 2015
creators Alon Zakai
tags bytecode
website http://webassembly.org/
spec https://webassembly.org/specs/
latestVersion 1.0.35
fileExtensions wasm
writtenIn cpp html c javascript python wasm markdown yaml bourne-shell make cmake css lua

isOpenSource true
tryItOnline https://tio.run/#wasm
clocExtensions wast wat
faq https://webassembly.org/docs/faq/
fileType text
docs https://developer.mozilla.org/en-US/docs/WebAssembly
repoStats
 firstCommit 2015
 commits 2580
 committers 149
 files 1736
 newestCommit 2024
originCommunity W3C
proposals https://github.com/WebAssembly/proposals

discord https://discord.gg/jwCC7jS
subreddit https://www.reddit.com/r/WebAssembly/
 memberCount
  2024 12000
pygmentsHighlighter WebAssembly
 filename webassembly.py
 fileExtensions wat wast
example
 20 00
 50
 04 7E
 42 01
 05
 20 00
 20 00
 42 01
 7D
 10 00
 7E
 0B
leachim6 WebAssembly
 filepath w/WebAssembly.wat
 fileExtensions wat
 example
  (module
      (import "wasi_unstable" "fd_write"
          (func $fd_write (param i32 i32 i32 i32) (result i32))
      )
  
      (memory 1)
      (export "memory" (memory 0))
  
      (data (i32.const 0) "\08\00\00\00\0c\00\00\00Hello World\n")
  
      (func $main (export "_start")
          i32.const 1
          i32.const 0
          i32.const 1
          i32.const 20
          call $fd_write
          drop
      )
  )
  

githubRepo https://github.com/WebAssembly/wabt
 stars 6621
 forks 676
 subscribers 157
 created 2015
 updated 2024
 firstCommit 2015
 description The WebAssembly Binary Toolkit
 issues 149

hasHexadecimals true
hasFloats true
hasIntegers true
hasLineComments true
hasMultiLineComments true
hasComments true

wikipedia https://en.wikipedia.org/wiki/WebAssembly
 example
  (module
    (import "math" "exp" (func $exp (param f64) (result f64)))
    (func (export "doubleExp") (param $0 f64) (result f64)
      (f64.mul
        (call $exp
          (get_local $0))
        (f64.const 2))))
 related asmjs assembly-language javascript unity-engine llvmir c rust java csharp go s-expressions doi
 summary WebAssembly (Wasm, WA) is a web standard that defines a binary format and a corresponding assembly-like text format for executable code in Web pages. It is meant to enable executing code nearly as fast as running native machine code. It was envisioned to complement JavaScript to speed up performance-critical parts of web applications and later on to enable web development in languages other than JavaScript. WebAssembly does not attempt to replace JavaScript, but to complement it. It is developed at the World Wide Web Consortium (W3C) with engineers from Mozilla, Microsoft, Google and Apple.It is executed in a sandbox in the web browser after a verification step. Programs can be compiled from high-level languages into Wasm modules and loaded as libraries from within JavaScript applets.
 pageId 47013794
 dailyPageViews 392
 created 2015
 backlinksCount 269
 revisionCount 215
 appeared 2017
 fileExtensions wat wasm

domainName webassembly.org
 registered 2015
 awisRank
  2022 166939
  2017 182953

githubBigQuery WebAssembly
 repos 160
 users 148

linguistGrammarRepo https://github.com/Alhadis/language-webassembly
 firstCommit 2017
 lastCommit 2017
 committerCount 1
 commitCount 32
 sampleCount 6
 example
  (module
    (import "env" "printInt" (func $printInt (param i32)))
    (func $add (param $lhs i32) (param $rhs i32) (result i32)
      get_local $lhs
      get_local $rhs
      i32.add
    )
  
    (func $main
      (call $printInt
        (call $add (i32.const 9) (i32.const 8))))
  
    (export "main" (func $main))
  )
  

isbndb 13
 year|publisher|title|authors|isbn13
 2019|Pragmatic Bookshelf|Programming WebAssembly with Rust: Unified Development for Web, Mobile, and Embedded Applications|Hoffman, Kevin|9781680506365
 2019|Packt Publishing|Hands-On Game Development with WebAssembly: Learn WebAssembly C++ programming by building a retro space game|Battagline, Rick|9781838646837
 2020|Packt Publishing|Hands-On JavaScript High Performance: Build faster web apps using Node.js, Svelte.js, and WebAssembly|Scherer, Justin|9781838825867
 2019|Manning|WebAssembly in Action: With examples using C++ and Emscripten|Gallant, Gerard|9781638355304
 2019-05-31T00:00:01Z|Packt Publishing|Hands-On Game Development with WebAssembly: Learn WebAssembly C++ programming by building a retro space game|Battagline, Rick|9781838644659
 2021|Apress|WebAssembly for Cloud: A Basic Guide for Wasm-Based Cloud Apps|Jain, Shashank Mohan|9781484274958
 2022|Packt Publishing - ebooks Account|Practical WebAssembly-Explore the fundamentals of WebAssembly programming using Rust|Sendil Kumar Nellaiyapen|9781838828004
 20211113|Springer Nature|WebAssembly for Cloud|Shashank Mohan Jain|9781484274965
 20220502|Packt Publishing|Practical WebAssembly|Sendil Kumar Nellaiyapen|9781838827465
 20210601|Random House Publishing Services|The Art of WebAssembly|Rick Battagline|9781718501454
 44386|Packt Publishing|Blazor WebAssembly by Example|Toi B. Wright; Scott Hanselman|9781800563933
 29-04-2022|Packt Publishing|Game Development with Rust and WebAssembly|Eric Smith|9781801074995
 14-05-2021|Packt Publishing|Creative DIY Microcontroller Projects with TinyGo and WebAssembly|Tobias Theel|9781800563599

githubLanguage WebAssembly
 fileExtensions wast wat
 trendingProjects
  author name avatar url language languageColor stars forks currentPeriodStars description
  AssemblyScript assemblyscript https://github.com/AssemblyScript.png https://github.com/AssemblyScript/assemblyscript WebAssembly #04133b 6742 263 287 "Definitely not a TypeScript to WebAssembly compiler üöÄ"
 trendingProjectsCount 2
 type programming
 aceMode lisp
 codemirrorMode commonlisp
 codemirrorMimeType text/x-common-lisp
 tmScope source.webassembly
 aliases wast or wasm
 repos 1641

indeedJobs webassembly engineer
 2017 5

semanticScholar 25
 year|title|doi|citations|influentialCitations|authors|paperId
 2017|Bringing the web up to speed with WebAssembly|10.1145/3062341.3062363|307|64|Andreas Haas and Andreas Rossberg and Derek L. Schuff and Ben L. Titzer and Michael Holman and D. Gohman and Luke Wagner and Alon Zakai and J. Bastien|f9420023ec1ee6d7d61d8f61f3c7df33b59afe61
 2018|Mechanising and verifying the WebAssembly specification|10.1145/3167082|45|2|C. Watt|8dafcb807d8d2b1f613043069af51ba63ef5d474
 2018|Wasabi: A Framework for Dynamically Analyzing WebAssembly|10.1145/3297858.3304068|27|1|Daniel Lehmann and Michael Pradel|4c2d6e7037ba8c4118eb1d2fe25de910871314c9
 2019|Weakening WebAssembly|10.1145/3360559|18|3|C. Watt and Andreas Rossberg and Jean Pichon-Pharabod|6fb0698434403b0caa9a32133ad0f90efb36d9cd
 2021|An Empirical Study of Real-World WebAssembly Binaries: Security, Languages, Use Cases|10.1145/3442381.3450138|17|3|Aaron Hilbig and Daniel Lehmann and Michael Pradel|53859511943c1cc1da713b436cea1f502ce64c10
 2019|Formally Verified Cryptographic Web Applications in WebAssembly|10.1109/SP.2019.00064|17|2|Jonathan Protzenko and Benjamin Beurdouche and Denis Merigoux and K. Bhargavan|f39df8f217036d1fd3e5e44385291f02258a5a7f
 2019|WARDuino: a dynamic WebAssembly virtual machine for programming microcontrollers|10.1145/3357390.3361029|16|2|Robbert Gurdeep Singh and Christophe Scholliers|668338ad3648e7540c1718ba94a409cceefc9d3d
 2017|Accelerate JavaScript applications by cross-compiling to WebAssembly|10.1145/3141871.3141873|15|1|M. Reiser and Luc Bl√§ser|373cea7cdd706641f4795fb3ff777fb23ace30c8
 2018|Virtual Machine Execution for Wearables Based on WebAssembly|10.1007/978-3-030-29897-5_33|11|1|M. Jacobsson and Jonas Will√©n|c32344f4f80d5d545abeaedb544933a12d0230fe
 2018|FAUST Domain Specific Audio DSP Language Compiled to WebAssembly|10.1145/3184558.3185970|8|0|S. Letz and Y. Orlarey and D. Fober|010c899740f3cc29d6dc26ab4065fdc6b9875956
 2020|Compositional Information Flow Analysis for WebAssembly Programs|10.1109/SCAM51674.2020.00007|7|0|Quentin Sti√©venart and Coen De Roover|854c5480cbb67ae0558d81ce1a25a6778a1b84df
 2018|Bringing the web up to speed with WebAssembly|10.1145/3282510|7|0|Andreas Rossberg and Ben L. Titzer and Andreas Haas and Derek L. Schuff and D. Gohman and Luke Wagner and Alon Zakai and J. Bastien and Michael Holman|377c29add6290cc6d4ac30e3571010f3fc987e2c
 2018|Sparse matrices on the web: characterizing the performance and optimal format selection of sparse matrix-vector multiplication in javascript and webassembly|10.1145/3237009.3237020|6|0|Prabhjot Sandhu and D. Herrera and L. Hendren|89428a2534ebfc5ae593c22587ca5991f5d33c56
 2020|Wasmachine: Bring the Edge up to Speed with A WebAssembly OS|10.1109/CLOUD49709.2020.00056|3|0|Elliott Wen and Gerald Weber|a6580cf09f8153cb59f2935a9f53d9bd7c92aefc
 2021|Understanding the performance of webassembly applications|10.1145/3487552.3487827|3|0|Yutian Yan and Tengfei Tu and Lijian Zhao and Yuchen Zhou and Weihang Wang|30f7df3054343ee487d52e94ab7760262ec5958f
 2019|SELWasm: A Code Protection Mechanism for WebAssembly|10.1109/ISPA-BDCloud-SustainCom-SocialCom48970.2019.00157|3|0|Jian Sun and Dingyuan Cao and Ximing Liu and Ziyi Zhao and Wenwen Wang and Xiaoli Gong and Jin Zhang|a53f209c578bceeff3f14ea9cf5d431d91f8961f
 2020|WASim: Understanding WebAssembly Applications through Classification|10.1145/3324884.3415293|3|0|Alan Romano and Weihang Wang|fbe367aa92c17b5fbc4b439b9d3ed05cddeb17a8
 2020|TruffleWasm: a WebAssembly interpreter on GraalVM|10.1145/3381052.3381325|3|1|Salim S. Salim and A. Nisbet and M. Luj√°n|d6fcc99b621cb2156537b94ab1d9034ae682f803
 2021|An Empirical Study of Bugs in WebAssembly Compilers|10.1109/ASE51524.2021.9678776|3|0|Alan Romano and Xinyue Liu and Yonghwi Kwon and Weihang Wang|9d75f907e65b5b74d90e8c6d9bdf968288331121
 2022|Wobfuscator: Obfuscating JavaScript Malware via Opportunistic Translation to WebAssembly|10.1109/sp46214.2022.9833626|2|0|Alan Romano and Daniel Lehmann and Michael Pradel and Weihang Wang|f041c9d54534217e888eee2f9aba22f682048a69
 2020|Superoptimization of WebAssembly bytecode|10.1145/3397537.3397567|2|0|Javier Cabrera-Arteaga and Shrinish Donde and Jian Gu and Orestis Floros and Lucas Satabin and B. Baudry and Monperrus Martin|7f9ad986365a726a97a79cf606c8db9303b1effc
 2020|Analysis of WebAssembly as a Strategy to Improve JavaScript Performance on IoT Environments|10.5753/sbesc_estendido.2020.13102|2|0|F. Oliveira and J. Mattos|e72c81c91e2c3f3259a9a28f5157ed132c01f698
 2019|Towards a WebAssembly standalone runtime on GraalVM|10.1145/3359061.3362780|1|0|Salim S. Salim and A. Nisbet and M. Luj√°n|79c2622251cf1d7bcd0d266253ccc69da749eb59
 2022|Static Stack-Preserving Intra-Procedural Slicing of WebAssembly Binaries|10.1145/3510003.3510070|1|0|Quentin Sti√©venart and D. Binkley and Coen De Roover|743067aed49d0f62682d11d2db96bf3f62c969ba
 2021|Bringing WebAssembly up to speed with dynamic linking|10.1145/3412841.3442045|1|0|Niko M√§kitalo and Victor Bankowski and Paulius Daubaris and R. Mikkola and Oleg Beletski and T. Mikkonen|85c19f3e93d649ce229ff07daa8ae36e7a1a56bf
