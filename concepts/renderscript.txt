RenderScript
============

RenderScript is a programming language created in 2011.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222011%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D

#1005 on PLDB
13 Years Old
696 Repos

RenderScript is a component of the Android operating system for mobile devices that offers an API for acceleration that takes advantage of heterogeneous hardware. It allows developers to increase the performance of their applications at the cost of writing more complex (lower-level) code. It provides the developer three primary tools: A simple 3D rendering API, a compute API similar to CUDA, and a C99-derived language.. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/RenderScript

- RenderScript website
 http://developer.android.com/guide/topics/renderscript/index.html
- RenderScript Wikipedia page
 https://en.wikipedia.org/wiki/RenderScript
- There are at least 696 RenderScript repos on GitHub
- The  Google BigQuery Public Dataset GitHub snapshot shows 379 users using RenderScript in 407 repos on GitHub
- See also: (2 related languages)Android, CUDA
- Read more about RenderScript on the web: 1.
 https://developer.android.com/guide/topics/renderscript/advanced

/*
 * Copyright (C) 2012 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma version(1)
#pragma rs java_package_name(com.android.gallery3d.filtershow.filters)
#pragma rs_fp_relaxed

int32_t gWidth;
int32_t gHeight;
const uchar4 *gPixels;
rs_allocation gIn;

float gCoeffs[9];

void root(const uchar4 *in, uchar4 *out, const void *usrData, uint32_t x, uint32_t y) {
    uint32_t x1 = min((int32_t)x+1, gWidth-1);
    uint32_t x2 = max((int32_t)x-1, 0);
    uint32_t y1 = min((int32_t)y+1, gHeight-1);
    uint32_t y2 = max((int32_t)y-1, 0);

    float4 p00 = rsUnpackColor8888(gPixels[x1 + gWidth * y1]);
    float4 p01 = rsUnpackColor8888(gPixels[x + gWidth * y1]);
    float4 p02 = rsUnpackColor8888(gPixels[x2 + gWidth * y1]);
    float4 p10 = rsUnpackColor8888(gPixels[x1 + gWidth * y]);
    float4 p11 = rsUnpackColor8888(gPixels[x + gWidth * y]);
    float4 p12 = rsUnpackColor8888(gPixels[x2 + gWidth * y]);
    float4 p20 = rsUnpackColor8888(gPixels[x1 + gWidth * y2]);
    float4 p21 = rsUnpackColor8888(gPixels[x + gWidth * y2]);
    float4 p22 = rsUnpackColor8888(gPixels[x2 + gWidth * y2]);

    p00 *= gCoeffs[0];
    p01 *= gCoeffs[1];
    p02 *= gCoeffs[2];
    p10 *= gCoeffs[3];
    p11 *= gCoeffs[4];
    p12 *= gCoeffs[5];
    p20 *= gCoeffs[6];
    p21 *= gCoeffs[7];
    p22 *= gCoeffs[8];

    p00 += p01;
    p02 += p10;
    p11 += p12;
    p20 += p21;

    p22 += p00;
    p02 += p11;

    p20 += p22;
    p20 += p02;

    p20 = clamp(p20, 0.f, 1.f);
    *out = rsPackColorTo8888(p20.r, p20.g, p20.b);
}

Language features
======================================================

row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Token 
 Example
  /* A comment
  */
row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Token /* */
 Example
  /* A comment
  */
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Token 
 Example
