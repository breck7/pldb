import ../code/conceptPage.scroll

id livescript
name LiveScript
appeared 2011
creators Jeremy Ashkenas and Satoshi Murakami and George Zahariev
tags pl

isOpenSource true
fileType text
rosettaCode http://www.rosettacode.org/wiki/Category:LiveScript
country United States
originCommunity https://github.com/gkz/LiveScript/issues

pygmentsHighlighter LiveScript
 filename javascript.py
 fileExtensions ls
rijuRepl https://riju.codes/livescript
 example
  console.log "Hello, world!"
  
leachim6 LiveScript
 filepath l/LiveScript.ls
 fileExtensions ls
 example
  console.log "Hello World"
  

lineCommentToken #
multiLineCommentTokens /* */
printToken console.log
stringToken "

hasSemanticIndentation true
hasLineComments true
 # A comment
hasComments true
 # A comment
hasPrintDebugging true
hasMultiLineComments true
 /* A comment
 */
hasStrings true
 "Hello world"
hasFloats true
 # [0-9]+\.[0-9]+([eE][0-9]+)?[fd]?(?:[a-zA-Z_]+)?
hasIntegers true
 # [0-9]+(~[0-9a-z]+)?(?:[a-zA-Z_]+)?

jupyterKernel https://github.com/p2edwards/jp-livescript
wikipedia https://en.wikipedia.org/wiki/LiveScript_(programming_language)
 related javascript haskell coffeescript f-sharp elixir
 summary LiveScript is a functional programming language that compiles to JavaScript. It was created by Jeremy Ashkenas—the creator of CoffeeScript—along with Satoshi Muramaki, George Zahariev, and many others. For a brief period in the 1990s, LiveScript was the name of JavaScript.
 pageId 17731
 created 2001
 backlinksCount 27
 revisionCount 53
 dailyPageViews 35
 appeared 2011
 fileExtensions ls

githubBigQuery LiveScript
 repos 2273
 users 1780

linguistGrammarRepo https://github.com/paulmillr/LiveScript.tmbundle
 firstCommit 2010
 lastCommit 2017
 committerCount 40
 commitCount 263
 sampleCount 1
 example
  a = -> 1
  const b = --> 2
  var c = ~> 3
  d = ~~> 10_000_000km * 500ms
  e = (a) -> (b) ~> (c) --> (d, e) ~~> 5
  dashes-identifiers = ->
    a - a
    b -- c
    1-1 1- -1
    a- a
    a -a
  underscores_i$d = ->
  /regexp1/ and //regexp2//g
  'strings' and "strings" and \strings
  ([2 til 10] or [1 to 50])
    |> map (* 2)
    |> filter (> 5)
    |> fold (+)
  
  class Class extends Anc-est-or
    (args) ->
  
  copy = (from, to, callback) -->
    error, data <- read file
    return callback error if error?
    error <~ write file, data
    return callback error if error?
    callback()
  
  ->
  ~>
  ~~>
  -->
  # Comment
  /* Comment */
  

githubLanguage LiveScript
 fileExtensions ls _ls
 trendingProjectsCount 0
 type programming
 filenames Slakefile
 aceMode livescript
 codemirrorMode livescript
 codemirrorMimeType text/x-livescript
 tmScope source.livescript
 aliases live-script or ls
 repos 1905

semanticScholar 0
