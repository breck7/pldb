Arc
===

Arc is a programming language created in 2001 by Paul Graham and Robert Morris.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222001%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D
 https://pldb.io/concepts/../lists/creators.html#q=Paul%20Graham
 https://pldb.io/concepts/../lists/creators.html#q=Robert%20Morris

#456 on PLDB
23 Years Old
236 Repos

Try now: Web

Arc is a dialect of the Lisp programming language developed by Paul Graham and Robert Morris.. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Arc_(programming_language)

- Arc website
 https://www.arclanguage.org
- Arc Wikipedia page
 https://en.wikipedia.org/wiki/Arc_(programming_language)
- Arc docs
 http://www.arclanguage.org/tut.txt
- There are at least 236 Arc repos on GitHub
- The  Google BigQuery Public Dataset GitHub snapshot shows 417 users using Arc in 467 repos on GitHub
- Explore Arc snippets on Rosetta Code
- Arc on HOPL
 https://hopl.info/showlanguage.prx?exp=3986
- Arc appears in the TIOBE Index
- See also: (20 related languages)Lisp, Racket, S-expressions, Scheme, JavaScript, Java, C, Interlisp, Lisp Machine Lisp, Common Lisp, T, Emacs Lisp, AutoLISP, ISLISP, OpenLisp, PicoLisp, EuLisp, NewLisp, Clojure, LFE
- 1 languages in PLDB linking to Arc: Bel

(prn &quot;Hello World&quot;)

(defop said req
  (aform [onlink &quot;click here&quot; (pr &quot;you said: &quot; (arg _ &quot;foo&quot;))]
    (input &quot;foo&quot;)
    (submit)))

Language features
======================================================

row
 Feature Strings
 FeatureLink ../features/hasStrings.html
 Supported ✓
 Token "
 Example
  "Hello world"
row
 Feature Macros
 FeatureLink ../features/hasMacros.html
 Supported ✓
 Token 
 Example
  ; http://www.arclanguage.org/tut.txt
  ; We know enough now to start writing macros.  Macros are basically
  ; functions that generate code.  Of course, generating code is easy;
  ; just call list.
  ;
  ; arc> (list '+ 1 2)
  ; (+ 1 2)
  ;
  ; What macros offer is a way of getting code generated this way into
  ; your programs.  Here's a (rather stupid) macro definition:
  ;
  ; arc> (mac foo ()
  ;        (list '+ 1 2))
  ; *** redefining foo
  ; #3(tagged mac #)
  ;
  ; Notice that a macro definition looks exactly like a function
  ; definition, but with def replaced by mac.
  ;
  ; What this macro says is that whenever the expression (foo) occurs
  ; in your code, it shouldn't be evaluated in the normal way like a
  ; function call.  Instead it should be replaced by the result of
  ; evaluating the body of the macro definition, (list '+ 1 2).
  ; This is called the "expansion" of the macro call.
row
 Feature Print() Debugging
 FeatureLink ../features/hasPrintDebugging.html
 Supported ✓
 Token prn
 Example
row
 Feature Lispy
 FeatureLink ../features/isLisp.html
 Supported ✓
 Token 
 Example
