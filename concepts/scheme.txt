Scheme
======

Scheme is a programming language created in 1975 by Guy Steele and Gerald Jay Sussman.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%221975%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D
 https://pldb.io/concepts/../lists/creators.html#q=Guy%20Steele
 https://pldb.io/concepts/../lists/creators.html#q=Gerald%20Jay%20Sussman

#57 on PLDB
49 Years Old
17k Repos

Try now: Riju · Replit

Scheme is a functional programming language and one of the two main dialects of the programming language Lisp. Unlike Common Lisp, the other main dialect, Scheme follows a minimalist design philosophy specifying a small standard core with powerful tools for language extension. Scheme was created during the 1970s at the MIT AI Lab and released by its developers, Guy L. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Scheme_(programming_language)

- Scheme website
 http://www.scheme-reports.org/
- Scheme appears in categories: programming language
- Scheme Wikipedia page
 https://en.wikipedia.org/wiki/Scheme_(programming_language)
- Scheme docs
 https://docs.scheme.org/
- There are at least 16,742 Scheme repos on GitHub
- Scheme first developed in https://community.scheme.org/
- The  Google BigQuery Public Dataset GitHub snapshot shows 5k users using Scheme in 7k repos on GitHub
- There are 817 Project Euler users using Scheme
- Explore Scheme snippets on Rosetta Code
- Scheme on HOPL
 https://hopl.info/showlanguage.prx?exp=694
- Scheme appears in the TIOBE Index
- Scheme Ubuntu package
 https://packages.ubuntu.com/jammy/guile-2.0
- CodeMirror package for syntax highlighting Scheme
- Monaco package for syntax highlighting Scheme
- Pygments supports syntax highlighting for Scheme
- GitHub supports syntax highlighting for Scheme
- Scheme appears in the Quine Relay project
- There is 1 Jupyter Kernel for Scheme
- Release Notes for Scheme
 https://www.scheme.com/csv6.9c/6.9c.html
- Official Blog page for Scheme
 https://planet.scheme.org/
- Events page for Scheme
 https://events.scheme.org/
- Frequently Asked Questions for Scheme
 http://community.schemewiki.org/?scheme-faq
- Indeed.com has 1,174 matches for "scheme engineer".
- scheme-reports.org was registered in 2009
- See also: (27 related languages)T, Lisp, Algol, Clojure, Common Lisp, Dylan, EuLisp, Haskell, JavaScript, Julia, Lua, R, S, Racket, Ruby, Rust, Scala, PLANNER, Ikarus Scheme implementation, Larceny Scheme implementation, Unicode, S-expressions, Fortran, C, Guile, Emacs Lisp, Android
- 41 languages in PLDB linking to Scheme: Ace Editor, atomspace, bio, Carbon, carth, CHICKEN, chisel, cloc, co2, Eiffel, femtolisp, firrtl, Flare, Guix Workflow Language, Hare, harlan, Idio, Idris, JAL compiler, JavaScript, Julia, Lux, mal, minikanren, Node.js, GNU Poke, Pycket, Pygments, Racket, rainbow, Ruby, Scheme 48, Scroll Notation, Slideshow, Slope, Spatial, SymPy, Uniform eXchange Format, v8, Vyxal, Wing

(display &quot;Hello, world!&quot;)
(newline)

(display &quot;Hello World&quot;) (newline)

; Hello World in Scheme

(display &quot;Hello, world!&quot;)
(newline)

(define-library (libs basic)
    (export list2 x)
    (begin
        (define (list2 . objs)  objs)
        (define x &#39;libs-basic)
        (define not-exported &#39;should-not-be-exported)
        ))

(set! +
      (let ((original+ +))
        (lambda args
          (if (and (not (null? args)) (string? (car args)))
              (apply string-append args)
              (apply original+ args)))))
(+ 1 2 3)
===&gt; 6
(+ &quot;1&quot; &quot;2&quot; &quot;3&quot;)
===&gt; &quot;123&quot;

case do let loop if else when cons car cdr cond lambda lambda* syntax-rules format set! quote eval append list list? member? load

Language features
======================================================

row
 Feature Conditionals
 FeatureLink ../features/hasConditionals.html
 Supported ✓
 Example
 Token 
row
 Feature Strings
 FeatureLink ../features/hasStrings.html
 Supported ✓
 Example
  "Hello world"
 Token "
row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Example
  #| A comment
  |#
 Token #| |#
row
 Feature Print() Debugging
 FeatureLink ../features/hasPrintDebugging.html
 Supported ✓
 Example
 Token display
row
 Feature Homoiconicity
 FeatureLink ../features/hasHomoiconicity.html
 Supported ✓
 Example
 Token 
row
 Feature Prefix Notation
 FeatureLink ../features/hasPrefixNotation.html
 Supported ✓
 Example
  (+ 1 2 3)
 Token 
row
 Feature Macros
 FeatureLink ../features/hasMacros.html
 Supported ✓
 Example
  (define-syntax backwards
   (syntax-rules ()
     ((_) (syntax-error "(backwards) not allowed"))
     ((_ e) e)
     ((_ e1 ... e2)
      (begin e2 (backwards e1 ...)))))
 Token 
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Example
  ; A comment
 Token ;
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
 Token 
row
 Feature Lispy
 FeatureLink ../features/isLisp.html
 Supported ✓
 Example
 Token 
row
 Feature Case Insensitive Identifiers
 FeatureLink ../features/hasCaseInsensitiveIdentifiers.html
 Supported X
 Example
 Token 
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token
