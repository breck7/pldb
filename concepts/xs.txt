XS
==

XS is a programming language created in 2002.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222002%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D

#901 on PLDB
22 Years Old
532 Repos

XS is a Perl foreign function interface through which a program can call a C or C++ subroutine. XS or xsub is an abbreviation of "eXternal Subroutine", where external refers to programming languages external to Perl. XS also refers to a glue language for specifying calling interfaces supporting such interfaces (see below).. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/XS_(Perl)

- XS appears in categories: programming language
- XS Wikipedia page
 https://en.wikipedia.org/wiki/XS_(Perl)
- There are at least 532 XS repos on GitHub
- The  Google BigQuery Public Dataset GitHub snapshot shows 2k users using XS in 2k repos on GitHub
- Explore XS snippets on Rosetta Code
- GitHub supports syntax highlighting for XS
- See also: (3 related languages)Perl, C, Pod

/*
 * This software is copyright (C) by Nick Wellnhofer &lt;wellnhofer@aevum.de&gt;.
 *
 * This is free software; you can redistribute it and/or modify it under
 * the same terms as the Perl 5 programming language system itself.
 *
 * Terms of the Perl programming language system itself
 *
 * a) the GNU General Public License as published by the Free
 *    Software Foundation; either version 1, or (at your option) any
 *    later version, or
 * b) the &quot;Artistic License&quot;
 */

/*
 * Notes on memory management
 *
 * - A pointer to the Perl SV representing a node is stored in the
 *   user data slot of `struct cmark_node`, so there&#39;s a 1:1 mapping
 *   between Perl and C objects.
 * - Every node SV keeps a reference to the parent SV. This is done
 *   indirectly by looking up the parent SV and increasing its refcount.
 * - This makes sure that a document isn&#39;t freed if the last reference
 *   from Perl to the root node is dropped, as references to child nodes
 *   might still exist.
 * - As a consequence, as long as a node is referenced from Perl, all its
 *   ancestor nodes will also be associated with a Perl object.
 */

#define PERL_NO_GET_CONTEXT

#include &quot;EXTERN.h&quot;
#include &quot;perl.h&quot;
#include &quot;XSUB.h&quot;

#include &lt;stdlib.h&gt;
#include &lt;cmark.h&gt;

#if CMARK_VERSION &lt; 0x001000
    #error libcmark 0.16.0 is required.
#endif

/* Fix prefixes of render functions. */
#define cmark_node_render_html cmark_render_html
#define cmark_node_render_xml  cmark_render_xml
#define cmark_node_render_man  cmark_render_man

static SV*
S_create_or_incref_node_sv(pTHX_ cmark_node *node) {
    SV *new_obj = NULL;

    while (node) {
        SV *obj;
        HV *stash;

        /* Look for existing object. */
        obj = (SV*)cmark_node_get_user_data(node);

        if (obj) {
            /* Incref if found. */
            SvREFCNT_inc_simple_void_NN(obj);
            if (!new_obj) {
                new_obj = obj;
            }
            break;
        }

        /* Create a new SV. */
        o

Language features
======================================================

row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
  /* A comment
  */
 Token 
row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Example
  /* A comment
  */
 Token /* */
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token
