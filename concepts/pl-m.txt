PL/M
====

PL/M, aka Programming Language for Microcomputers, is a programming language created in 1973.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%221973%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D

#719 on PLDB
51 Years Old

The PL/M programming language  (an acronym of Programming Language for Microcomputers) is a high-level language conceived and developed by  Gary Kildall in 1973  for Hank Smith at Intel for its microprocessors. The language incorporated ideas from PL/I, ALGOL and XPL, and had an integrated macro processor. Unlike other contemporary languages such as Pascal, C or BASIC, PL/M had no standard input or output routines. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/PL/M

- PL/M Wikipedia page
 https://en.wikipedia.org/wiki/PL/M
- PL/M first developed in Microcomputer Applications Associates
- PL/M on HOPL
 https://hopl.info/showlanguage.prx?exp=591
- See also: (4 related languages)Algol, PL/I, XPL, C
- 1 languages in PLDB linking to PL/M: cloc

FIND: PROCEDURE(PA,PB) BYTE;
    DECLARE (PA,PB) BYTE;
    /* FIND THE STRING IN SCRATCH STARTING AT PA AND ENDING AT PB */
    DECLARE J ADDRESS,
        (K, MATCH) BYTE;
    J = BACK ;
    MATCH = FALSE;
        DO WHILE NOT MATCH AND (MAXM &gt; J);
        LAST,J = J + 1; /* START SCAN AT J */
        K = PA ; /* ATTEMPT STRING MATCH AT K */
            DO WHILE SCRATCH(K) = MEMORY(LAST) AND
                NOT (MATCH := K = PB);
            /* MATCHED ONE MORE CHARACTER */
            K = K + 1; LAST = LAST + 1;
            END;
        END;
    IF MATCH THEN /* MOVE STORAGE */
        DO; LAST = LAST - 1; CALL MOVER;
        END;
    RETURN MATCH;
    END FIND;

Language features
======================================================

row
 Feature Assignment
 FeatureLink ../features/hasAssignment.html
 Supported ✓
 Token :=
 Example
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Token 
 Example
  /* A comment
  */
row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Token /* */
 Example
  /* A comment
  */
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Token 
 Example
