Eiffel
======

Eiffel is a programming language created in 1986 by Bertrand Meyer.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%221986%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D
 https://pldb.io/concepts/../lists/creators.html#q=Bertrand%20Meyer

#163 on PLDB
38 Years Old
913 Repos

git clone https://github.com/EiffelSoftware/EiffelStudio

Eiffel is an object-oriented programming language designed by Bertrand Meyer (an object-orientation proponent and author of Object-Oriented Software Construction) and Eiffel Software. Meyer conceived the language in 1985 with the goal of increasing the reliability of commercial software development; the first version becoming available in 1986. In 2005, Eiffel became an ISO-standardized language. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Eiffel_(programming_language)

- Eiffel website
 https://dev.eiffel.com/Main_Page
- Eiffel downloads page
 https://www.eiffel.org/downloads
- Eiffel Wikipedia page
 https://en.wikipedia.org/wiki/Eiffel_(programming_language)
- Eiffel is developed on GitHub and has 39 stars
- Eiffel docs
 https://www.eiffel.org/documentation
- There are at least 913 Eiffel repos on GitHub
- Eiffel first developed in Eiffel Software
- Eiffel is written in XML, C, Markdown, HTML, SVG, Bourne shell, Perl, Smarty, C++, SCSS, CSS, XSLT, C#, SQL, JavaScript, JSON, Make, Ini, XSD, M4, Lex, Python, CMake, Yacc, PHP, IDL, Assembly language, Bash, Cadence SKILL, Ada, Objective-C, sed, Pascal, YAML, CSV, ASP.NET, Diff, awk, MATLAB, Ring, Tex, Logos, Java, DTD, C shell, Nemerle, CoffeeScript, XHTML, Dockerfile, XML Metadata Interchange, R, Scheme, SAS
- Eiffel on Twitter
 https://twitter.com/eiffel_language
- The  Google BigQuery Public Dataset GitHub snapshot shows 653 users using Eiffel in 721 repos on GitHub
- Explore Eiffel snippets on Rosetta Code
- Eiffel on HOPL
 https://hopl.info/showlanguage.prx?exp=1220
- Eiffel appears in the TIOBE Index
- CodeMirror package for syntax highlighting Eiffel
- Pygments supports syntax highlighting for Eiffel
- GitHub supports syntax highlighting for Eiffel
- Release Notes for Eiffel
 https://www.eiffel.org/doc/eiffelstudio/EiffelStudio_release_notes
- Official Blog page for Eiffel
 https://www.eiffel.org/blogs
- eiffel.org was registered in 2001
- See also: (22 related languages)FreeBSD, Linux, Solaris, Ada, Simula, Z notation, C#, D, Java, Lisaac, Racket, Ruby, Sather, Scala, Algol, Pascal, Visual Studio, ISBN, Smalltalk, C, CIL, Java Bytecode
- Read more about Eiffel on the web: 1.
 https://www.eiffel.org/doc/eiffel/Eiffel_programming_language_syntax
- 1 languages in PLDB linking to Eiffel: Flare

indexing &quot;Hello World in Eiffel , from http://roesler-ac.de/wolfram/hello.htm#Eiffel&quot;

class HELLO

creation
	run

feature

	run is
		local
			io : BASIC_IO;
		do
			!!io;
			io.put_string(&quot;Hello World&quot;);
			io.put_newline
		end; -- run
end; -- class HELLO

note &quot;Hello World in Eiffel&quot;
class HELLO
create run
feature run
       do
               print (&quot;Hello World!%N&quot;)
       end
end

note
	description: &quot;Git checkout command.&quot;
	author: &quot;Olivier Ligot&quot;

class
	GIT_CHECKOUT_COMMAND

inherit
	GIT_COMMAND

create
	make,
	make_master

feature {NONE} -- Initialization

	make (a_branch: STRING)
			-- Checkout the branch `a_branch&#39;.
		do
			initialize
			arguments.force_last (a_branch)
			branch := a_branch
		ensure
			branch_set: branch = a_branch
		end

	make_master
			-- Checkout the master branch.
		do
			make (&quot;master&quot;)
		end

feature -- Access

	branch: STRING
			-- Branch to checkout

	name: STRING = &quot;checkout&quot;
			-- Git subcommand name

end

class
    HELLO_WORLD
create
    make
feature
   make
      do
         print (&quot;Hello, world!&quot;)
      end
end

Language features
======================================================

row
 Feature Binary Literals
 FeatureLink ../features/hasBinaryNumbers.html
 Supported ✓
 Token 
 Example
  -- 0[bB][01]+
row
 Feature Integers
 FeatureLink ../features/hasIntegers.html
 Supported ✓
 Token 
 Example
  -- [0-9]+
row
 Feature Floats
 FeatureLink ../features/hasFloats.html
 Supported ✓
 Token 
 Example
  -- ([0-9]+\.[0-9]*)|([0-9]*\.[0-9]+)
row
 Feature Hexadecimals
 FeatureLink ../features/hasHexadecimals.html
 Supported ✓
 Token 
 Example
  -- 0[xX][a-fA-F0-9]+
row
 Feature Octals
 FeatureLink ../features/hasOctals.html
 Supported ✓
 Token 
 Example
  -- 0[cC][0-7]+
row
 Feature Strings
 FeatureLink ../features/hasStrings.html
 Supported ✓
 Token "
 Example
  "Hello world"
row
 Feature Assignment
 FeatureLink ../features/hasAssignment.html
 Supported ✓
 Token :=
 Example
row
 Feature Case Insensitive Identifiers
 FeatureLink ../features/hasCaseInsensitiveIdentifiers.html
 Supported ✓
 Token 
 Example
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Token --
 Example
  -- A comment
row
 Feature Operator Overloading
 FeatureLink ../features/hasOperatorOverloading.html
 Supported ✓
 Token 
 Example
row
 Feature Multiple Inheritance
 FeatureLink ../features/hasMultipleInheritance.html
 Supported ✓
 Token 
 Example
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Token 
 Example
row
 Feature Pointers
 FeatureLink ../features/hasPointers.html
 Supported ✓
 Token 
 Example
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Token 
 Example
row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported X
 Token 
 Example
