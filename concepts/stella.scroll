import ../code/conceptPage.scroll

id stella
name stella
appeared 1999
tags pl
website https://www.isi.edu/isd/LOOM/Stella/index.html
description STELLA is a strongly typed, object-oriented, Lisp-like language, designed to facilitate symbolic programming tasks in artificial intelligence applications. STELLA preserves those features of Common Lisp deemed essential for symbolic programming such as built-in support for dynamic data structures, heterogeneous collections, first-class symbols, powerful iteration constructs, name spaces, an object-oriented type system with a meta-object protocol, exception handling, and language extensibility through macros, but without compromising execution speed, interoperability with non-STELLA programs, and platform independence. STELLA programs are translated into a target language such as C++, Common Lisp, or Java, and then compiled with the native target language compiler to generate executable code. The language constructs of STELLA are restricted to those that can be translated directly into native constructs of the intended target languages, thus enabling the generation of highly efficient as well as readable code. As of Fall 2000, we have programmed approximately 100,000 lines of STELLA code - about 50% for the STELLA kernel itself and the other 50% for the PowerLoom knowledge representation system and related systems. Our subjective experience has been that it is only slightly more difficult to write and debug a STELLA program than a Lisp program, and that the inconvenience of having to supply some type information is much outweighed by the benefits such as catching many errors during compile time instead of at run time. The biggest benefit, however, seems to be that we can still leverage all the incremental code development benefits of Lisp, since we use the Common Lisp-based version of STELLA for prototyping. This allows us to incrementally define and redefine functions, methods and classes and to inspect, debug and fix incorrect code on the fly. Even the most sophisticated C++ or Java IDE's don't yet seem to support this fully incremental development style, i.e., a change in a class (every change in Java is a change to a class) still requires recompilation and restart of the application, and it is the restart that can be the most time consuming if one debugs a complex application that takes a significant time to reach a certain state.

fileExtensions ste
country United States
originCommunity University of Southern California Information Sciences Institute

example
 (defun (lisp-null-array-symbol-string STRING) ((rank INTEGER))
   ;; Used in the lisp translation code, insdie a verbatim
   ;; to return Lisp-specific-code.
   (CASE rank
     (1 (return "STELLA::NULL-1D-ARRAY"))
     (2 (return "STELLA::NULL-2D-ARRAY"))
     (3 (return "STELLA::NULL-3D-ARRAY"))
     (4 (return "STELLA::NULL-4D-ARRAY"))
     (5 (return "STELLA::NULL-5D-ARRAY"))
     (otherwise (return "STELLA::NULL"))))

lineCommentToken ;

hasLineComments true
 ; A comment
hasComments true
 ; A comment
hasSemanticIndentation false

isbndb 0
