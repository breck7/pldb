gazetteCss

LiveScript
==========

LiveScript is an open source programming language created in 2011 by Jeremy Ashkenas and Satoshi Murakami and George Zahariev.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222011%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 2011
 https://pldb.io/concepts/../lists/creators.html#q=Jeremy%20Ashkenas Jeremy Ashkenas
 https://pldb.io/concepts/../lists/creators.html#q=Satoshi%20Murakami Satoshi Murakami
 https://pldb.io/concepts/../lists/creators.html#q=George%20Zahariev George Zahariev

#479 on PLDB
13 Years Old
2k Repos

LiveScript is a functional programming language that compiles to JavaScript. It was created by Jeremy Ashkenas—the creator of CoffeeScript—along with Satoshi Muramaki, George Zahariev, and many others. For a brief period in the 1990s, LiveScript was the name of JavaScript.. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/LiveScript_(programming_language) Read more on Wikipedia...

- Tags: programming language
- There are at least 1,905 LiveScript repos on GitHub
- Early development of LiveScript happened in https://github.com/gkz/LiveScript/issues
- The  Google BigQuery Public Dataset GitHub snapshot shows 2k users using LiveScript in 2k repos on GitHub
- Explore LiveScript snippets on Rosetta Code
- Pygments supports syntax highlighting for LiveScript
- GitHub supports syntax highlighting for LiveScript
- There is 1 Jupyter Kernel for LiveScript
- See also: (5 related languages) JavaScript, Haskell, CoffeeScript, F#, Elixir
- 1 PLDB concepts link to LiveScript: Civet

console.log &quot;Hello, world!&quot;

console.log &quot;Hello World&quot;

a = -&gt; 1
const b = --&gt; 2
var c = ~&gt; 3
d = ~~&gt; 10_000_000km * 500ms
e = (a) -&gt; (b) ~&gt; (c) --&gt; (d, e) ~~&gt; 5
dashes-identifiers = -&gt;
  a - a
  b -- c
  1-1 1- -1
  a- a
  a -a
underscores_i$d = -&gt;
/regexp1/ and //regexp2//g
&#39;strings&#39; and &quot;strings&quot; and \strings
([2 til 10] or [1 to 50])
  |&gt; map (* 2)
  |&gt; filter (&gt; 5)
  |&gt; fold (+)

class Class extends Anc-est-or
  (args) -&gt;

copy = (from, to, callback) --&gt;
  error, data &lt;- read file
  return callback error if error?
  error &lt;~ write file, data
  return callback error if error?
  callback()

-&gt;
~&gt;
~~&gt;
--&gt;
# Comment
/* Comment */

Language features
======================================================

row
 Feature Integers
 FeatureLink ../features/hasIntegers.html
 Supported ✓
 Example
  # [0-9]+(~[0-9a-z]+)?(?:[a-zA-Z_]+)?
 Token 
row
 Feature Floats
 FeatureLink ../features/hasFloats.html
 Supported ✓
 Example
  # [0-9]+\.[0-9]+([eE][0-9]+)?[fd]?(?:[a-zA-Z_]+)?
 Token 
row
 Feature Strings
 FeatureLink ../features/hasStrings.html
 Supported ✓
 Example
  "Hello world"
 Token "
row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Example
  /* A comment
  */
 Token /* */
row
 Feature Print() Debugging
 FeatureLink ../features/hasPrintDebugging.html
 Supported ✓
 Example
 Token console.log
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
  # A comment
 Token 
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Example
  # A comment
 Token #
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported ✓
 Example
 Token

View source
