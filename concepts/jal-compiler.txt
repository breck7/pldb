JAL compiler
============

JAL compiler is a compiler created in 2000.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222000%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D

#1492 on PLDB
24 Years Old

git clone https://github.com/jallib/jallib

JAL (Just Another Language) is a Pascal-like programming language and compiler that generates executable code for PIC microcontrollers.  It is a free-format language with a compiler that runs on Linux, MS-Windows and MS-DOS (OSX support). It is configurable and extendable through the use of libraries and can even be combined with PIC assembly language.. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/JAL_(compiler)

- JAL compiler Wikipedia page
 https://en.wikipedia.org/wiki/JAL_(compiler)
- JAL compiler is developed on GitHub and has 21 stars
- JAL compiler first developed in Van Ooijen Technische Informatica
- JAL compiler is written in HTML, XML, Python, C, Bourne shell, JSON, Perl, XSLT, Make, Tex, Assembly language, Stata, CSS, Scheme, Logos, Rexx, Markdown, YAML, Bash
- See also: (1 related languages)PIC microcontroller

-- JAL 2.3
include 16f877_bert--define the variables
var byte resist--define the pins
pin_a0_direction = input--variable resistor
pin_d7_direction = input--switch
pin_c2_direction = output--pwm led--enable pulse width modulation
PWM_init_frequency (true, true)

forever loop--convert analog on a0 to digital
   resist = ADC_read_low_res(0)

   -- run measurement through flash memory
   program_eeprom_write(2000,resist)
   program_eeprom_read(2000,resist)

   -- run measurement through data memory
   data_eeprom_write(10,resist)
   data_eeprom_read(10,resist)

   -- if the switch is pressed return random value
   if pin_d7 == high then
      resist = random_byte
   end if--send resistance to PC
   serial_sw_write(resist)
   delay_100ms(1)
   -- set actual PWM duty cycle
   PWM_Set_DutyCycle (resist, resist)

end loop
