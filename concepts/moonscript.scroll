import ../code/conceptPage.scroll

id moonscript
name MoonScript
appeared 2011
tags pl
website http://moonscript.org/
latestVersion v0.5.0
webRepl http://moonscript.org/compiler/
writtenIn lua markdown yaml make bourne-shell c
compilesTo lua

isOpenSource true
tryItOnline moonscript
fileType text
docs https://moonscript.org/reference/
rosettaCode http://www.rosettacode.org/wiki/Category:MoonScript
repoStats
 firstCommit 2011
 commits 851
 committers 38
 files 160
 newestCommit 2023
country United States
originCommunity https://github.com/leafo/moonscript/issues

pygmentsHighlighter MoonScript
 filename scripting.py
 fileExtensions moon
example
 class Thing
   name: "unknown"
 
 class Person extends Thing
   say_name: => print "Hello, I am #{@name}!"
 
 with Person!
   .name = "MoonScript"
   \say_name!
leachim6 Moonscript
 filepath m/Moonscript.moon
 fileExtensions moon
 example
  print 'Hello World'
  

githubRepo https://github.com/leafo/moonscript
 stars 2801
 forks 194
 subscribers 91
 created 2011
 updated 2022
 firstCommit 2011
 description :crescent_moon: A language that compiles to Lua
 issues 181

lineCommentToken --
printToken print
stringToken '
booleanTokens true false

hasLineComments true
 -- A comment
hasComments true
 -- A comment
hasPrintDebugging true
hasSemanticIndentation false
hasStrings true
 'Hello world'
hasBooleans true

domainName moonscript.org
 awisRank
  2022 4629577
  2017 759106

githubBigQuery MoonScript
 repos 359
 users 276

linguistGrammarRepo https://github.com/leafo/moonscript-tmbundle
 firstCommit 2011
 lastCommit 2015
 committerCount 6
 commitCount 26
 sampleCount 1
 example
  
  types = require "moonscript.types"
  util = require "moonscript.util"
  data = require "moonscript.data"
  
  import reversed, unpack from util
  import ntype, mtype, build, smart_node, is_slice, value_is_singular from types
  import insert from table
  import NameProxy, LocalName from require "moonscript.transform.names"
  
  destructure = require "moonscript.transform.destructure"
  
  local implicitly_return
  
  class Run
    new: (@fn) =>
      self[1] = "run"
  
    call: (state) =>
      self.fn state
  
  -- transform the last stm is a list of stms
  -- will puke on group
  apply_to_last = (stms, fn) ->
    -- find last (real) exp
    last_exp_id = 0
    for i = #stms, 1, -1
      stm = stms[i]
      if stm and mtype(stm) != Run
        last_exp_id = i
        break
  
    return for i, stm in ipairs stms
      if i == last_exp_id
        fn stm
      else
        stm
  
  -- is a body a sindle expression/statement
  is_singular = (body) ->
    return false if #body != 1
    if "group" == ntype body
      is_singular body[2]
    else
      true
  
  find_assigns = (body, out={}) ->
    for thing in *body
      switch thing[1]
        when "group"
          find_assigns thing[2], out
        when "assign"
          table.insert out, thing[2] -- extract names
    out
  
  hoist_declarations = (body) ->
    assigns = {}
  
    -- hoist the plain old assigns
    for names in *find_assigns body
      for name in *names
        table.insert assigns, name if type(name) == "string"
  
    -- insert after runs
    idx = 1
    while mtype(body[idx]) == Run do idx += 1
  
    table.insert body, idx, {"declare", assigns}
  
  expand_elseif_assign = (ifstm) ->
    for i = 4, #ifstm
      case = ifstm[i]
      if ntype(case) == "elseif" and ntype(case[2]) == "assign"
        split = { unpack ifstm, 1, i - 1 }
        insert split, {
          "else", {
            {"if", case[2], case[3], unpack ifstm, i + 1}
          }
        }
        return split
  
    ifstm
  
  constructor_name = "new"
  
  with_continue_listener = (body) ->
    continue_name = nil
    {
      Run =>
        @listen "continue", ->
          unless continue_name

githubLanguage MoonScript
 fileExtensions moon
 trendingProjectsCount 0
 type programming
 interpreters moon
 aceMode text
 tmScope source.moonscript
 repos 818

semanticScholar 0
