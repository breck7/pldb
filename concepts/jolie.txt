Jolie
=====

Jolie, aka Java Orchestration Language Interpreter Engine, is a programming language created in 2006 by Claudio Guidi and Fabrizio Montesi.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222006%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 2006
 https://pldb.io/concepts/../lists/creators.html#q=Claudio%20Guidi Claudio Guidi
 https://pldb.io/concepts/../lists/creators.html#q=Fabrizio%20Montesi Fabrizio Montesi

#927 on PLDB
18 Years Old
129 Repos

Jolie (Java Orchestration Language Interpreter Engine) is an open-source programming language for developing distributed applications based on microservices. In the programming paradigm proposed with Jolie, each program is a service that can communicate with other programs by sending and receiving messages over a network. Jolie supports an abstraction layer that allows services to communicate using different mediums, ranging from TCP/IP sockets to local in-memory communications between processes.Jolie is currently supported by an interpreter implemented in the Java language, which can be run in multiple operating systems including Linux-based operating systems, OS X, and Windows. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Jolie_(programming_language) Read more on Wikipedia...

- Tags: programming language
 wrapsOn none
- There are at least 129 Jolie repos on GitHub
 wrapsOn none
- Early development of Jolie happened in University of Bologna
 wrapsOn none
- The  Google BigQuery Public Dataset GitHub snapshot shows 15 users using Jolie in 16 repos on GitHub
 wrapsOn none
- GitHub supports syntax highlighting for Jolie
 wrapsOn none
- jolie-lang.org was registered in 2008
 wrapsOn none
- See also: (6 related languages) Java, Linux, BPEL, XML, C, JavaScript
 wrapsOn none

include &quot;common.iol&quot;
include &quot;ui/swing_ui.iol&quot;
include &quot;console.iol&quot;

outputPort Exam {
Location: Location_Exam
Protocol: sodep
Interfaces: ExamInterface
}

main
{
	question.studentName = &quot;John&quot;;
	question.examName = &quot;SPLG&quot;;
	question.question = &quot;Random question&quot;;
	makeQuestion@Exam( question )( answer );
	showYesNoQuestionDialog@SwingUI( &quot;Do you want to accept answer &quot; + answer + &quot; ?&quot; )( decision );

	message.studentName = &quot;John&quot;;
	message.examName = &quot;SPLG&quot;;
	if ( decision == 0 ) {
		pass@Exam( message )
	} else {
		fail@Exam( message )
	}
}
