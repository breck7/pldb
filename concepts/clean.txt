Clean
=====

Clean is a programming language created in 1987.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%221987%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D

#330 on PLDB
37 Years Old
206 Repos

Try now: Riju · TIO

Clean is a general-purpose purely functional computer programming language. For much of the language's active development history it was called Concurrent Clean, but this was dropped at some point.. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Clean_(programming_language)

- Clean website
 http://clean.cs.ru.nl
- Clean Wikipedia page
 https://en.wikipedia.org/wiki/Clean_(programming_language)
- Clean docs
 https://wiki.clean.cs.ru.nl/Documentation
- There are at least 206 Clean repos on GitHub
- Clean first developed in Radboud University Nijmegen
- The  Google BigQuery Public Dataset GitHub snapshot shows 231 users using Clean in 263 repos on GitHub
- Explore Clean snippets on Rosetta Code
- Clean on HOPL
 https://hopl.info/showlanguage.prx?exp=1305
- Clean appears in the TIOBE Index
- Pygments supports syntax highlighting for Clean
- GitHub supports syntax highlighting for Clean
- See also: (7 related languages)Miranda, Haskell, C, Solaris, Linux, Fibonacci, Prolog
- 2 languages in PLDB linking to Clean: cloc, Pygments

module example

import StdInt

square :: Int -&gt; Int
square n = n * n

Start :: Int
Start = square 3

module main

import StdEnv

Start world
  #(console, world) = stdio world
  #console = fwrites &quot;Hello, world!\n&quot; console
  #(ok, world) = fclose console world
  = world

module hello
Start :: {#Char}
Start = &quot;Hello World&quot;

// Hello World in Clean

module hello

Start :: String
Start = &quot;Hello World!\n&quot;

definition module GenMap

import StdGeneric

generic gMap a b :: .a -&gt; .b
derive gMap c, UNIT, PAIR, EITHER, CONS, FIELD, OBJECT, {}, {!}

derive gMap [], (,), (,,),  (,,,), (,,,,), (,,,,,), (,,,,,,), (,,,,,,,)

(^) infixr 8 :: Int Int -&gt; Int
  (^) x 0 = 1
  (^) x n = x * x ^ (n-1)

case ccall class code code inline derive export foreign generic if in infix infixl infixr instance let of otherwise special stdcall where with

Language features
======================================================

row
 Feature Conditionals
 FeatureLink ../features/hasConditionals.html
 Supported ✓
 Token 
 Example
row
 Feature Classes
 FeatureLink ../features/hasClasses.html
 Supported ✓
 Token 
 Example
row
 Feature Strings
 FeatureLink ../features/hasStrings.html
 Supported ✓
 Token "
 Example
  "Hello world"
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Token //
 Example
  // A comment
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Token 
 Example
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Token 
 Example
