../code/conceptPage.scroll

id smt
name SMT
appeared 2003
tags pl
website http://smtlib.cs.uiowa.edu/language.shtml
standsFor Satisfiability Modulo Theories
description Common input and output languages for SMT solvers.
lab University of Iowa

fileType text
country United States

example
 ; Getting assertions
 (set-option :produce-assertions true)
 (set-logic QF_UF)
 (declare-const p Bool) (declare-const q Bool)
 (push 1)
  (assert (or p q))
  (push 1)
   (assert (not q))
   (get-assertions)
   ; ((or p q)
   ;  (not q)
   ; )
  (pop 1)
   (get-assertions)
  ; ((or p q))
  (pop 1)
  (get-assertions)
  ; ()
 (exit)

lineCommentToken ;

hasLineComments true
 ; A comment
hasComments true
 ; A comment
hasSemanticIndentation false

githubBigQuery SMT
 repos 149
 users 130

linguistGrammarRepo https://github.com/SRI-CSL/SMT.tmbundle.git
 firstCommit 2015
 lastCommit 2015
 committerCount 3
 commitCount 31
 sampleCount 4
 example
  (set-logic QF_LIA)
  (set-info :source | SMT-COMP'06 organizers |)
  (set-info :smt-lib-version 2.0)
  (set-info :category "check")
  (set-info :status unsat)
  (set-info :notes |This benchmark is designed to check if the DP supports bignumbers.|)
  (declare-fun x1 () Int)
  (declare-fun x2 () Int)
  (declare-fun x3 () Int)
  (declare-fun x4 () Int)
  (declare-fun x5 () Int)
  (declare-fun x6 () Int)
  (assert (and (or (>= x1 1000) (>= x1 1002))
               (or (>= x2 (* 1230 x1)) (>= x2 (* 1003 x1)))
  			 (or (>= x3 (* 1310 x2)) (>= x3 (* 1999 x2)))
  			 (or (>= x4 (* 4000 x3)) (>= x4 (* 8000 x3)))
  			 (or (<= x5 (* (- 4000) x4)) (<= x5 (* (- 8000) x4)))
  			 (or (>= x6 (* (- 3) x5)) (>= x6 (* (- 2) x5))) (< x6 0)))
  (check-sat)
  (exit)

githubLanguage SMT
 fileExtensions smt2 smt
 trendingProjectsCount 0
 type programming
 interpreters boolector cvc4 mathsat5 opensmt smtinterpol smt-rat stp verit yices2 z3
 aceMode text
 tmScope source.smt
 repos 582

semanticScholar 7
 year|title|doi|citations|influentialCitations|authors|paperId
 2011|Scala to the Power of Z3: Integrating SMT and Programming|10.1007/978-3-642-22438-6_30|40|0|A. Köksal and Viktor Kuncak and Philippe Suter|4a0eb42ded1878f39539aceca207f55dea2d8fbe
 2016|SMT Solving for Functional Programming over Infinite Structures|10.4204/EPTCS.207.3|19|2|Bartek Klin and Michal Szynwelski|cb714bd967b3c358fa09b7a53f22e2263733ab45
 2012|SMT in Verification, Modeling, and Testing at Microsoft|10.1007/978-3-642-39611-3_3|3|0|N. Bjørner|7e3016d5a49d83bed334c62de6a077e5f4d35ea9
 2020|Effective Encodings of Constraint Programming Models to SMT|10.1007/978-3-030-58475-7_9|3|0|E. Davidson and Ozgur Akgun and Joan Espasa and P. Nightingale|b8eb4528ac0d6d7a32ebbf18bc4aa30c3cb1f1b1
 2020|Inter-theory dependency analysis for SMT string solvers|10.1145/3428260|2|1|Minh-Thai Trinh and D. Chu and J. Jaffar|2e4f01ec5c2aea7a759445024a25c8fc866dfacc
 2020|Using SMT Solver and Logic Puzzles for Teaching Computational Logics in Discrete Mathematics Class|10.1145/3328778.3372686|1|0|Shin Hong|23be6c89f123ecb7e590aa023618518241bba3e2
 2019|Programming Behavioral Test Models for SMT Solving in Scala|10.1109/ICSTW.2019.00032|1|0|B. Aichernig and Benedikt Maderbacher and Stefan Tiran|d5130df1d0dffd54c5eba84255ef93804324de92
