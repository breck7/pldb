../code/conceptPage.scroll

id tal
name TAL
appeared 2008
tags pl
standsFor Transaction Application Language

fileType text
rosettaCode http://www.rosettacode.org/wiki/Category:TAL

pygmentsHighlighter Tal
 filename tal.py
 fileExtensions tal

hasHexadecimals true
hasMultiLineComments true
hasComments true

wikipedia https://en.wikipedia.org/wiki/Transaction_Application_Language
 related c algol pascal
 summary Transaction Application Language or TAL (originally "Tandem Application Language") is a block-structured, procedural language optimized for use on Tandem hardware. TAL resembles a cross between C and Pascal. It was the original system programming language for the Tandem CISC machines, which had no assembler. The design concept of TAL, an evolution of Hewlett Packard's SPL, was intimately associated and optimized with a microprogrammed CISC instruction set. Each TAL statement could easily compile into a sequence of instructions that manipulated data on a transient floating register stack. The register stack itself floated at the crest of the program's memory allocation and call stack. The language itself has the appearance of ALGOL or Pascal, with BEGIN and END statements. However, its semantics are far more like C. It does not permit indefinite levels of procedure nesting, it does not pass complex structured arguments by value, and it does not strictly type most variable references. Programming techniques are much like C using pointers to structures, occasional overlays, deliberate string handling and casts when appropriate. Available datatypes include 8 bit, 16 bit, 32 bit and (introduced later) 64 bit integers. Microcode level support was available for null terminated character strings. However, this is not commonly used. Originally the Tandem NonStop operating system was written in TAL. Recently much of it has been rewritten in C and TAL has been deprecated for new development. In the migration from CISC to RISC TAL was updated/replaced with pTAL - compilers allowed TAL to be accelerated/re-compiled into Native RISC Applications. In the current migration from RISC to Intel Itanium 2 TAL and pTAL has been replaced with epTAL, again - compilers allow TAL and pTAL code to be accelerated/re-compiled into native Itanium Applications.  This article is based on material taken from  the Free On-line Dictionary of Computing  prior to 1 November 2008 and incorporated under the "relicensing" terms of the GFDL, version 1.3 or later.
 pageId 1558864
 created 2005
 backlinksCount 9
 revisionCount 22
 dailyPageViews 17
 appeared 2008

hopl https://hopl.info/showlanguage.prx?exp=5587
