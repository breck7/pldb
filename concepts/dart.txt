Dart
====

Dart is an open source programming language created in 2011 by Lars Bak.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222011%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 2011
 https://pldb.io/concepts/../lists/creators.html#q=Lars%20Bak Lars Bak

#38 on PLDB
13 Years Old
738k Repos

Dart is a general-purpose programming language originally developed by Google and later approved as a standard by Ecma (ECMA-408). It is used to build web, server and mobile applications, and for Internet of Things (IoT) devices. It is open-source software under a permissive free software license (modified BSD license). Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Dart_(programming_language) Read more on Wikipedia...

- Tags: programming language
 wrapsOn none
- There are at least 737,948 Dart repos on GitHub
 wrapsOn none
- Early development of Dart happened in Google
 wrapsOn none
- The  Google BigQuery Public Dataset GitHub snapshot shows 3k users using Dart in 6k repos on GitHub
 wrapsOn none
- There are 35,109 members in the Dart subreddit
 wrapsOn none
- There are 54 Project Euler users using Dart
 wrapsOn none
- In the 2021 StackOverflow developer survey Dart programmers reported a median salary of $32,986. 6% of respondents reported using Dart. 4,965 programmers reported using Dart, and 7,018 said they wanted to use it
 wrapsOn none
- Explore Dart snippets on Rosetta Code
 wrapsOn none
- Dart ranks #22 in the TIOBE Index
 wrapsOn none
- Dart LSP implementation
 wrapsOn none
- CodeMirror package for syntax highlighting Dart
 wrapsOn none
- Monaco package for syntax highlighting Dart
 wrapsOn none
- Pygments supports syntax highlighting for Dart
 wrapsOn none
- GitHub supports syntax highlighting for Dart
 wrapsOn none
- There is a central package repository for Dart
 wrapsOn none
- Indeed.com has 208 matches for "dart developer".
 wrapsOn none
- dartlang.org was registered in 2011
 wrapsOn none
- See also: (24 related languages) C#, Erlang, JavaScript, Smalltalk, Strongtalk, C, Android, iOS, Eclipse, Linux, Sublime Text, Emacs, Vim, Visual Studio Code, Algol, Ruby, Self, CoffeeScript, Elm, Fantom, Go, Haxe, Opa, TypeScript
 wrapsOn none
- 9 PLDB concepts link to Dart: Ace Editor, buzz, Candy, FlatBuffers, mal, pointless, Pygments, SMC, Wren
 wrapsOn none

// Type your code here, or load an example.
int square(int num) {
  return num * num;
}

int main(List&lt;String&gt; args) {
    return square(int.fromEnvironment(&quot;input&quot;));
}

void main() {
  print(&#39;Hello, world!&#39;);
}

main() {
  print(&#39;Hello World&#39;);
}

// Hello world in Dart

main() {
   print(&#39;Hello world!&#39;);
}

import &#39;dart:math&#39; as math;

class Point {
  num x, y;

  Point(this.x, this.y);

  num distanceTo(Point other) {
    var dx = x - other.x;
    var dy = y - other.y;
    return math.sqrt(dx * dx + dy * dy);
  }
}

void main() {
  var p = new Point(2, 3);
  var q = new Point(3, 4);
  print(&#39;distance from p to q = ${p.distanceTo(q)}&#39;);
}

// Import the math library to get access to the sqrt function.
import &#39;dart:math&#39; as math;

// Create a class for Point.
class Point {

  // Final variables cannot be changed once they are assigned.
  // Create two instance variables.
  final num x, y;

  // A constructor, with syntactic sugar for setting instance variables.
  Point(this.x, this.y);

  // A named constructor with an initializer list.
  Point.origin()
      : x = 0,
        y = 0;

  // A method.
  num distanceTo(Point other) {
    var dx = x - other.x;
    var dy = y - other.y;
    return math.sqrt(dx * dx + dy * dy);
  }

  // Example of Operator Overloading
  Point operator +(Point other) =&gt; new Point(x + other.x, y + other.y);
}

// All Dart programs start with main().
void main() {
  // Instantiate point objects.
  var p1 = new Point(10, 10);
  var p2 = new Point.origin();
  var distance = p1.distanceTo(p2);
  print(distance);
}

abstract as assert async await break case catch class const continue covariant default deferred do dynamic else enum export extends external factory false final finally for get if implements import in is library new null operator part rethrow return set static super switch sync this throw true try typedef var void while with yield

Language features
======================================================

row
 Feature Standard Library
 FeatureLink ../features/hasStandardLibrary.html
 Supported ✓
 Example
  print('Hello, World!');
 Token 
row
 Feature Hexadecimals
 FeatureLink ../features/hasHexadecimals.html
 Supported ✓
 Example
  // 0[xX][0-9a-fA-F]+
 Token 
row
 Feature Conditionals
 FeatureLink ../features/hasConditionals.html
 Supported ✓
 Example
 Token 
row
 Feature Async Await
 FeatureLink ../features/hasAsyncAwait.html
 Supported ✓
 Example
 Token 
row
 Feature Inheritance
 FeatureLink ../features/hasInheritance.html
 Supported ✓
 Example
 Token 
row
 Feature Switch Statements
 FeatureLink ../features/hasSwitch.html
 Supported ✓
 Example
 Token 
row
 Feature Exceptions
 FeatureLink ../features/hasExceptions.html
 Supported ✓
 Example
 Token 
row
 Feature Constants
 FeatureLink ../features/hasConstants.html
 Supported ✓
 Example
 Token 
row
 Feature Classes
 FeatureLink ../features/hasClasses.html
 Supported ✓
 Example
 Token 
row
 Feature While Loops
 FeatureLink ../features/hasWhileLoops.html
 Supported ✓
 Example
 Token 
row
 Feature Booleans
 FeatureLink ../features/hasBooleans.html
 Supported ✓
 Example
 Token true false
row
 Feature Strings
 FeatureLink ../features/hasStrings.html
 Supported ✓
 Example
  'Hello world'
 Token '
row
 Feature Regular Expression Syntax Sugar
 FeatureLink ../features/hasRegularExpressionsSyntaxSugar.html
 Supported ✓
 Example
 Token 
row
 Feature Print() Debugging
 FeatureLink ../features/hasPrintDebugging.html
 Supported ✓
 Example
 Token print
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Example
  // A comment
 Token //
row
 Feature Operator Overloading
 FeatureLink ../features/hasOperatorOverloading.html
 Supported ✓
 Example
 Token 
row
 Feature File Imports
 FeatureLink ../features/hasImports.html
 Supported ✓
 Example
  import 'file-system.dart';
  import 'dart:math' as math;
 Token 
row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Example
  /* A comment
  */
 Token /* */
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
  // Hi
  /* Assume address is not null. */
 Token 
row
 Feature Case Insensitive Identifiers
 FeatureLink ../features/hasCaseInsensitiveIdentifiers.html
 Supported X
 Example
 Token 
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token
