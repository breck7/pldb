import ../code/conceptPage.scroll

id pure
name Pure
appeared 2008
creators Albert Gräf
tags pl
website https://agraef.github.io/pure-lang/

isOpenSource true
tryItOnline pure
fileType text
wordRank 3337
rosettaCode http://www.rosettacode.org/wiki/Category:Pure
country Germany
originCommunity https://bitbucket.org/purelang/pure-lang/issues

wikipedia https://en.wikipedia.org/wiki/Pure_(programming_language)
 example
  extern int puts(char*);
   hello = puts "Hello, world!";
   hello;
 related freebsd linux haskell lisp alice matlab llvmir c miranda puredata octave opengl faust supercollider
 summary Pure, successor to the equational language Q, is a dynamically typed, functional programming language based on term rewriting. It has facilities for user-defined operator syntax, macros, arbitrary-precision arithmetic (multiple-precision numbers), and compiling to native code through the LLVM. Pure is free and open-source software distributed (mostly) under the GNU Lesser General Public License version 3 or later. Pure comes with an interpreter and debugger, provides automatic memory management, has powerful functional and symbolic programming abilities, and interfaces to libraries in C (e.g., for numerics, low-level protocols, and other such tasks). At the same time, Pure is a small language designed from scratch; its interpreter is not large, and the library modules are written in Pure. The syntax of Pure resembles that of Miranda and Haskell, but it is a free-format language and thus uses explicit delimiters (rather than off-side rule indents) to denote program structure. The Pure language is a successor of the equational programming language Q created formerly by the same author, Albert Gräf at the University of Mainz, Germany. Relative to Q, it offers some important new features (such as local functions with lexical scoping, efficient vector and matrix support, and the built-in C interface) and programs run much faster as they are compiled just-in-time to native code on the fly. Pure is mostly aimed at mathematical applications and scientific computing currently, but its interactive interpreter environment, the C interface and the growing set of addon modules make it suitable for a variety of other applications, such as artificial intelligence, symbolic computation, and real-time multimedia processing. Pure plug-ins are available for the Gnumeric spreadsheet and Miller Puckette's Pure Data graphical multimedia software, which make it possible to extend these programs with functions written in the Pure language. Interfaces are also provided as library modules to GNU Octave, OpenCV, OpenGL, the GNU Scientific Library, FAUST, SuperCollider, and liblo (for Open Sound Control (OSC)).
 pageId 20446791
 dailyPageViews 31
 created 2008
 backlinksCount 34
 revisionCount 100
 appeared 2008

semanticScholar 19
 year|title|doi|citations|influentialCitations|authors|paperId
 2014|Proof-producing translation of higher-order logic into pure and stateful ML|10.1017/S0956796813000282|52|7|Magnus O. Myreen and Scott Owens|5b203abc65643b5237ffb703e01ff5ae080b35fe
 2012|Position paper: nondeterminism is unavoidable, but data races are pure evil|10.1145/2414729.2414732|48|3|H. Boehm|caf8e6709fc112adc62ac1ef57dd4dfc561aec67
 2012|Task-oriented programming in a pure functional language|10.1145/2370776.2370801|47|5|M. J. Plasmeijer and B. Lijnse and Steffen Michels and P. Achten and P. Koopman|5a2f4c1479f02950563df29427322005125a3efd
 2011|Realizability and Parametricity in Pure Type Systems|10.1007/978-3-642-19805-2_8|43|3|Jean-Philippe Bernardy and Marc Lasson|f2458d0def87bc42e57cb308b7145eb83bf9efeb
 1990|Representing Object Identity in a Pure Functional Language|10.1007/3-540-53507-1_69|26|1|A. Ohori|596a96ca28d3ad73ab4bb09a2532d266e83a0b9d
 2014|Programming BDI Agents with Pure Java|10.1007/978-3-319-11584-9_15|21|0|A. Pokahr and L. Braubach and C. Haubeck and J. Ladiges|cbd32c3e8f0b4c15469956e271d6de1ab57a57d9
 2019|Milestones from the Pure Lisp theorem prover to ACL2|10.1007/s00165-019-00490-3|16|1|J. S. Moore|9608e7fb5b37c9208fe8af63e10e83e029a23405
 2014|Automatic design of sound synthesizers as pure data patches using coevolutionary mixed-typed cartesian genetic programming|10.1145/2576768.2598303|15|2|Matthieu Macret and P. Pasquier|05382fbb8c09605c4e410d8a5d8a99aabfcc982e
 2016|Pure ion chromatogram extraction via optimal k-means clustering|10.1039/C6RA08409E|7|0|H. Ji and Hongmei Lu and Zhimin Zhang|3d4c18b2c730b4262c73ea976ef48272d435d2c9
 2013|Pure trait-based programming on the Java platform|10.1145/2500828.2500835|7|0|Lorenzo Bettini and F. Damiani|7f2d5abb57901a4503be1c3d31dbb7c1e175ae3c
 1989|Imperative Effects from a Pure Functional Language|10.1007/978-1-4471-3166-3_11|6|0|L. McLoughlin and E. S. Hayes|d917999058a69013f538afdba8ac5d8d43cd4202
 2013|Pure Pointer Programs and Tree Isomorphism|10.1007/978-3-642-37075-5_21|5|0|M. Hofmann and Ramyaa and Ulrich Schöpp|6097deb125048c581e9cfecf0e518206fc408a23
 2002|A Pure Meta-interpreter for Flat GHC, a Concurrent Constraint Language|10.1007/3-540-45628-7_7|4|0|K. Ueda|3cb9bba2dd901c9920ba44d66c5a5b92fa4f2bbe
 2015|A Game Engine in Pure Python for CS1: Design, Experience, and Limits|10.1145/2729094.2742590|4|0|John Aycock and Etienne Pitout and Sarah Storteboom|719053092aadf4ccdd46e6af9e26ce18c2b0d6a9
 1991|Parallel Programming with Pure Functional Languages|10.1007/3-540-55160-3_48|3|0|R. Harrison|475f93a9ee89b25b4bcc22b53a14adeae8b76544
 2013|An evaluation of a pure embedded domain-specific language for strategic term rewriting|10.4018/978-1-4666-2092-6.CH004|3|0|Shirren Premaratne and A. Sloane and Len Hamey|8123bee5eded32079734e106b60a7ea60ac88497
 2021|A Synchronous Effects Logic for Temporal Verification of Pure Esterel|10.1007/978-3-030-67067-2_19|2|1|Yahui Song and W. Chin|821f0b1c578451f71677a8a0d571f6b0f71ae4a7
 2015|Introduction to Pure Data|10.1007/978-1-4842-1583-8_1|1|0|Alexandros Drymonitis|c129841a37361b2fd04c1c0c5942e273bf4b4f43
 1993|Dynamic programming in a pure functional language|10.1145/162754.162864|1|0|R. Harrison and C. Glass|39df21ea57c745856838c45662bbd253a33e1330
