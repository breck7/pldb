import ../code/conceptPage.scroll

id cil
name CIL
appeared 2000
tags pl
standsFor Common Intermediate Language
aka Microsoft Intermediate Language MSIL

fileType text
docs http://people.eecs.berkeley.edu/~necula/cil/
originCommunity Microsoft

rijuRepl https://riju.codes/cil
 example
  .assembly main {}
  .class Main
  {
    .method static void Main() cil managed
    {
      .entrypoint
      ldstr "Hello, world!"
      call void [mscorlib]System.Console::WriteLine(string)
      ret
    }
  }
example
 .assembly Hello {}
 .assembly extern mscorlib {}
 .method static void Main()
 {
     .entrypoint
     .maxstack 1
     ldstr "Hello, world!"
     call void [mscorlib]System.Console::WriteLine(string)
     ret
 }
leachim6 Cil
 filepath c/Cil.il
 fileExtensions il
 example
  // ilasm cil.il
  .assembly HelloWorld {}
  .method public static void Main() cil managed
  {
       .entrypoint
       .maxstack 1
       ldstr "Hello World"
       call void [mscorlib]System.Console::WriteLine(string)
       ret
  }
  

lineCommentToken //
printToken call void [mscorlib]System.Console::WriteLine
stringToken "

hasLineComments true
 // A comment
hasComments true
 // A comment
hasPrintDebugging true
hasSemanticIndentation false
hasStrings true
 "Hello world"

wikipedia https://en.wikipedia.org/wiki/Common_Intermediate_Language
 example
  .method assembly static void modopt([mscorlib]System.Runtime.CompilerServices.CallConvCdecl)
          test_pointer_operations(int32 param) cil managed
  {
    .vtentry 1 : 1
    // Code size       44 (0x2c)
    .maxstack  2
    .locals ([0] int32* ptr,
             [1] valuetype A* V_1,
             [2] valuetype A* a,
             [3] int32 k)
  // k = 0;
    IL_0000:  ldc.i4.0
    IL_0001:  stloc.3
  // ptr = &k;
    IL_0002:  ldloca.s   k // load local's address instruction
    IL_0004:  stloc.0
  // *ptr = 1;
    IL_0005:  ldloc.0
    IL_0006:  ldc.i4.1
    IL_0007:  stind.i4 // indirection instruction
  // ptr = &param
    IL_0008:  ldarga.s   param // load parameter's address instruction
    IL_000a:  stloc.0
  // *ptr = 2
    IL_000b:  ldloc.0
    IL_000c:  ldc.i4.2
    IL_000d:  stind.i4
  // a = new A;
    IL_000e:  ldloca.s   a
    IL_0010:  call       valuetype A* modopt([mscorlib]System.Runtime.CompilerServices.CallConvThiscall) 'A.{ctor}'(valuetype A* modopt([mscorlib]System.Runtime.CompilerServices.IsConst) modopt([mscorlib]System.Runtime.CompilerServices.IsConst))
    IL_0015:  pop
  // ptra = &a;
    IL_0016:  ldloca.s   a
    IL_0018:  stloc.1
  // ptra->meth();
    IL_0019:  ldloc.1
    IL_001a:  dup
    IL_001b:  ldind.i4 // reading the VMT for virtual call
    IL_001c:  ldind.i4
    IL_001d:  calli      unmanaged stdcall void modopt([mscorlib]System.Runtime.CompilerServices.CallConvStdcall)(native int)
    IL_0022:  ret
  } // end of method 'Global Functions'::test_pointer_operations
 related cli-assembly assembly-language csharp x86-isa java-bytecode visual-basic.net
 summary Common Intermediate Language (CIL, pronounced either sil or kil), formerly called Microsoft Intermediate Language (MSIL), is the lowest-level human-readable programming language defined by the Common Language Infrastructure (CLI) specification and is used by the .NET Framework and Mono. Languages which target a CLI-compatible runtime environment compile to CIL, which is assembled into an object code that has a bytecode-style format. CIL is an object-oriented assembly language, and is entirely stack-based. Its bytecode is translated into native code or—most commonly—executed by a virtual machine. CIL was originally known as Microsoft Intermediate Language (MSIL) during the beta releases of the .NET languages. Due to standardization of C# and the Common Language Infrastructure, the bytecode is now officially known as CIL.
 pageId 46004
 dailyPageViews 212
 created 2002
 backlinksCount 168
 revisionCount 342
 appeared 2005

tiobe CIL

isbndb 3
 year|publisher|title|authors|isbn13
 2008|Apress|CIL Programming: Under the Hood of .NET (Expert's Voice)|Bock, Jason|9781430208457
 2002|Apress|CIL Programming: Under the Hood of .NET|Bock, Jason|9781590590416
 2013|Apress|CIL Programming: Under the Hood of .NET|Bock, Jason|9781430251569

indeedJobs cil developer
 2022 0

semanticScholar 4
 year|title|doi|citations|influentialCitations|authors|paperId
 2004|CIL + Metadata > Executable Program|10.5381/jot.2004.3.2.a2|8|0|Giuseppe Attardi and A. Cisternino and Diego Colombo|5391e1abf4e75970c25bfed0fc0548bb62bcd4aa
 1984|Interactive verification of communication software on the basis of CIL|10.1145/800056.802065|7|1|H. Krumm and O. Drobnik|b2379292d4ba1430da0ceb5bd007574b7bc7bb42
 2002|CIL Programming: Under the Hood™ of .NET|10.1007/978-1-4302-0845-7|5|0|Jason Bock|eec8568a3e6a51db647aafcac1779eb8993bae4d
 2018|CIL to Java-Bytecode Translation for Static Analysis Leveraging|10.1145/3193992.3193994|3|0|Pietro Ferrara and A. Cortesi and F. Spoto|24536578ef032ac8f7076fa381a920bd4386b6db

goodreads
 title|year|author|goodreadsId|rating|ratings|reviews
 CIL Programming: Under the Hood of .Net|2002|Jason Bock|253979|3.50|2|0
