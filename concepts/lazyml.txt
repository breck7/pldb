Lazy ML
=======

Lazy ML is a programming language created in 1980.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%221980%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D

#2758 on PLDB
44 Years Old

Lazy ML (LML) is a functional programming language developed in the early 1980s by Lennart Augustsson and Thomas Johnsson at Chalmers University of Technology, prior to Miranda and Haskell. LML is a strongly typed, statically scoped implementation of ML, with lazy evaluation. The key innovation of LML was to demonstrate how to compile a lazy functional language. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Lazy_ML

- Lazy ML Wikipedia page
 https://en.wikipedia.org/wiki/Lazy_ML
- Lazy ML first developed in Chalmers University of Technology
- See also: (2 related languages)Haskell, ML

let rec fact 0 = 1  ||
            fact n = n*fact(n-1)
