COMPONENT PASCAL
================

COMPONENT PASCAL is a programming language created in 1997.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%221997%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 1997

#955 on PLDB
27 Years Old
13k Repos

- Tags: programming language
- There are at least 13,387 COMPONENT PASCAL repos on GitHub
- COMPONENT PASCAL is a superset of Oberon-2
- Early development of COMPONENT PASCAL happened in www.oberon.ch
- The  Google BigQuery Public Dataset GitHub snapshot shows 128 users using COMPONENT PASCAL in 132 repos on GitHub
- There are 8 Project Euler users using COMPONENT PASCAL
- COMPONENT PASCAL on HOPL
 https://hopl.info/showlanguage.prx?exp=1209 COMPONENT PASCAL on HOPL
- Pygments supports syntax highlighting for COMPONENT PASCAL
- GitHub supports syntax highlighting for COMPONENT PASCAL

MODULE ObxFact;
(**
    project         = &quot;BlackBox&quot;
    organization    = &quot;www.oberon.ch&quot;
    contributors    = &quot;Oberon microsystems&quot;
    version         = &quot;System/Rsrc/About&quot;
    copyright       = &quot;System/Rsrc/About&quot;
    license         = &quot;Docu/BB-License&quot;
    changes         = &quot;&quot;
    issues          = &quot;&quot;

**)

IMPORT
    Stores, Models, TextModels, TextControllers, Integers;

PROCEDURE Read(r: TextModels.Reader; VAR x: Integers.Integer);
    VAR i, len, beg: INTEGER; ch: CHAR; buf: POINTER TO ARRAY OF CHAR;
BEGIN
    r.ReadChar(ch);
    WHILE ~r.eot &amp; (ch &lt;= &quot; &quot;) DO r.ReadChar(ch) END;
    ASSERT(~r.eot &amp; (((ch &gt;= &quot;0&quot;) &amp; (ch &lt;= &quot;9&quot;)) OR (ch = &quot;-&quot;)));
    beg := r.Pos() - 1; len := 0;
    REPEAT INC(len); r.ReadChar(ch) UNTIL r.eot OR (ch &lt; &quot;0&quot;) OR (ch &gt; &quot;9&quot;);
    NEW(buf, len + 1);
    i := 0; r.SetPos(beg);
    REPEAT r.ReadChar(buf[i]); INC(i) UNTIL i = len;
    buf[i] := 0X;
    Integers.ConvertFromString(buf^, x)
END Read;

PROCEDURE Write(w: TextModels.Writer; x: Integers.Integer);
    VAR i: INTEGER;
BEGIN
    IF Integers.Sign(x) &lt; 0 THEN w.WriteChar(&quot;-&quot;) END;
    i := Integers.Digits10Of(x);
    IF i # 0 THEN
        REPEAT DEC(i); w.WriteChar(Integers.ThisDigit10(x, i)) UNTIL i = 0
    ELSE w.WriteChar(&quot;0&quot;)
    END
END Write;

PROCEDURE Compute*;
    VAR beg, end, i, n: INTEGER; ch: CHAR;
        s: Stores.Operation;
        r: TextModels.Reader; w: TextModels.Writer; attr: TextModels.Attributes;
        c: TextControllers.Controller;
        x: Integers.Integer;
BEGIN
    c := TextControllers.Focus();
    IF (c # NIL) &amp; c.HasSelection() THEN
        c.GetSelection(beg, end);
        r := c.text.NewReader(NIL); r.SetPos(beg); r.ReadChar(ch);
        WHILE ~r.eot &amp; (beg &lt; end) &amp; (ch &lt;= &quot; &quot;) DO r.ReadChar(ch); INC(beg) END;
        IF ~r.eot &amp; (beg &lt; end) THEN
            r.ReadPrev; Read(r, x);
            end := r.Pos(); r.ReadPrev; attr :=r.attr;
            IF (Integers.Sign(x) &gt; 0) &amp; (Integers.Compare(x, Integers.Long(MAX(LONGINT))) &lt;= 0) THEN
                n := SHORT(Integers.Short(x)); i := 2; x := Integers.Long(1);
                WHILE i &lt;= n DO x := Integers.Product(x, Integers.Long(i)); INC(i) END;
                Models.BeginScript(c.text, &quot;computation&quot;, s);
                c.text.Delete(beg, end);
                w := c.text.NewWriter(NIL); w.SetPos(beg); w.SetAttr(attr);
                Write(w, x);
                Models.EndScript(c.text, s)
            END
        END
    END
END Compute;

END ObxFact.

Language features
======================================================

row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
  (* A comment
  *)
 Token 
row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Example
  (* A comment
  *)
 Token (* *)
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token
