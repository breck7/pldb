HCL
===

HCL, aka HashiCorp configuration language, is an open source data notation created in 2014.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222014%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D

#72 on PLDB
10 Years Old
180k Repos

git clone https://github.com/hashicorp/hcl

Try now: Riju

HCL (HashiCorp Configuration Language) is a configuration language built by HashiCorp. The goal of HCL is to build a structured configuration language that is both human and machine friendly for use with command-line tools, but specifically targeted towards DevOps tools, servers, etc. HCL is also fully JSON compatible. That is, JSON can be used as completely valid input to a system expecting HCL. This helps makes systems interoperable with other systems. HCL is heavily inspired by libucl, nginx configuration, and others similar.

- HCL appears in categories: dataNotation
- HCL is developed on GitHub and has 4,132 stars
- HCL docs
 https://developer.hashicorp.com/terraform/language/syntax/configuration
- There are at least 180,390 HCL repos on GitHub
- HCL first developed in HashiCorp
- HCL is written in Go, HCL, Markdown, JSON, reStructuredText, Make, Bourne shell, YAML, Ruby, Python
- The  Google BigQuery Public Dataset GitHub snapshot shows 2k users using HCL in 3k repos on GitHub
- Monaco package for syntax highlighting HCL
- GitHub supports syntax highlighting for HCL
- 13 languages in PLDB linking to HCL: Ace Editor, cloc, dgraph, edgedb, Haxe Library Manager, HCL, Hot Cocoa Lisp, ko, m3db, Mindsdb, Nomad, Semantic Patch Language, Wing

variable &quot;ami&quot; {
   description = &quot;the AMI to use&quot;
}
&lt;&lt;FOO
hello
world
FOO

output = &quot;Hello, world!&quot;

consul = &quot;1.2.3.4&quot;

// This is a comment
template &quot;foo&quot; {
  bar = &quot;zip&quot;
}

var local path for_each any string number bool true false null if  else  endif  for  in endfor

Language features
======================================================

row
 Feature Conditionals
 FeatureLink ../features/hasConditionals.html
 Supported ✓
 Example
 Token 
row
 Feature Booleans
 FeatureLink ../features/hasBooleans.html
 Supported ✓
 Example
 Token true false
row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Example
  /* A comment
  */
 Token /* */
row
 Feature Strings
 FeatureLink ../features/hasStrings.html
 Supported ✓
 Example
 Token 
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
  // A comment
 Token 
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Example
  // A comment
 Token //
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token
