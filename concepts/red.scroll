../code/conceptPage.scroll

id red
name Red
appeared 2011
creators Nenad Rakocevic
tags pl
website http://www.red-lang.org/
blog https://www.red-lang.org/
latestVersion v0.6.5
fileExtensions red reds
writtenIn r java markdown xml yaml c html bourne-shell css dockerfile visual-basic csv

isOpenSource true
tryItOnline https://tio.run/#red
fileType text
wordRank 554
docs https://www.red-lang.org/p/documentation.html
faq https://www.red-lang.org/2015/12/answers-to-community-questions.html
rosettaCode http://www.rosettacode.org/wiki/Category:Red
repoStats
 firstCommit 2011
 commits 15634
 committers 114
 files 639
 newestCommit 2024
country China
originCommunity https://github.com/red

pygmentsHighlighter Red
 filename rebol.py
 fileExtensions red reds
rijuRepl https://riju.codes/red
 example
  Red [Title: "Main"]
  
  print "Hello, world!"
  
twitter https://twitter.com/red_lang
leachim6 Red
 filepath r/Red.red
 fileExtensions red
 example
  Red [Needs: 'View]
  view [text "Hello World"]
languageServerProtocolProject https://github.com/bitbegin/redlangserver
 writtenIn red

githubRepo https://github.com/red/red
 stars 5479
 forks 416
 subscribers 209
 created 2011
 updated 2024
 firstCommit 2011
 description Red is a next-generation programming language strongly inspired by Rebol, but with a broader field of usage thanks to its native-code compiler, from system programming to high-level scripting and cross-platform reactive GUI, while providing modern support for concurrency, all in a zero-install, zero-config, single ~1MB file!
 issues 517

lineCommentToken ;
stringToken "

hasLineComments true
 ; A comment
hasComments true
 ; A comment
hasSemanticIndentation false
hasStrings true
 "Hello world"

wikipedia https://en.wikipedia.org/wiki/Red_(programming_language)
 example
  Red/System [Title: "A factorial script"]
  
  factorial: func [
  	x       [integer!]                   ; This is compulsory in Red/System
  	return: [integer!]                   ; This is compulsory in Red/System
  ][
  	either x = 0 [1][x * factorial x - 1]
  ]
 related linux scala lua x86-isa arm freebsd android
 summary Red is a computer programming language. Red was made to overcome the limitations of the programming language Rebol. Introduced in 2011 by Nenad Rakocevic, Red is both an imperative and functional programming language. Its syntax and general usage overlaps that of the interpreted Rebol language (which was introduced in 1997). The implementation choices of Red intend to create a full stack programming language: Red can be used for extremely high-level programming (DSLs and GUIs) as well as low-level programming (operating systems and device drivers). Key to the approach is that the language has two parts: Red/System and Red. Red/System is similar to C, but packaged into a Rebol lexical structure â€“  for example, one would write if x > y [print "Hello"] instead of if (x > y) {printf("Hello\n");}. Red is a homoiconic language capable of meta-programming, with semantics similar to Rebol's. Red's runtime library is written in Red/System, and uses a hybrid approach: it compiles what it can deduce statically and uses an embedded interpreter otherwise. The project roadmap includes a just-in-time compiler for cases in between, but this has not yet been implemented. Red seeks to remain independent of any other toolchain; it does its own code generation. It is therefore possible to cross-compile Red programs from any platform it supports to any other, via a command-line switch. Both Red and Red/System are distributed as open-source software under the modified BSD license. The runtime library is distributed under the more permissive Boost Software License.
 pageId 35733875
 dailyPageViews 64
 created 2012
 backlinksCount 23
 revisionCount 105
 appeared 2011
 fileExtensions red reds

tiobe Red

domainName red-lang.org
 registered 2010
 awisRank
  2022 1393281

githubBigQuery Red
 repos 98
 users 92

linguistGrammarRepo https://github.com/Oldes/Sublime-Red
 firstCommit 2014
 lastCommit 2015
 committerCount 3
 commitCount 34
 sampleCount 2
 example
  Red/System [
      Title:      "Red/System example file"
      Purpose:    "Just some code for testing Pygments colorizer"
      Language:   http://www.red-lang.org/
  ]
  
  #include %../common/FPU-configuration.reds
  
  ; C types
  
  #define time!                   long!
  #define clock!                  long!
  
  date!: alias struct! [
      second                      [integer!]  ; 0-61 (60?)
      minute                      [integer!]  ; 0-59
      hour                        [integer!]  ; 0-23
  
      day                         [integer!]  ; 1-31
      month                       [integer!]  ; 0-11
      year                        [integer!]  ; Since 1900
  
      weekday                     [integer!]  ; 0-6 since Sunday
      yearday                     [integer!]  ; 0-365
      daylight-saving-time?       [integer!]  ; Negative: unknown
  ]
  
  #either OS = 'Windows [
      #define clocks-per-second   1000
  ][
      ; CLOCKS_PER_SEC value for Syllable, Linux (XSI-conformant systems)
      ; TODO: check for other systems
      #define clocks-per-second   1000'000
  ]
  
  #import [LIBC-file cdecl [
  
      ; Error handling
  
      form-error: "strerror" [  ; Return error description.
          code            [integer!]
          return:         [c-string!]
      ]
      print-error: "perror" [  ; Print error to standard error output.
          string          [c-string!]
      ]
  
  
      ; Memory management
  
      make: "calloc" [  ; Allocate zero-filled memory.
          chunks          [size!]
          size            [size!]
          return:         [binary!]
      ]
      resize: "realloc" [  ; Resize memory allocation.
          memory          [binary!]
          size            [size!]
          return:         [binary!]
      ]
   ]
   
   JVM!: alias struct! [
      reserved0                   [int-ptr!]
      reserved1                   [int-ptr!]
      reserved2                   [int-ptr!]
      
      DestroyJavaVM               [function! [[JNICALL] vm [JVM-ptr!] return: [jint!]]]
      AttachCurrentThread         [function! [[JNICALL] vm [JVM-ptr!] penv [struct! [p [int-ptr!]]] args [byte-ptr!] return: [jint!]]]
      DetachCurrentThread         [function! [[JNICALL] vm [JVM-ptr!] return: [jint!]]]
      GetEnv                      [function! [[JNICALL] vm [JVM-ptr!] penv [struct! [p [int-ptr!]]] version [integer!] return: [jint!]]]
      AttachCurrentThreadAsDaemon [function! [[JNICALL] vm [JVM-ptr!] penv [struct! [p [int-ptr!]]] args [byte-ptr!] return: [jint!]]]
  ]
  
   ;just some datatypes for testing:
   
   #some-hash
   10-1-2013
   quit
   
   ;binary:
   #{00FF0000}
   #{00FF0000 FF000000}
   #{00FF0000	FF000000} ;with tab instead of space
   2#{00001111}
   64#{/wAAAA==}
   64#{/wAAA A==} ;with space	 inside
   64#{/wAAA	A==} ;with tab inside
   
   
   ;string with char
   {bla ^(ff) foo}
   {bla ^(( foo}
   ;some numbers:
   12
   1'000
   1.2
   FF00FF00h
   
   ;some tests of hexa number notation with not common ending
   [ff00h ff00h] ff00h{} FFh"foo" 00h(1 + 2) (AEh)
  
  ;normal words:
  foo char
  
  ;get-word
  :foo
   
  ;lit-word:
  'foo 'foo
  
  to-integer foo
  foo/(a + 1)/b
  
  call/output reform ['which interpreter] path: copy ""
  
   version-1.1:   00010001h
   
   #if type = 'exe [
      push system/stack/frame                 ;-- save previous frame pointer
      system/stack/frame: system/stack/top    ;-- @@ reposition frame pointer just after the catch flag
  ]
  push CATCH_ALL                              ;-- exceptions root barrier
  push 0                                      ;-- keep stack aligned on 64-bit

githubLanguage Red
 fileExtensions red reds
 trendingProjectsCount 0
 type programming
 aceMode text
 tmScope source.red
 aliases red/system
 repos 453

semanticScholar 0
