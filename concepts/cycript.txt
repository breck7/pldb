Cycript
=======

Cycript is a programming language created in 2008.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222008%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 2008

#915 on PLDB
16 Years Old
70 Repos

- Tags: programming language
- There are at least 70 Cycript repos on GitHub
- Early development of Cycript happened in SaurikIT, LLC
- The  Google BigQuery Public Dataset GitHub snapshot shows 49 users using Cycript in 66 repos on GitHub
- GitHub supports syntax highlighting for Cycript
- cycript.org was registered in 2009
- Read more about Cycript on the web: 1.
 https://git.saurik.com/cycript.git 1.

(function(utils) {
	// Load C functions declared in utils.loadFuncs
	var shouldLoadCFuncs = true;
	// Expose the C functions to cycript&#39;s global scope
	var shouldExposeCFuncs = true;
	// Expose C constants to cycript&#39;s global scope
	var shouldExposeConsts = true;
	// Expose functions defined here to cycript&#39;s global scope
	var shouldExposeFuncs = true;
	// Which functions to expose
	var funcsToExpose = [&quot;exec&quot;, &quot;include&quot;, &quot;sizeof&quot;, &quot;logify&quot;, &quot;apply&quot;, &quot;str2voidPtr&quot;, &quot;voidPtr2str&quot;, &quot;double2voidPtr&quot;, &quot;voidPtr2double&quot;, &quot;isMemoryReadable&quot;, &quot;isObject&quot;, &quot;makeStruct&quot;];
	
	// C functions that utils.loadFuncs loads
	var CFuncsDeclarations = [
		// &lt;stdlib.h&gt;
		&quot;void *calloc(size_t num, size_t size)&quot;,
		// &lt;string.h&gt;
		&quot;char *strcpy(char *restrict dst, const char *restrict src)&quot;,
		&quot;char *strdup(const char *s1)&quot;,
		&quot;void* memset(void* dest, int ch, size_t count)&quot;,
		// &lt;stdio.h&gt;
		&quot;FILE *fopen(const char *, const char *)&quot;,
		&quot;int fclose(FILE *)&quot;,
		&quot;size_t fread(void *restrict, size_t, size_t, FILE *restrict)&quot;,
		&quot;size_t fwrite(const void *restrict, size_t, size_t, FILE *restrict)&quot;,
		// &lt;mach.h&gt;
		&quot;mach_port_t mach_task_self()&quot;,
		&quot;kern_return_t task_for_pid(mach_port_name_t target_tport, int pid, mach_port_name_t *tn)&quot;,
		&quot;kern_return_t mach_vm_protect(vm_map_t target_task, mach_vm_address_t address, mach_vm_size_t size, boolean_t set_maximum, vm_prot_t new_protection)&quot;,
		&quot;kern_return_t mach_vm_write(vm_map_t target_task, mach_vm_address_t address, vm_offset_t data, mach_msg_type_number_t dataCnt)&quot;,
		&quot;kern_return_t mach_vm_read(vm_map_t target_task, mach_vm_address_t address, mach_vm_size_t size, vm_offset_t *data, mach_msg_type_number_t *dataCnt)&quot;,
	];
	
	/*
		Replacement for eval that can handle @encode etc.
		
		Usage:
			cy# utils.exec(&quot;@encode(void *(int, char))&quot;)
			@encode(void*(int,char))
	*/
	utils.exec = function(str) {
		var mkdir = @encode(int (const char *, int))(dlsym(RTLD_DEFAULT, &quot;mkdir&quot;));
		var tempnam = @encode(char *(const char *, const char *))(dlsym(R

Language features
======================================================

row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Example
  /* A comment
  */
 Token /* */
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
  // A comment
 Token 
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Example
  // A comment
 Token //
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token
