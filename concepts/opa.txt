Opa
===

Opa is a programming language created in 2011.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222011%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 2011

#221 on PLDB
13 Years Old
76 Repos

git clone https://github.com/MLstate/opalang

Opa is an open-source programming language for developing scalable web applications. It can be used for both client-side and server-side scripting, where complete programs are written in Opa and subsequently compiled to Nodejs on the server and JavaScript on the client, with the compiler automating all communication between the two. Opa implements strong, static typing, which can be helpful in protecting against security issues such as SQL injections and cross-site scripting attacks. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Opa_(programming_language) Read more on Wikipedia...

- Tags: programming language
- Opa is developed on GitHub and has 1,242 stars
- There are at least 76 Opa repos on GitHub
- Early development of Opa happened in https://github.com/MLstate
- Opa is written in OCaml, JavaScript, CSS, Bourne shell, C, Diff, Lisp, Make, Bash, XML, HTML, SVG, Vim script, Markdown, Perl, QML, Java, Python, Z shell, Dockerfile
- The  Google BigQuery Public Dataset GitHub snapshot shows 50 users using Opa in 58 repos on GitHub
- Explore Opa snippets on Rosetta Code
- Pygments supports syntax highlighting for Opa
- GitHub supports syntax highlighting for Opa
- opalang.org was registered in 2010
- See also: (12 related languages) Linux, OCaml, Erlang, JavaScript, JQuery, HTML, MongoDB, PostgreSQL, SQL, Dart, Haxe, CoffeeScript

jlog(&quot;Hello World&quot;)

/**
 * To compile &amp; run on port 8080:
 * opa hello_syntax1.opa --
 */
server = Server.one_page_server(
   &quot;Hello, world&quot;,
   -&gt; (&lt;h1&gt;Hello, world&lt;/h1&gt;)
)

Server.start(Server.http,
  { title: &quot;Hello&quot;
  , page: function() { &lt;h1&gt;Hello, web!&lt;/h1&gt; }
  }
)

and as begin case client css database db do else end external forall function if import match module or package parser rec server then type val with xml_parser

Language features
======================================================

row
 Feature Binary Literals
 FeatureLink ../features/hasBinaryNumbers.html
 Supported ✓
 Example
 Token 
row
 Feature Integers
 FeatureLink ../features/hasIntegers.html
 Supported ✓
 Example
 Token 
row
 Feature Floats
 FeatureLink ../features/hasFloats.html
 Supported ✓
 Example
 Token 
row
 Feature Hexadecimals
 FeatureLink ../features/hasHexadecimals.html
 Supported ✓
 Example
 Token 
row
 Feature Octals
 FeatureLink ../features/hasOctals.html
 Supported ✓
 Example
 Token 
row
 Feature Conditionals
 FeatureLink ../features/hasConditionals.html
 Supported ✓
 Example
 Token 
row
 Feature Functions
 FeatureLink ../features/hasFunctions.html
 Supported ✓
 Example
 Token 
row
 Feature Strings
 FeatureLink ../features/hasStrings.html
 Supported ✓
 Example
  "Hello world"
 Token "
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
  /* A comment
  */
 Token 
row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Example
  /* A comment
  */
 Token /* */
row
 Feature Print() Debugging
 FeatureLink ../features/hasPrintDebugging.html
 Supported ✓
 Example
 Token jlog
row
 Feature Type Inference
 FeatureLink ../features/hasTypeInference.html
 Supported ✓
 Example
 Token 
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token
