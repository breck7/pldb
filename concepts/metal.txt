Metal
=====

Metal is a library created in 2014.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222014%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D

#447 on PLDB
10 Years Old
79 Repos

Metal is a low-level, low-overhead hardware-accelerated 3D graphic and compute shader application programming interface (API) developed by Apple Inc., and which debuted in iOS 8. Metal combines functions similar to OpenGL and OpenCL under one API. It is intended to bring to iOS, macOS, and tvOS apps some of the performance benefits of similar APIs on other platforms, such as Vulkan (which debuted in mid-February 2016) and DirectX 12. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Metal_(API)

- Metal Wikipedia page
 https://en.wikipedia.org/wiki/Metal_(API)
- There are at least 79 Metal repos on GitHub
- Metal first developed in Apple
- The  Google BigQuery Public Dataset GitHub snapshot shows 232 users using Metal in 256 repos on GitHub
- GitHub supports syntax highlighting for Metal
- See also: (7 related languages)iOS, OpenGL, OpenCL, Swift, Objective-C, LLVM IR, Unity
- 6 languages in PLDB linking to Metal: cloc, FFmpeg, Iterm2, Java, lobster, Wonkey

// Copyright 2014 Isis Innovation Limited and the authors of InfiniTAM

#include &lt;metal_stdlib&gt;

#include &quot;../../DeviceAgnostic/ITMSceneReconstructionEngine.h&quot;
#include &quot;../../DeviceAgnostic/ITMVisualisationEngine.h&quot;
#include &quot;ITMVisualisationEngine_Metal.h&quot;

using namespace metal;

kernel void genericRaycastVH_device(DEVICEPTR(Vector4f) *pointsRay                                  [[ buffer(0) ]],
                                    const CONSTPTR(ITMVoxel) *voxelData                             [[ buffer(1) ]],
                                    const CONSTPTR(typename ITMVoxelIndex::IndexData) *voxelIndex   [[ buffer(2) ]],
                                    const CONSTPTR(Vector2f) *minmaxdata                            [[ buffer(3) ]],
                                    const CONSTPTR(CreateICPMaps_Params) *params                    [[ buffer(4) ]],
                                    uint2 threadIdx                                                 [[ thread_position_in_threadgroup ]],
                                    uint2 blockIdx                                                  [[ threadgroup_position_in_grid ]],
                                    uint2 blockDim                                                  [[ threads_per_threadgroup ]])
{
    int x = threadIdx.x + blockIdx.x * blockDim.x, y = threadIdx.y + blockIdx.y * blockDim.y;
    
    if (x &gt;= params-&gt;imgSize.x || y &gt;= params-&gt;imgSize.y) return;
    
    int locId = x + y * params-&gt;imgSize.x;
    int locId2 = (int)floor((float)x / minmaximg_subsample) + (int)floor((float)y / minmaximg_subsample) * params-&gt;imgSize.x;
    
    castRay&lt;ITMVoxel, ITMVoxelIndex&gt;(pointsRay[locId], x, y, voxelData, voxelIndex, params-&gt;invM, params-&gt;invProjParams,
                                     params-&gt;voxelSizes.y, params-&gt;lightSource.w, minmaxdata[locId2]);
}

kernel void genericRaycastVGMissingPoints_device(DEVICEPTR(Vector4f) *forwardProjection                         [[ buffer(0) ]],
                                                 const CONSTPTR(int) *fwdProjMissingPoints                      [[ buffer(1) ]],
                                                 const CONSTPTR(ITMVoxel) *voxelData                            [[ buffer(2) ]],
                                                 const CONSTPTR(typename ITMVoxelIndex::IndexData) *voxelIndex  [[ buffer(3) ]],
                                                 const CONSTPTR(Vector2f) *minmaxdata                           [[ buffer(4) ]],
                                                 const CONSTPTR(CreateICPMaps_Params) *params                   [[ buffer(5) ]],
                                                 uint2 threadIdx                                                [[ thread_position_in_threadgroup ]],
                                                 uint2 blockIdx                                                 [[ threadgroup_position_in_grid ]],
                                                 uint2 blockDim                                                 [[ threads_per_threadgroup ]])
{
    int pointId = threadIdx.x + blockIdx.x * blockDim.x;
    
    if (pointId &gt;= params-&gt;imgSize.z) return;
    
    int locId = fwdProjMissingPoints[pointId];
    int y = locId / params-&gt;imgSize.x, x = locId - y * params-&gt;imgSize.x;
    int locId2 = (int)floor((float)x / minmaximg_subsample) + (int)floor((float)y / minmaximg_subsample) * params-&gt;imgSize.x;
    
    castRay&lt;ITMVoxel, ITMVoxelIndex&gt;(forwardProjection[locId], x, y, voxelData, voxelIndex, params-&gt;invM, params-&gt;invProjParams,
                                     params-&gt;voxelSizes.y, params-&gt;lightSource.w, minmaxdata[locId2]);
}

kernel void renderICP_device(const CONSTPTR(Vector4f) *pointsRay            [[ buffer(0) ]],
                             DEVICEPTR(Vector4f) *pointsMap                 [[ buffer(1) ]],
                             DEVICEPTR(Vector4f) *normalsMap                [[ buffer(2) ]],
                             DEVICEPTR(Vector4u) *outRendering              [[ buffer(3) ]],
                             const CONSTPTR(CreateICPMaps_Params) *params   [[ buffer(4) ]],
                             uint2 threadIdx                                [[ thread_position_in_threadgroup ]],
                             uint2 blockIdx                                 [[ threadgroup_position_in_grid ]],
                             uint2 blockDim                                 [[ threads_per_threadgroup ]])
{
    int x = threadIdx.x + blockIdx.x * blockDim.x, y = threadIdx.y + blockIdx.y * blockDim.y;
    
    if (x &gt;= params-&gt;imgSize.x || y &gt;= params-&gt;imgSize.y) return;
    
    processPixelICP&lt;false&gt;(outRendering, pointsMap, normalsMap, pointsRay, params-&gt;imgSize.xy, x, y, params-&gt;voxelSizes.x, TO_VECTOR3(params-&gt;lightSource));
}

kernel void renderForward_device(DEVICEPTR(Vector4u) *outRendering              [[ buffer(0) ]],
                                 const CONSTPTR(Vector4f) *pointsRay            [[ buffer(1) ]],
                                 const CONSTPTR(CreateICPMaps_Params) *params   [[ buffer(2) ]],
                                 uint2 threadIdx                                [[ thread_position_in_threadgroup ]],
                                 uint2 blockIdx                                 [[ threadgroup_position_in_grid ]],
                                 uint2 blockDim                                 [[ threads_per_threadgroup ]])
{
    int x = threadIdx.x + blockIdx.x * blockDim.x, y = threadIdx.y + blockIdx.y * blockDim.y;
    
    if (x &gt;= params-&gt;imgSize.x || y &gt;= params-&gt;imgSize.y) return;
    
    processPixelForwardRender&lt;false&gt;(outRendering, pointsRay, params-&gt;imgSize.xy, x, y, params-&gt;voxelSizes.x, TO_VECTOR3(params-&gt;lightSource));
}

kernel void forwardProject_device(DEVICEPTR(Vector4f) *forwardProjection         [[ buffer(0) ]],
                                  const CONSTPTR(Vector4f) *pointsRay            [[ buffer(1) ]],
                                  const CONSTPTR(CreateICPMaps_Params) *params   [[ buffer(2) ]],
                                  uint2 threadIdx                                [[ thread_position_in_threadgroup ]],
                                  uint2 blockIdx                                 [[ threadgroup_position_in_grid ]],
                                  uint2 blockDim                                 [[ threads_per_threadgroup ]])
{
    int x = (threadIdx.x + blockIdx.x * blockDim.x), y = (threadIdx.y + blockIdx.y * blockDim.y);
    
    if (x &gt;= params-&gt;imgSize.x || y &gt;= params-&gt;imgSize.y) return;
    
    int locId = x + y * params-&gt;imgSize.x;
    Vector4f pixel = pointsRay[locId];
    
    int locId_new = forwardProjectPixel(pixel * params-&gt;voxelSizes.x, params-&gt;M, params-&gt;projParams, params-&gt;imgSize.xy);
    if (locId_new &gt;= 0) forwardProjection[locId_new] = pixel;
}
