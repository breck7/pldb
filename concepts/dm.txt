printViewSourceBadge

DM
==

DM is a programming language created in 1994.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%221994%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 1994

#817 on PLDB
30 Years Old
2k Repos

DM is a programming language for the creation of multi-user worlds. By `world' I mean a virtual multi-media environment where people assume personae through which they interact with one another and computer-controlled objects. This could take the form of a competitive game, a role-playing adventure, a discussion board, or something we haven't even imagined.

- Tags: programming language
- There are at least 2,108 DM repos on GitHub
- Early development of DM happened in BYOND Software
- The  Google BigQuery Public Dataset GitHub snapshot shows 338 users using DM in 394 repos on GitHub
- Explore DM snippets on Rosetta Code
- GitHub supports syntax highlighting for DM
- Read more about DM on the web: 1.
 http://www.byond.com/developer 1.

mob
  verb
     smile()
        world &lt;&lt; &quot;[usr] grins.&quot;
     giggle()
        world &lt;&lt; &quot;[usr] giggles.&quot;
     cry()
        world &lt;&lt; &quot;[usr] cries \his heart out.&quot;

// This is a single line comment.
/*
	This is a multi-line comment
*/

// Pre-processor keywords

#define PI 3.1415

#if PI == 4

#define G 5

#elif PI == 3

#define I 6

#else

#define K 7

#endif

var/GlobalCounter = 0
var/const/CONST_VARIABLE = 2
var/list/MyList = list(&quot;anything&quot;, 1, new /datum/entity)
var/list/EmptyList[99] // creates a list of 99 null entries
var/list/NullList = null

/*
	Entity Class
*/

/datum/entity
	var/name = &quot;Entity&quot;
	var/number = 0

/datum/entity/proc/myFunction()
	world.log &lt;&lt; &quot;Entity has called myFunction&quot;

/datum/entity/New()
	number = GlobalCounter++

/*
	Unit Class, Extends from Entity
*/

/datum/entity/unit
	name = &quot;Unit&quot;

/datum/entity/unit/New()
	..() // calls the parent&#39;s proc; equal to super() and base() in other languages
	number = rand(1, 99)

/datum/entity/unit/myFunction()
	world.log &lt;&lt; &quot;Unit has overriden and called myFunction&quot;

// Global Function
/proc/ReverseList(var/list/input)
	var/list/output = list()
	for(var/i = input.len; i &gt;= 1; i--) // IMPORTANT: List Arrays count from 1.
		output += input[i] // &quot;+= x&quot; is &quot;.Add(x)&quot;
	return output

// Bitflags
/proc/DoStuff()
	var/bitflag = 0
	bitflag |= 8
	return bitflag

/proc/DoOtherStuff()
	var/bitflag = 65535 // 16 bits is the maximum amount
	bitflag &amp;= ~8
	return bitflag

// Logic
/proc/DoNothing()
	var/pi = PI
	if(pi == 4)
		world.log &lt;&lt; &quot;PI is 4&quot;
	else if(pi == CONST_VARIABLE)
		world.log &lt;&lt; &quot;PI is [CONST_VARIABLE]!&quot;
	else
		world.log &lt;&lt; &quot;PI is approximety [pi]&quot;

#undef PI // Undefine PI

Language features
======================================================

row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Example
  /* A comment
  */
 Token /* */
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
  // A comment
 Token 
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Example
  // A comment
 Token //
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token

printViewSource
