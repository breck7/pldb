import ../code/conceptPage.scroll

id qml
name QML
appeared 2009
tags pl
website http://qt-project.org/doc/qt-5/qmlapplications.html
standsFor Qt Modeling Language

clocExtensions qbs qml
fileType text
docs https://doc.qt.io/qt-6/qtqml-documents-topic.html
country Finland
originCommunity Qt Group plc

pygmentsHighlighter QML
 filename webmisc.py
 fileExtensions qml qbs
example
 Item {
     Rectangle {
         id: myRect
         width: 120
         height: 100
     }
     Rectangle {
         width: myRect.width
         height: 200
     }
 }

lineCommentToken //
multiLineCommentTokens /* */

hasLineComments true
 // A comment
hasComments true
 // A comment
hasMultiLineComments true
 /* A comment
 */
hasSemanticIndentation false
hasHexadecimals true
 // 0x[0-9a-fA-F]+
hasFloats true
 // [0-9][0-9]*\.[0-9]+([eE][0-9]+)?[fd]?
hasIntegers true
 // [0-9]+

wikipedia https://en.wikipedia.org/wiki/QML
 example
  MouseArea {
       onPressed: console.log("mouse button pressed")
   }
 related json javascript ring
 summary QML (Qt Modeling Language) is a user interface markup language. It is a declarative language (similar to CSS and JSON) for designing user interfaceâ€“centric applications. Inline JavaScript code handles imperative aspects. It is associated with Qt Quick, the UI creation kit originally developed by Nokia within the Qt framework. Qt Quick is often used for mobile applications where touch input, fluid animations (60 FPS) and user experience are crucial. QML is also used with Qt3D to describe a 3D scene and a "frame graph" rendering methodology. A QML document describes a hierarchical object tree. QML modules shipped with Qt include primitive graphical building blocks (e.g., Rectangle, Image), modeling components (e.g., FolderListModel, XmlListModel), behavioral components (e.g., TapHandler, DragHandler, State, Transition, Animation), and more complex controls (e.g., Button, Slider, Drawer, Menu). These elements can be combined to build components ranging in complexity from simple buttons and sliders, to complete internet-enabled programs. QML elements can be augmented by standard JavaScript both inline and via included .js files.  Elements can also be seamlessly integrated and extended by C++ components using the Qt framework. QML is the language; its JavaScript runtime is the custom V4 engine, since Qt 5.2; and Qt Quick is the 2D scene graph and the UI framework based on it. These are all part of the Qt Declarative module, while the technology is no longer called Qt Declarative. QML and JavaScript code can be compiled into native C++ binaries with the Qt Quick Compiler.  Alternatively there is a QML cache file format which stores a compiled version of QML dynamically for faster startup the next time it is run.
 pageId 28116392
 created 2010
 backlinksCount 114
 revisionCount 213
 dailyPageViews 182
 appeared 2009

githubBigQuery QML
 repos 5249
 users 4140

linguistGrammarRepo https://github.com/skozlovf/Sublime-QML
 firstCommit 2013
 lastCommit 2014
 committerCount 1
 commitCount 9
 sampleCount 1
 example
  /****************************************************************************
  **
  ** Copyright (C) 2015 The Qt Company Ltd.
  ** Contact: http://www.qt.io/licensing
  **
  ** This file is part of the Qt Build Suite.
  **
  ** Commercial License Usage
  ** Licensees holding valid commercial Qt licenses may use this file in
  ** accordance with the commercial license agreement provided with the
  ** Software or, alternatively, in accordance with the terms contained in
  ** a written agreement between you and The Qt Company. For licensing terms and
  ** conditions see http://www.qt.io/terms-conditions. For further information
  ** use the contact form at http://www.qt.io/contact-us.
  **
  ** GNU Lesser General Public License Usage
  ** Alternatively, this file may be used under the terms of the GNU Lesser
  ** General Public License version 2.1 or version 3 as published by the Free
  ** Software Foundation and appearing in the file LICENSE.LGPLv21 and
  ** LICENSE.LGPLv3 included in the packaging of this file.  Please review the
  ** following information to ensure the GNU Lesser General Public License
  ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
  ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
  **
  ** In addition, as a special exception, The Qt Company gives you certain additional
  ** rights.  These rights are described in The Qt Company LGPL Exception
  ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
  **
  ****************************************************************************/
  
  import qbs 1.0
  import qbs.FileInfo
  import qbs.ModUtils
  
  Module {
      property string buildVariant: "debug"
      property bool enableDebugCode: buildVariant == "debug"
      property bool debugInformation: (buildVariant == "debug")
      property string optimization: (buildVariant == "debug" ? "none" : "fast")
      readonly property stringList hostOS: undefined // set internally
      property string hostOSVersion: {
          if (hostOS && hostOS.contains("osx")) {
              return getNativeSetting("/System/Library/CoreServices/ServerVersion.plist", "ProductVersion") ||
                     getNativeSetting("/System/Library/CoreServices/SystemVersion.plist", "ProductVersion");
          } else if (hostOS && hostOS.contains("windows")) {
              var version = getNativeSetting("HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion", "CurrentVersion");
              return version + "." + hostOSBuildVersion;
          }
      }
  
      property string hostOSBuildVersion: {
          if (hostOS.contains("osx")) {
              return getNativeSetting("/System/Library/CoreServices/ServerVersion.plist", "ProductBuildVersion") ||
                     getNativeSetting("/System/Library/CoreServices/SystemVersion.plist", "ProductBuildVersion");
          } else if (hostOS.contains("windows")) {
              return getNativeSetting("HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion", "CurrentBuildNumber");
          }
      }
  
      readonly property var hostOSVersionParts: hostOSVersion ? hostOSVersion.split('.').map(function(item) { return parseInt(item, 10); }) : []
      readonly property int hostOSVersionMajor: hostOSVersionParts[0] || 0
      readonly property int hostOSVersionMinor: hostOSVersionParts[1] || 0
      readonly property int hostOSVersionPatch: hostOSVersionParts[2] || 0
  
      property stringList targetOS: hostOS
      property string pathListSeparator: hostOS.contains("windows") ? ";" : ":"
      property string pathSeparator: hostOS.contains("windows") ? "\\" : "/"
      property string profile
      property stringList toolchain
      property string architecture
      property bool install: false
      property string installSourceBase
      readonly property string installRoot: undefined
      property string installDir
      property string installPrefix: ""
      property path sysroot
  
      PropertyOptions {
          name: "buildVariant"
          allowedValues: ['debug', 'release']
          description: "name of the build variant"
      }
  
      PropertyOptions {
          name: "optimization"
          allowedValues: ['none', 'fast', 'small']
          description: "optimization level"
      }
  
      validate: {
          var validator = new ModUtils.PropertyValidator("qbs");
          validator.setRequiredProperty("architecture", architecture,
                                        "you might want to re-run 'qbs-setup-toolchains'");
          validator.setRequiredProperty("hostOS", hostOS);
          validator.setRequiredProperty("targetOS", targetOS);
          if (hostOS && (hostOS.contains("windows") || hostOS.contains("osx"))) {
              validator.setRequiredProperty("hostOSVersion", hostOSVersion,
                                            "could not detect host operating system version; " +
                                            "verify that system files and registry keys have not " +
                                            "been modified.");
              if (hostOSVersion)
                  validator.addVersionValidator("hostOSVersion", hostOSVersion, 2, 4);
  
              validator.setRequiredProperty("hostOSBuildVersion", hostOSBuildVersion,
                                            "could not detect host operating system build version; " +
                                            "verify that system files or registry have not been " +
                                            "tampered with.");
          }
  
          validator.addCustomValidator("architecture", architecture, function (value) {
              return architecture === canonicalArchitecture(architecture);
          }, "'" + architecture + "' is invalid. You must use the canonical name '" +
          canonicalArchitecture(architecture) + "'");
  
          validator.validate();
      }
  
      // private properties
      property var commonRunEnvironment: {
          var env = {};
          if (targetOS.contains("windows")) {
              env["PATH"] = [
                  FileInfo.joinPaths(installRoot, installPrefix)
              ];
          } else if (hostOS.contains("darwin") && targetOS.contains("darwin")) {
              env["DYLD_FRAMEWORK_PATH"] = [
                  FileInfo.joinPaths(installRoot, installPrefix, "Library", "Frameworks"),
                  FileInfo.joinPaths(installRoot, installPrefix, "lib"),
                  FileInfo.joinPaths(installRoot, installPrefix)
              ].join(pathListSeparator);
  
              env["DYLD_LIBRARY_PATH"] = [
                  FileInfo.joinPaths(installRoot, installPrefix, "lib"),
                  FileInfo.joinPaths(installRoot, installPrefix, "Library", "Frameworks"),
                  FileInfo.joinPaths(installRoot, installPrefix)
              ].join(pathListSeparator);
  
              if (targetOS.contains("ios-simulator") && sysroot) {
                  env["DYLD_ROOT_PATH"] = [sysroot];
              }
          } else if (hostOS.contains("unix") && targetOS.contains("unix")) {
              env["LD_LIBRARY_PATH"] = [
                  FileInfo.joinPaths(installRoot, installPrefix, "lib")
              ];
          }
  
          return env;
      }
  
      // internal properties
      readonly property string version: [versionMajor, versionMinor, versionPatch].join(".")
      readonly property int versionMajor: undefined // set internally
      readonly property int versionMinor: undefined // set internally
      readonly property int versionPatch: undefined // set internally
  }
  

githubLanguage QML
 fileExtensions qml qbs
 trendingProjects
  author name avatar url language languageColor stars forks currentPeriodStars description
  Swordfish90 cool-retro-term https://github.com/Swordfish90.png https://github.com/Swordfish90/cool-retro-term QML #44a51c 11081 489 197 "A good looking terminal emulator which mimics the old cathode display..."
 trendingProjectsCount 2
 type programming
 aceMode text
 tmScope source.qml
 repos 14755
