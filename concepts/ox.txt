OX
==

OX is an open source programming language created in 1996 by Jurgen A. Doornik.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%221996%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 1996
 https://pldb.io/concepts/../lists/creators.html#q=Jurgen%20A.%20Doornik Jurgen A. Doornik

#702 on PLDB
28 Years Old
58 Repos

Ox is an object-oriented matrix programming language with a mathematical and statistical function library, developed by Jurgen Doornik. It has been designed for econometric programming. It is available for Windows, Mac OS X and Linux platforms. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Ox_(programming_language) Read more on Wikipedia...

- Tags: programming language
- There are at least 58 OX repos on GitHub
- Early development of OX happened in OxMetrics Technologies
- The  Google BigQuery Public Dataset GitHub snapshot shows 12 users using OX in 19 repos on GitHub
- OX on HOPL
 https://hopl.info/showlanguage.prx?exp=2718 OX on HOPL
- GitHub supports syntax highlighting for OX
- oxmetrics.net was registered in 2002
- See also: (2 related languages) Linux, R

{Show &#39;Hello World&#39;}

nldge::ParticleLogLikeli()
{	decl it, ip,
		 mss, mbas, ms, my, mx, vw, vwi, dws,
		 mhi, mhdet, loglikeli, mData,
		 vxm, vxs, mxm=&lt;&gt;, mxsu=&lt;&gt;, mxsl=&lt;&gt;,
		 time, timeall, timeran=0, timelik=0, timefun=0, timeint=0, timeres=0;

	mData = GetData(m_asY);
	mhdet = sqrt((2*M_PI)^m_cY * determinant(m_mMSbE.^2));		// covariance determinant
	mhi   = invert(m_mMSbE.^2);					// invert covariance of measurement shocks

	ms 	  = m_vSss + zeros(m_cPar, m_cS);			// start particles
	mx 	  = m_vXss + zeros(m_cPar, m_cX);			// steady state of state and policy

	loglikeli = 0;							// init likelihood
																								//timeall=timer();
	for(it = 0; it &lt; sizer(mData); it++)
	{
		mss = rann(m_cPar, m_cSS) * m_mSSbE;			// state noise
		fg(&amp;ms, ms, mx, mss);					// transition prior as proposal
		mx = m_oApprox.FastInterpolate(ms); 			// interpolate
		fy(&amp;my, ms, mx, zeros(m_cPar, m_cMS));			// evaluate importance weights
		my -= mData[it][];					// observation error

		vw = exp(-0.5 * outer(my,mhi,&#39;d&#39;)&#39; )/mhdet;		// vw = exp(-0.5 * sumr(my*mhi .*my ) )/mhdet;

		vw = vw .== .NaN .? 0 .: vw;				// no policy can happen for extrem particles
		dws = sumc(vw);
		if(dws==0) return -.Inf;				// or extremely wrong parameters
		loglikeli += log(dws/m_cPar)	;			// loglikelihood contribution
																										//timelik += (timer()-time)/100;
																										//time=timer();
		vwi = resample(vw/dws)-1;				// selection step in c++
		ms = ms[vwi][];						// on normalized weights
		mx = mx[vwi][];
																	}
	return loglikeli;
}

Language features
======================================================

row
 Feature Strings
 FeatureLink ../features/hasStrings.html
 Supported ✓
 Example
  'Hello world'
 Token '
row
 Feature Print() Debugging
 FeatureLink ../features/hasPrintDebugging.html
 Supported ✓
 Example
 Token Show
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
  // A comment
 Token 
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Example
  // A comment
 Token //
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token
