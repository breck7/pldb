../code/conceptPage.scroll

id bluespec
name Bluespec
appeared 2000
tags pl
lab Bluespec, Inc

fileType text
country United States

multiLineCommentTokens (* *)
booleanTokens True False

hasMultiLineComments true
 (* A comment
 *)
hasComments true
 (* A comment
 *)
hasSemanticIndentation false
hasBooleans true

wikipedia https://en.wikipedia.org/wiki/Bluespec
 related haskell systemverilog
 summary Bluespec, Inc. is a semiconductor tool design company co-founded by Prof. Arvind of MIT in June 2003. Arvind had previously founded Sandburst in 2000, which specialized in producing chips for 10G-bit Ethernet routers; for this task, Arvind had developed the Bluespec language, a high-level functional hardware description programming language which was essentially Haskell extended to handle chip design and electronic design automation in general. The main designer and implementor of Bluespec was Lennart Augustsson. Bluespec is partially evaluated (to convert the Haskell parts) and compiled to the term rewriting system (TRS). It comes with a SystemVerilog frontend.Bluespec has two product lines. Primarily for ASIC and FPGA hardware designers and architects, Bluespec supplies high-level synthesis (ESL logic synthesis) with RTL.  The first Bluespec workshop [1] was held on August 13, 2007 at MIT.
 pageId 5931665
 created 2006
 backlinksCount 11
 revisionCount 33
 dailyPageViews 25
 appeared 2000

githubBigQuery Bluespec
 repos 51
 users 32

linguistGrammarRepo https://github.com/thotypous/sublime-bsv
 firstCommit 2013
 lastCommit 2015
 committerCount 2
 commitCount 12
 sampleCount 2
 example
  package TbTL;
  
  import TL::*;
  
  interface Lamp;
     method Bool changed;
     method Action show_offs;
     method Action show_ons;
     method Action reset;
  endinterface
  
  module mkLamp#(String name, Bool lamp)(Lamp);
     Reg#(Bool) prev <- mkReg(False);
  
     method changed = (prev != lamp);
  
     method Action show_offs;
        if (prev && !lamp)
        $write (name + " off, ");
     endmethod
  
     method Action show_ons;
        if (!prev && lamp)
        $write (name + " on, ");
     endmethod
  
     method Action reset;
        prev <= lamp;
     endmethod
  endmodule
  
  
  (* synthesize *)
  module mkTest();
     let dut <- sysTL;
  
     Reg#(Bit#(16)) ctr <- mkReg(0);
  
     Reg#(Bool) carN <- mkReg(False);
     Reg#(Bool) carS <- mkReg(False);
     Reg#(Bool) carE <- mkReg(False);
     Reg#(Bool) carW <- mkReg(False);
  
     Lamp lamps[12];
  
     lamps[0] <- mkLamp("0:  NS  red  ", dut.lampRedNS);
     lamps[1] <- mkLamp("1:  NS  amber", dut.lampAmberNS);
     lamps[2] <- mkLamp("2:  NS  green", dut.lampGreenNS);
     lamps[3] <- mkLamp("3:  E   red  ", dut.lampRedE);
     lamps[4] <- mkLamp("4:  E   amber", dut.lampAmberE);
     lamps[5] <- mkLamp("5:  E   green", dut.lampGreenE);
     lamps[6] <- mkLamp("6:  W   red  ", dut.lampRedW);
     lamps[7] <- mkLamp("7:  W   amber", dut.lampAmberW);
     lamps[8] <- mkLamp("8:  W   green", dut.lampGreenW);
  
     lamps[9]  <- mkLamp("9:  Ped red  ", dut.lampRedPed);
     lamps[10] <- mkLamp("10: Ped amber", dut.lampAmberPed);
     lamps[11] <- mkLamp("11: Ped green", dut.lampGreenPed);
  
     rule start (ctr == 0);
        $dumpvars;
     endrule
  
     rule detect_cars;
        dut.set_car_state_N(carN);
        dut.set_car_state_S(carS);
        dut.set_car_state_E(carE);
        dut.set_car_state_W(carW);
     endrule
  
     rule go;
        ctr <= ctr + 1;
        if (ctr == 5000) carN <= True;
        if (ctr == 6500) carN <= False;
        if (ctr == 12_000) dut.ped_button_push;
     endrule
  
     rule stop (ctr > 32768);
        $display("TESTS FINISHED");
        $finish(0);
     endrule
  
     function do_offs(l) = l.show_offs;
        function do_ons(l) = l.show_ons;
        function do_reset(l) = l.reset;
  
        function do_it(f);
           action
           for (Integer i=0; i<12; i=i+1)
              f(lamps[i]);
           endaction
        endfunction
  
        function any_changes();
           Bool b = False;
           for (Integer i=0; i<12; i=i+1)
               b = b || lamps[i].changed;
           return b;
        endfunction
  
        rule show (any_changes());
        do_it(do_offs);
        do_it(do_ons);
        do_it(do_reset);
        $display("(at time %d)", $time);
     endrule
  endmodule
  
  endpackage
  

githubLanguage Bluespec
 fileExtensions bsv
 trendingProjectsCount 0
 type programming
 aceMode verilog
 tmScope source.bsv
 repos 275
