Lasso
=====

Lasso is an open source programming language created in 1995 by Kyle Jessup.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%221995%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 1995
 https://pldb.io/concepts/../lists/creators.html#q=Kyle%20Jessup Kyle Jessup

#512 on PLDB
29 Years Old
464 Repos

Lasso is an application server and server management interface used to develop internet applications and is a general-purpose, high-level programming language. Originally a web datasource connection tool, for Filemaker and later included in Apple Computer's FileMaker 4.0 and Claris Homepage as CDML, it has since evolved into a complex language used to develop and serve large-scale internet applications and web pages. Lasso includes a simple template system allowing code to control generation of HTML and other content types. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Lasso_(programming_language) Read more on Wikipedia...

- Tags: programming language
- There are at least 464 Lasso repos on GitHub
- Early development of Lasso happened in LassoSoft Inc
- The  Google BigQuery Public Dataset GitHub snapshot shows 388 users using Lasso in 435 repos on GitHub
- Explore Lasso snippets on Rosetta Code
- Lasso appears in the TIOBE Index
- Pygments supports syntax highlighting for Lasso
- GitHub supports syntax highlighting for Lasso
- Indeed.com has 142 matches for "lasso engineer".
- lassosoft.com was registered in 2005
- See also: (17 related languages) C, Linux, Dylan, Smalltalk, Scala, HTML, PHP, Python, Java, SQL, Unicode, UTF-8, CFML, Applescript, MySQL, Eclipse, ASP

// Hello world in Lasso

Hello world!

/**
	trait_json_serialize
	Objects with this trait will be assumed to convert to json data
	when its -&gt;asString method is called
*/
define trait_json_serialize =&gt; trait {
	require asString()
}

define json_serialize(e::bytes)::string =&gt; (&#39;&quot;&#39; + (string(#e)-&gt;Replace(`\`, `\\`) &amp; Replace(&#39;\&quot;&#39;, &#39;\\&quot;&#39;) &amp; Replace(&#39;\r&#39;, &#39;\\r&#39;) &amp; Replace(&#39;\n&#39;, &#39;\\n&#39;) &amp; Replace(&#39;\t&#39;, &#39;\\t&#39;) &amp; Replace(&#39;\f&#39;, &#39;\\f&#39;) &amp; Replace(&#39;\b&#39;, &#39;\\b&#39;) &amp;) + &#39;&quot;&#39;)
define json_serialize(e::string)::string =&gt; (&#39;&quot;&#39; + (string(#e)-&gt;Replace(`\`, `\\`) &amp; Replace(&#39;\&quot;&#39;, &#39;\\&quot;&#39;) &amp; Replace(&#39;\r&#39;, &#39;\\r&#39;) &amp; Replace(&#39;\n&#39;, &#39;\\n&#39;) &amp; Replace(&#39;\t&#39;, &#39;\\t&#39;) &amp; Replace(&#39;\f&#39;, &#39;\\f&#39;) &amp; Replace(&#39;\b&#39;, &#39;\\b&#39;) &amp;) + &#39;&quot;&#39;)
define json_serialize(e::json_literal)::string =&gt; (#e-&gt;asstring)
define json_serialize(e::integer)::string =&gt; (#e-&gt;asstring)
define json_serialize(e::decimal)::string =&gt; (#e-&gt;asstring)
define json_serialize(e::boolean)::string =&gt; (#e-&gt;asstring)
define json_serialize(e::null)::string =&gt; (&#39;null&#39;)
define json_serialize(e::date)::string =&gt; (&#39;&quot;&#39; + #e-&gt;format(#e-&gt;gmt ? &#39;%QT%TZ&#39; | &#39;%Q%T&#39;) + &#39;&quot;&#39;)
/*
define json_serialize(e::array)::string =&gt; {
	local(output) = &#39;&#39;;
	local(delimit) = &#39;&#39;;
	#e-&gt;foreach =&gt; { #output += #delimit + json_serialize(#1); #delimit = &#39;, &#39;; }
	return(&#39;[&#39; + #output + &#39;]&#39;);
}
define json_serialize(e::staticarray)::string =&gt; {
	local(output) = &#39;&#39;;
	local(delimit) = &#39;&#39;;
	#e-&gt;foreach =&gt; { #output += #delimit + json_serialize(#1); #delimit = &#39;, &#39;; }
	return(&#39;[&#39; + #output + &#39;]&#39;);
}
*/
define json_serialize(e::trait_forEach)::string =&gt; {
	local(output) = &#39;&#39;;
	local(delimit) = &#39;&#39;;
	#e-&gt;foreach =&gt; { #output += #delimit + json_serialize(#1); #delimit = &#39;, &#39;; }
	return(&#39;[&#39; + #output + &#39;]&#39;);
}
define json_serialize(e::map)::string =&gt; {
	local(output = with pr in #e-&gt;eachPair
					select json_serialize(#pr-&gt;first-&gt;asString) + &#39;: &#39; + json_serialize(#pr-&gt;second))
	return &#39;{&#39; + #output-&gt;join(&#39;,&#39;) + &#39;}&#39;
}
define json_serialize(e::json_object)::string =&gt; {
	local(output) = &#39;&#39;;
	local(delimit) = &#39;&#39;;
	#e-&gt;foreachpair =&gt; { #output += #delimit + #1-&gt;first + &#39;: &#39; + json_serialize(#1-&gt;second); #delimit = &#39;, &#39;; }
	return(&#39;{&#39; + #output + &#39;}&#39;);
}
define json_serialize(e::trait_json_serialize) =&gt; #e-&gt;asString
define json_serialize(e::any)::string =&gt; json_serialize(&#39;&lt;LassoNativeType&gt;&#39; + #e-&gt;serialize + &#39;&lt;/LassoNativeType&gt;&#39;)

// Bil Corry fixes for decoding json
define json_consume_string(ibytes::bytes) =&gt; {
	local(obytes) = bytes;
	local(temp) = 0;
	while((#temp := #ibytes-&gt;export8bits) != 34);
		#obytes-&gt;import8bits(#temp);
		(#temp == 92) ? #obytes-&gt;import8bits(#ibytes-&gt;export8bits); // Escape \
 	/while;
	local(output = string(#obytes)-&gt;unescape)
	//Replace(&#39;\\&quot;&#39;, &#39;\&quot;&#39;) &amp; Replace(&#39;\\r&#39;, &#39;\r&#39;) &amp; Replace(&#39;\\n&#39;, &#39;\n&#39;) &amp; Replace(&#39;\\t&#39;, &#39;\t&#39;) &amp; Replace(&#39;\\f&#39;, &#39;\f&#39;) &amp; Replace(&#39;\\b&#39;, &#39;\b&#39;) &amp;;
	if(#output-&gt;BeginsWith(&#39;&lt;LassoNativeType&gt;&#39;) &amp;&amp; #output-&gt;EndsWith(&#39;&lt;/LassoNativeType&gt;&#39;));
		Protect;
			return serialization_reader(xml(#output - &#39;&lt;LassoNativeType&gt;&#39; - &#39;&lt;/LassoNativeType&gt;&#39;))-&gt;read
		/Protect;
	else( (#output-&gt;size == 16 or #output-&gt;size == 15) and regexp(`\d{8}T\d{6}Z?`, &#39;&#39;, #output)-&gt;matches)
		return date(#output, -Format=#output-&gt;size == 16?`yyyyMMdd&#39;T&#39;HHmmssZ`|`yyyyMMdd&#39;T&#39;HHmmss`)
	/if
	return #output
}

// Bil Corry fix + Ke fix
define json_consume_token(ibytes::bytes, temp::integer) =&gt; {

	local(obytes = bytes-&gt;import8bits(#temp) &amp;,
		delimit = array(9, 10, 13, 32, 44, 58, 93, 125)) // \t\r\n ,:]}

	while(#delimit !&gt;&gt; (#temp := #ibytes-&gt;export8bits))
		#obytes-&gt;import8bits(#temp)
	/while

	#temp == 125? // }
		#ibytes-&gt;marker -= 1
//============================================================================
//	Is also end of token if end of array[]
	#temp == 93? // ]
		#ibytes-&gt;marker -= 1
//............................................................................

	local(output = string(#obytes))
	#output == &#39;true&#39;?
		return true
	#output == &#39;false&#39;?
		return false
	#output == &#39;null&#39;?
		return null
	string_IsNumeric(#output)?
	return (#output &gt;&gt; &#39;.&#39;)? decimal(#output) | integer(#output)

	return #output
}

// Bil Corry fix
define json_consume_array(ibytes::bytes)::array =&gt; {
	Local(output) = array;
	local(delimit) = array( 9, 10, 13, 32, 44); // \t\r\n ,
	local(temp) = 0;
	While((#temp := #ibytes-&gt;export8bits) != 93); // ]
		If(#delimit &gt;&gt; #temp);
			// Discard whitespace
		Else(#temp == 34); // &quot;
			#output-&gt;insert(json_consume_string(#ibytes));
		Else(#temp == 91); // [
			#output-&gt;insert(json_consume_array(#ibytes));
		Else(#temp == 123); // {
			#output-&gt;insert(json_consume_object(#ibytes));
		Else;
			#output-&gt;insert(json_consume_token(#ibytes, #temp));
			(#temp == 93) ? Loop_Abort;
		/If;
	/While;
	Return(#output);
}

// Bil Corry fix
define json_consume_object(ibytes::bytes)::map =&gt; {
	Local(&#39;output&#39; = map,
		&#39;delimit&#39; = array( 9, 10, 13, 32, 44), // \t\r\n ,
		&#39;temp&#39; = 0,
		&#39;key&#39; = null,
		&#39;val&#39; = null);
	While((#temp := #ibytes-&gt;export8bits) != 125); // }
		If(#delimit &gt;&gt; #temp);
			// Discard whitespace
		Else((#key !== null) &amp;&amp; (#temp == 34)); // &quot;
			#output-&gt;insert(#key = json_consume_string(#ibytes));
			#key = null;
		Else((#key !== null) &amp;&amp; (#temp == 91)); // [
			#output-&gt;insert(#key = json_consume_array(#ibytes));
			#key = null;
		Else((#key !== null) &amp;&amp; (#temp == 123)); // {
			#output-&gt;insert(#key = json_consume_object(#ibytes));
			#key = null;
		Else((#key !== null));
			#output-&gt;insert(#key = json_consume_token(#ibytes, #temp));
			#key = null;
		Else;
			#key = json_consume_string(#ibytes);
			while(#delimit &gt;&gt; (#temp := #ibytes-&gt;export8bits));
			/while;
			#temp != 58 ? Loop_Abort;
		/If;
	/While;

	If((#output &gt;&gt; &#39;__jsonclass__&#39;) &amp;&amp; (#output-&gt;Find(&#39;__jsonclass__&#39;)-&gt;isa(&#39;array&#39;)) &amp;&amp; (#output-&gt;Find(&#39;__jsonclass__&#39;)-&gt;size &gt;= 2) &amp;&amp; (#output-&gt;Find(&#39;__jsonclass__&#39;)-&gt;First == &#39;deserialize&#39;));
		Return(#output-&gt;find(&#39;__jsonclass__&#39;)-&gt;Second-&gt;First);
	Else((#output &gt;&gt; &#39;native&#39;) &amp;&amp; (#output &gt;&gt; &#39;comment&#39;) &amp;&amp; (#output-&gt;find(&#39;comment&#39;) == &#39;http://www.lassosoft.com/json&#39;));
		Return(#output-&gt;find(&#39;native&#39;));
	/If;
	Return(#output);
}

// Bil Corry fix + Ke fix
define json_deserialize(ibytes::bytes)::any =&gt; {
	#ibytes-&gt;removeLeading(bom_utf8);

//============================================================================
//	Reset marker on provided bytes
	#ibytes-&gt;marker = 0
//............................................................................
	
	Local(temp) = #ibytes-&gt;export8bits;
	If(#temp == 91); // [
		Return(json_consume_array(#ibytes));
	Else(#temp == 123); // {
		Return(json_consume_object(#ibytes));
	else(#temp == 34) // &quot;
		return json_consume_string(#ibytes)
	/If;
}

define json_deserialize(s::string) =&gt; json_deserialize(bytes(#s))

/**! json_literal - This is a subclass of String used for JSON encoding.

	A json_literal works exactly like a string, but will be inserted directly
	rather than being encoded into JSON. This allows JavaScript elements
	like functions to be inserted into JSON objects. This is most useful
	when the JSON object will be used within a JavaScript on the local page.
	[Map: &#39;fn&#39;=Literal(&#39;function(){ ...})] =&gt; {&#39;fn&#39;: function(){ ...}}
**/
define json_literal =&gt; type {
	parent string
}

/**! json_object - This is a subclass of Map used for JSON encoding.

	An object works exactly like a map, but when it is encoded into JSON all
	of the keys will be inserted literally. This makes it easy to create a
	JavaScript object without extraneous quote marks.
	Object(&#39;name&#39;=&#39;value&#39;) =&gt; {name: &quot;value&quot;}
**/
define json_object =&gt; type {
	parent map
	public onCreate(...) =&gt; ..onCreate(:#rest or (:))
}

define json_rpccall(method::string, params=map, id=&#39;&#39;, host=&#39;&#39;) =&gt; {
	#id == &#39;&#39; ? #host = Lasso_UniqueID;
	#host == &#39;&#39; ? #host = &#39;http://localhost/lassoapps.8/rpc/rpc.lasso&#39;;
	Return(Decode_JSON(Include_URL(#host, -PostParams=Encode_JSON(Map(&#39;method&#39; = #method, &#39;params&#39; = #params, &#39;id&#39; = #id)))));
}

// Define type
define bottles_of_beer =&gt; type {

	// Define internal data
	data private bottles = 99

	// Define private methods
	private br =&gt; &#39;&lt;br/&gt;&#39;
	private s =&gt; .bottles != 1 ? &#39;s&#39; | &#39;&#39;
	
	// Generate lyrics when object represented as a string
	public asstring =&gt; {

		local(out = &#39;&#39;)
	
		// Use Lasso query syntax to generate the lyrics
	

		with n in 99 to 1 by -1 do {
			.bottles = #n
			#out +=  .bottles + &#39; bottle&#39; + .s + &#39; of beer on the wall, &#39; + .br
			#out +=  .bottles + &#39; bottle&#39; + .s + &#39; of beer; &#39; + .br
			.bottles--
			#out += &#39;Take one down, pass it around, &#39; + .br
			#out += .bottles + &#39; bottle&#39; + .s + &#39; of beer on the wall. &#39; + (.br * 2)
		}

		// Return result
		return #out
	}
}

bottles_of_beer

Language features
======================================================

row
 Feature Booleans
 FeatureLink ../features/hasBooleans.html
 Supported ✓
 Example
 Token true false
row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Example
  /* A comment
  */
 Token /* */
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Example
  // A comment
 Token //
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
 Token 
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token
