../code/conceptPage.scroll

id csp
name CSP
appeared 1978
tags pl
standsFor Communicating Sequential Processes

fileType text
docs https://aiochan.readthedocs.io/en/latest/csp.html
monaco csp
country United States
country United Kingdom
originCommunity Oxford University

example
 COPY = *[c:character; west?c → east!c]

keywords

wikipedia https://en.wikipedia.org/wiki/Communicating_sequential_processes
 related occam limbo go crystal clojure ada
 summary In computer science, communicating sequential processes (CSP) is a formal language for describing patterns of interaction in concurrent systems. It is a member of the family of mathematical theories of concurrency known as process algebras, or process calculi, based on message passing via channels. CSP was highly influential in the design of the occam programming language, and also influenced the design of programming languages such as Limbo, RaftLib, Go, Crystal, and Clojure's core.async. CSP was first described in a 1978 paper by Tony Hoare, but has since evolved substantially. CSP has been practically applied in industry as a tool for specifying and verifying the concurrent aspects of a variety of different systems, such as the T9000 Transputer, as well as a secure ecommerce system. The theory of CSP itself is also still the subject of active research, including work to increase its range of practical applicability (e.g., increasing the scale of the systems that can be tractably analyzed).
 pageId 247370
 created 2003
 backlinksCount 133
 revisionCount 456
 dailyPageViews 281
 appeared 2002

hopl https://hopl.info/showlanguage.prx?exp=795

isbndb 5
 year|publisher|title|authors|isbn13
 |Oxford, England : Oxford University Computing Laboratory, Programming Research Group, [1988]|Two papers on CSP|A. W. Roscoe|9780902928497
 |Oxford, England : Oxford University Computing Laboratory, Programming Research Group, 1988.|The Sliding-window Protocol In Csp|K. Paliwoda and J. W. Sanders|9780902928480
 |Oxford, England : Oxford University Computing Laboratory, Programming Research Group, C1993.|Probabilities And Priorities In Timed Csp||9780902928886
 |Oxford, England : Oxford University Computing Laboratory, Programming Research Group, 1992.|A Brief History Of Timed Csp|Jim Davies and Steve Schneider|9780902928749
 |Oxford [england] : Oxford University Computing Laboratory, Programming Research Group, C1996.|The Timed Failures-stability Model For Csp|G. M. Reed and A. W. Roscoe|9780902928930

semanticScholar 21
 year|title|doi|citations|influentialCitations|authors|paperId
 1986|The Quest Goes on: A Survey of Proofsystems for Partial Correctness of CSP|10.1007/BFb0027044|45|0|J. Hooman and W. P. Roever|f752804133a4e5014f6485aa9cdfeaa33d30e8de
 2006|A Reasoning Method for Timed CSP Based on Constraint Solving|10.1007/11901433_19|43|1|J. Dong and Ping Hao and Jun Sun and Xian Zhang|63b5fdc9db311e527efb6bdc613db7b02b1ac304
 1991|Embedding as a Tool for Language Comparison: On the CSP Hierarchy|10.1007/3-540-54430-5_85|27|1|F. S. Boer and C. Palamidessi|e5cf0ff98d509e90ba5d1bf39488815c5aba5a85
 2004|Practical Application of CSP and FDR to Software Design|10.1007/11423348_9|20|2|Jonathan Lawrence|3dd4308be86507c6154cc7033ea8b4866746ff78
 2008|A CSP Model for Mobile Channels|10.3233/978-1-58603-907-3-17|20|1|P. Welch and F. Barnes|71201fc33539bab1ed70b50fba8bc39f59436e75
 2003|Bridging CSP and C++ with selective formalism and executable specifications|10.1109/MEMCOD.2003.1210108|18|0|W. B. Gardner|8ea78309dbdde85ea68f91bdb8d4040f5046e71f
 2009|CSP as a Domain-Specific Language Embedded in Python and Jython|10.3233/978-1-60750-065-0-293|15|0|S. Mount and Mohammad Hammoudeh and Sam Wilson and R. Newman|4cfaf832b2ba26b30a584a5055361de505d6d5b8
 2011|Verification of Distributed Embedded Real-Time Systems and their Low-Level Implementations Using Timed CSP|10.1109/APSEC.2011.52|13|1|B. Bartels and S. Glesner|00612e04938e115ece447f8961aff0d5b4fcc1ba
 1987|A programming environment for CSP|10.1145/24208.24213|13|1|N. Delisle and M. Schwartz|8a67620f9eabbb7a91c7c426e99af616dd45849f
 2005|Converging CSP specifications and C++ programming via selective formalism|10.1145/1067915.1067919|13|0|W. B. Gardner|1fbb2ae9bfd1f8f8f8361c4d7d92508ab16133db
 1997|Designing reusable software components following the CSP distributed programming model|10.1109/PDSE.1997.596837|5|0|J. M. Mantas and A. Palma|f0291b9e835111956f6fbcdbe6e30a195218d582
 2012|An Analytical and Experimental Comparison of CSP Extensions and Tools|10.1007/978-3-642-34281-3_27|4|0|Ling Shi and Yang Liu and Jun Sun and J. Dong and Gustavo Carvalho|4374e617864948df9a7ce03b5f4ffda3d7594421
 2015|Mobile CSP|10.1007/978-3-319-29473-5_3|4|1|J. Woodcock and A. Wellings and A. Cavalcanti|71cdb631ce5b4e9d8efc52896362547a4a055490
 2008|Converting scenarios to CSP traces with Mise en Scene for requirements-based programming|10.1007/s11334-007-0041-0|4|0|J. Carter and W. B. Gardner|d12658ffa5c582756136fc324e0bbe3364808491
 2011|CSP as a Coordination Language|10.1007/978-3-642-21464-6_5|4|0|Moritz Kleine|c6817f27cbdff3ad7186f137220491a5dfbe5b71
 2010|Unfolding CSP|10.1007/978-1-84882-912-1_10|3|0|M. Bundgaard and R. Milner|d11c09b7c43198f994fd6a0670e2cdede4d51707
 2013|A Verified Protocol to Implement Multi-way Synchronisation and Interleaving in CSP|10.1007/978-3-642-40561-7_4|3|0|M. Oliveira and Ivan Soares de Medeiros Júnior and J. Woodcock|2f0c9d5a4afbadb9e26818311fd56ae468eebec0
 2011|Development of an ML-based Verification Tool for Timed CSP Processes|10.3233/978-1-60750-774-1-363|2|0|T. Yamakawa and T. Ohashi and C. Fukunaga|176d88c154cd18cd6a7ec6ed3be5ca5d7cd13461
 2007|Mise en Scene: Converting Scenarios to CSP Traces in Support of Requirements-Based Programming|10.1109/SEW.2007.104|2|0|J. Carter and W. B. Gardner|363989b6ae3f6191dfea00fbc24e0c6cd6b3944a
 1995|Tools for teaching CCRs, monitors, and CSP concurrent programming concepts|10.1145/201998.202008|1|0|R. Olsson and Carole M. McNamee|bf4178c1fa36ea3d87ede0d1960c41582c1670b1
 2017|CSP for Parallelising Brzozowski's DFA Construction Algorithm|10.1142/9789813148208_0010|1|0|Tinus Strauss and B. Watson and D. Kourie and L. Cleophas|528fadf6dff50aef434ed6a4d2ff4f884d9830ef

goodreads
 title|year|author|goodreadsId|rating|ratings|reviews
 Csp: A Developer's Guide|1992|Shashi Malik|5518824|0.0|0|0
 CSP as a Coordination Language||Kleine Moritz|51931033|0.0|0|0
