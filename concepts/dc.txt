Dc
==

Dc, aka desk calculator, is a programming language created in 1978.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%221978%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 1978

#905 on PLDB
46 Years Old

dc (desk calculator) is a cross-platform reverse-polish calculator which supports arbitrary-precision arithmetic. It is one of the oldest Unix utilities, predating even the invention of the C programming language. Like other utilities of that vintage, it has a powerful set of features but terse syntax. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Dc_(computer_program) Read more on Wikipedia...

- Tags: programming language
- Early development of Dc happened in Bell Labs
- Explore Dc snippets on Rosetta Code
- Dc on HOPL
 https://hopl.info/showlanguage.prx?exp=1957 Dc on HOPL
- See also: (3 related languages) Reverse Polish notation, Unix, C

[Hello, world!] p

[Hello World
]n

#!/usr/bin/perl

my ($g,$e,$m) = map { &quot;\U$_&quot; } @ARGV;
die &quot;$0 gen exp mod\n&quot; unless $m;

print `echo $g $e $m | dc -e &#39;
# Hex input and output
16dio
# Read m, e and g from stdin on one line
?SmSeSg

# Function z: return g * top of stack
[lg*]sz

# Function Q: remove the top of the stack and return 1
[sb1q]sQ

# Function X(e): recursively compute g^e % m
# It is the same as Sm^Lm%, but handles arbitrarily large exponents.
# Stack at entry: e
# Stack at exit: g^e % m
# Since e may be very large, this uses the property that g^e % m ==
#	if( e == 0 )
#		return 1
#	x = (g^(e/2)) ^ 2
#	if( e % 2 == 1 )
#		x *= g
#	return x %
[
	d 0=Q		# return 1 if e==0 (otherwise, stack: e)
	d 2% Sa		# Store e%2 in a (stack: e)
	2/		# compute e/2
	lXx		# call X(e/2)
	d*		# compute X(e/2)^2
	La1=z		# multiply by g if e%2==1
	lm %		# compute (g^e) % m
] SX

le	# Load e from the register
lXx	# compute g^e % m
p	# Print the result
&#39;`;

Language features
======================================================

row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
  # A comment
 Token 
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Example
  # A comment
 Token #
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token

View source
