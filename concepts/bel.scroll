import ../code/conceptPage.scroll

id bel
name Bel
appeared 2019
creators Paul Graham
tags pl
website http://paulgraham.com/bel.html

related arc
docs https://sep.yimg.com/ty/cdn/paulgraham/bellanguage.txt?t=1595850613&
country United States

example
 ; Bel in Bel. 9 October 2019, 9:14 GMT
 (def no (x)
   (id x nil))
 (def atom (x)
   (no (id (type x) 'pair)))
 (def all (f xs)
   (if (no xs)      t
       (f (car xs)) (all f (cdr xs))
                    nil))
 (def some (f xs)
   (if (no xs)      nil
       (f (car xs)) xs
                    (some f (cdr xs))))
 (def reduce (f xs)
   (if (no (cdr xs))
       (car xs)
       (f (car xs) (reduce f (cdr xs)))))
 (def cons args
   (reduce join args))
 (def append args
   (if (no (cdr args)) (car args)
       (no (car args)) (apply append (cdr args))
                       (cons (car (car args))
                             (apply append (cdr (car args))
                                           (cdr args)))))

lineCommentToken ;
printToken prn

hasLineComments true
 ; A comment
hasComments true
 ; A comment
hasPrintDebugging true
hasPairs true
 (foo . bar)
hasSymbols true
 foo
hasCharacters true
 \p
 ; Characters that aren't letters may have longer names. For example the bell character, after which Bel is named, is
 \bel
hasLists true
 ; here is a list of a, b, and c:
 (a . (b . (c . nil)))
 ; can be written as
 (a b c)
hasCaseInsensitiveIdentifiers false
hasStreams true
hasExpressions true
 (+ 1 2)
hasFunctions true
 (fn (x) (+ x 1))
hasBooleans true
 ; The symbol nil represents falsity as well as the empty list.
 ; The symbol t is the default representation for truth, but any object other than nil also counts as true.
hasStrings true
 (\h \e \l \l \o)
 ; can also be represented as
 "hello"
hasSemanticIndentation false
hasMacros true
 ; A macro is essentially a function that generates code. I would have
 ; liked the first example of a macro to be something simpler, but fn
 ; is the one we need first. So I'll introduce macros using a simpler
 ; macro that isn't part of Bel, then explain fn.
 ; Here is a very simple macro:
 (mac nilwith (x)
   (list 'cons nil x))
