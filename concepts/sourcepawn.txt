SourcePawn
==========

SourcePawn is an open source programming language created in 2014.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222014%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 2014

#478 on PLDB
10 Years Old
8k Repos

git clone https://github.com/alliedmodders/sourcepawn

A small, statically typed scripting language.

- Tags: programming language
- SourcePawn is developed on GitHub and has 358 stars
- There are at least 7,547 SourcePawn repos on GitHub
- Early development of SourcePawn happened in AlliedModders LLC
- SourcePawn is written in C++, Pascal, PHP, C#, C, Python, Markdown, YAML, XML, Ini, Bourne shell, SQL, CSS, JavaScript
- The  Google BigQuery Public Dataset GitHub snapshot shows 7k users using SourcePawn in 9k repos on GitHub
- Pygments supports syntax highlighting for SourcePawn
- GitHub supports syntax highlighting for SourcePawn

/* Fixed point arithmetic
 *
 * (c) Copyright 1998-2011, ITB CompuPhase
 * This file is provided as is (no warranties).
 */
#pragma library Fixed

const fround_method: {
  fround_round = 0,
  fround_floor,
  fround_ceil,
  fround_tozero,
  fround_unbiased
}

native Fixed:fixed(value);
native Fixed:strfixed(const string[]);
native Fixed:fmul(Fixed:oper1, Fixed:oper2);
native Fixed:fdiv(Fixed:dividend, Fixed:divisor);
native Fixed:ffract(Fixed:value);
native       fround(Fixed:value, fround_method:method=fround_round);
native Fixed:fpower(Fixed:value, exponent);
native Fixed:fsqroot(Fixed:value);
native Fixed:fabs(Fixed:value);

#pragma rational Fixed(3)

/* user defined operators */
native Fixed:operator*(Fixed:oper1, Fixed:oper2) = fmul;
native Fixed:operator/(Fixed:oper1, Fixed:oper2) = fdiv;
native Fixed:operator=(oper) = fixed;

stock Fixed:operator++(Fixed:oper)
    return oper + fixed(1);

stock Fixed:operator--(Fixed:oper)
    return oper - fixed(1);

stock Fixed:operator*(Fixed:oper1, oper2)
    return Fixed: (_:oper1 * oper2);            /* &quot;*&quot; is commutative */

stock Fixed:operator/(Fixed:oper1, oper2)
    return oper1 / fixed(oper2);

stock Fixed:operator/(oper1, Fixed:oper2)
    return fdiv(fixed(oper1), oper2);

stock Fixed:operator+(Fixed:oper1, oper2)
    return oper1 + fixed(oper2);                /* &quot;+&quot; is commutative */

stock Fixed:operator-(Fixed:oper1, oper2)
    return oper1 - fixed(oper2);

stock Fixed:operator-(oper1, Fixed:oper2)
    return fixed(oper1) - oper2;

stock bool:operator&gt;(Fixed:oper1, oper2)
    return oper1 &gt; fixed(oper2);

stock bool:operator&gt;(oper1, Fixed:oper2)
    return fixed(oper1) &gt; oper2;

stock bool:operator&gt;=(Fixed:oper1, oper2)
    return oper1 &gt;= fixed(oper2);

stock bool:operator&gt;=(oper1, Fixed:oper2)
    return fixed(oper1) &gt;= oper2;

stock bool:operator&lt;(Fixed:oper1, oper2)
    return oper1 &lt; fixed(oper2);

stock bool:operator&lt;(oper1, Fixed:oper2)
    return fixed(oper1) &lt; oper2;

stock bool:operator&lt;=(Fixed:oper1, oper2)
    return oper1 &lt;= fixed(oper2);

stock bool:operator&lt;=(oper1, Fixed:oper2)
    return fixed(oper1) &lt;= oper2;

stock bool:operator==(Fixed:oper1, oper2)       /* &quot;==&quot; is commutative */
    return oper1 == fixed(oper2);

stock bool:operator!=(Fixed:oper1, oper2)       /* &quot;!=&quot; is commutative */
    return oper1 != fixed(oper2);

/* forbidden operations */
forward operator%(Fixed:oper1, Fixed:oper2);
forward operator%(Fixed:oper1, oper2);
forward operator%(oper1, Fixed:oper2);

Language features
======================================================

row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Example
 Token 
row
 Feature Integers
 FeatureLink ../features/hasIntegers.html
 Supported ✓
 Example
 Token 
row
 Feature Floats
 FeatureLink ../features/hasFloats.html
 Supported ✓
 Example
 Token 
row
 Feature Hexadecimals
 FeatureLink ../features/hasHexadecimals.html
 Supported ✓
 Example
 Token 
row
 Feature Octals
 FeatureLink ../features/hasOctals.html
 Supported ✓
 Example
 Token 
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
  /* A comment
  */
 Token 
row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Example
  /* A comment
  */
 Token /* */
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token

View source
