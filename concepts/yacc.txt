Yacc
====

Yacc, aka Yet Another Compiler-Compiler, is a grammar language created in 1975 by Stephen C. Johnson.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%221975%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D
 https://pldb.io/concepts/../lists/creators.html#q=Stephen%20C.%20Johnson

#93 on PLDB
49 Years Old
11k Repos

Yacc (Yet Another Compiler-Compiler) is a computer program for the Unix operating system. It is a Look Ahead Left-to-Right (LALR) parser generator, generating a parser, the part of a compiler that tries to make syntactic sense of the source code, specifically a LALR parser, based on an analytic grammar written in a notation similar to Backus–Naur Form (BNF). Yacc itself used to be available as the default parser generator on most Unix systems, though it has since been supplanted as the default by more recent, largely compatible, programs.. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Yacc

- Yacc Wikipedia page
 https://en.wikipedia.org/wiki/Yacc
- Yacc docs
 https://pubs.opengroup.org/onlinepubs/009604599/utilities/yacc.html
- There are at least 11,041 Yacc repos on GitHub
- Yacc is written in C
- The  Google BigQuery Public Dataset GitHub snapshot shows 10k users using Yacc in 14k repos on GitHub
- Yacc on HOPL
 https://hopl.info/showlanguage.prx?exp=704
- Yacc appears in the TIOBE Index
- GitHub supports syntax highlighting for Yacc
- See also: (13 related languages)Unix, B, C, Bison, OCaml, RATFOR, Ada, Pascal, Java, Python, Ruby, Go, Common Lisp
- Read more about Yacc on the web: 1.
 https://github.com/babyraging/yash
- 63 languages in PLDB linking to Yacc: Ad-hoc, ana, aplette, Bash, beef-lang, Blox, Boomerang Decompiler, C3, Carbon, Chapel, Click, cor, Crema, Cryptol, duro, eC, Eiffel, Fancy, Filebench WML, FLEX, Frege, Futhark, GAP, haste, HHVM, hobbes, invokator, JFlex, Jison, jq, JSON Query Language, kitlang, Koka, latino, Lemon, Linux, mgmt, Mudlle, NCAR Command Language, nesC, never, Open Shading Language, OpenComal, orca, Parsers, Perl, PHP, GNU Poke, PostgreSQL, Potion, PROMETHEUS, PureScript, RamdaScript, Recfiles, RicScript, Ruby, shill, Slony, solid, Streem, t2b, VSXu, YARA

%{
/*
 * Test program: Advanced Calculator
 * by Zhao Cheng 5/20/2012
 */
%}

%union {
    double val;    /* For returning numbers.  */
    symrec *tptr;  /* For returning symbol-table pointers.  */
}

%token &lt;val&gt; NUMBER
%token &lt;tptr&gt; VAR FNCT

%right &#39;=&#39;
%left &#39;+&#39; &#39;-&#39;
%left &#39;*&#39; &#39;/&#39;
%right &#39;^&#39;
%left NEG

%type &lt;val&gt; expression

%{
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;math.h&gt;
#include &quot;calc.h&quot;  /* Contains definition of `symrec&#39;.  */
%}

%%

statement
    : /* empty */ { exit(0); }
    | expression { printf(&quot;= %f\n&quot;, $1); }
    ;

expression
    : NUMBER { $ = $1; }
    | VAR    { $ = $1-&gt;value.var; }
    | VAR &#39;=&#39; expression        { $ = $3; $1-&gt;value.var = $3; }
    | FNCT &#39;(&#39; expression &#39;)&#39;   { $ = (*($1-&gt;value.fnctptr))($3); }
    | expression &#39;*&#39; expression { $ = $1 * $3; }
    | expression &#39;/&#39; expression { $ = $1 / $3; }
    | expression &#39;+&#39; expression { $ = $1 + $3; }
    | expression &#39;-&#39; expression { $ = $1 - $3; }
    | expression &#39;^&#39; expression { $ = pow($1, $3); }
    | &#39;-&#39; expression %prec NEG  { $ = -$2; }
    | &#39;(&#39; expression &#39;)&#39;        { $ = $2; }
    ;

%%
struct init
{
    char const *fname;
    double (*fnct) (double);
};
struct init const arith_fncts[] =
{
    &quot;sin&quot;   , sin   ,
    &quot;asin&quot;  , asin  ,
    &quot;cos&quot;   , cos   ,
    &quot;acos&quot;  , acos  ,
    &quot;tan&quot;   , tan   ,
    &quot;atan&quot;  , atan  ,
    &quot;ceil&quot;  , ceil  ,
    &quot;floor&quot; , floor ,
    &quot;abs&quot;   , fabs  ,
    &quot;ln&quot;    , log   ,
    &quot;log&quot;   , log10 ,
    &quot;lg&quot;    , log2  ,
    &quot;exp&quot;   , exp   ,
    &quot;sqrt&quot;  , sqrt  ,
    0       , 0
};
/* The symbol table: a chain of `struct symrec&#39;.  */
symrec *sym_table;
/* Put arithmetic functions in table.  */
void init_table (void)
{
    int i;
    symrec *ptr;
    for (i = 0; arith_fncts[i].fname != 0; i++) {
        ptr = putsym (arith_fncts[i].fname, FNCT);
        ptr-&gt;value.fnctptr = arith_fncts[i].fnct;
    }
}
int main()
{
    init_table();
    while (yyparse() == 0)
        ;
    return 0;
}
void yyerror(const char *msg)
{
    fprintf(stderr, &quot;Error: %s\n&quot;, msg);
}
symrec *
putsym (char const *sym_name, int sym_type)
{
  symrec *ptr;
  ptr = (symrec *) malloc (sizeof (symrec));
  ptr-&gt;name = (char *) malloc (strlen (sym_name) + 1);
  strcpy (ptr-&gt;name,sym_name);
  ptr-&gt;type = sym_type;
  ptr-&gt;value.var = 0; /* Set value to 0 even if fctn.  */
  ptr-&gt;next = (struct symrec *)sym_table;
  sym_table = ptr;
  return ptr;
}
symrec *
getsym (char const *sym_name)
{
  symrec *ptr;
  for (ptr = sym_table; ptr != (symrec *) 0;
       ptr = (symrec *)ptr-&gt;next)
    if (strcmp (ptr-&gt;name,sym_name) == 0)
      return ptr;
  return 0;
}

Language features
======================================================

row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Token /* */
 Example
  /* A comment
  */
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Token 
 Example
  // A comment
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Token //
 Example
  // A comment
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Token 
 Example
