../code/conceptPage.scroll

id agda
name Agda
appeared 2007
creators Ulf Norell and Catarina Coquand
tags pl
website http://wiki.portal.chalmers.se/agda

isOpenSource true
tryItOnline https://tio.run/#agda
clocExtensions agda lagda
fileType text
docs https://agda.readthedocs.io/en/v2.6.2.2/
rosettaCode http://www.rosettacode.org/wiki/Category:Agda
country Sweden
originCommunity Chalmers University of Technology

pygmentsHighlighter Agda
 filename haskell.py
 fileExtensions agda
leachim6 Agda
 filepath a/Agda.agda
 fileExtensions agda
 example
  module agda where
  open import IO
  
  main = run (putStrLn "Hello World")
  

lineCommentToken --
printToken putStrLn
stringToken "

hasTypedHoles true
hasLineComments true
 -- A comment
hasComments true
 -- A comment
hasPrintDebugging true
hasSemanticIndentation false
hasStrings true
 "Hello world"
hasHexadecimals true
 -- 0[xX][\da-fA-F]+
hasFloats true
 -- \d+[eE][+-]?\d+
hasIntegers true
 -- \d+
hasMultiLineComments true

wikipedia https://en.wikipedia.org/wiki/Agda_(programming_language)
 example
  data _≤_ : ℕ → ℕ → Set where
     z≤n : {n : ℕ} → zero ≤ n
     s≤s : {n m : ℕ} → n ≤ m → suc n ≤ suc m
 related coq epigram haskell idris emacs-editor unicode javascript
 summary Agda is a dependently typed functional programming language originally developed by Ulf Norell at Chalmers University of Technology with implementation described in his PhD thesis. The current version of Agda was originally known as Agda 2. The original Agda system was developed at Chalmers by Catarina Coquand in 1999. The current version is a full rewrite, which should be considered a new language that shares name and tradition. Agda is also a proof assistant based on the propositions-as-types paradigm, but unlike Coq, has no support for tactics, and proofs are written in a functional programming style. The language has ordinary programming constructs such as data types, pattern matching, records, let expressions and modules, and a Haskell-like syntax. The system has Emacs and Atom interfaces but can also be run in batch mode from the command line. Agda is based on Zhaohui Luo's Unified Theory of Dependent Types (UTT), a type theory similar to Martin-Löf type theory.
 pageId 4426773
 created 2006
 backlinksCount 64
 revisionCount 256
 dailyPageViews 102
 appeared 2007
 fileExtensions agda lagda

hopl https://hopl.info/showlanguage.prx?exp=7860

githubBigQuery Agda
 repos 207
 users 143

linguistGrammarRepo https://github.com/mokus0/Agda.tmbundle
 firstCommit 2011
 lastCommit 2014
 committerCount 2
 commitCount 6
 sampleCount 1
 example
  module NatCat where
  
  open import Relation.Binary.PropositionalEquality
  
  -- If you can show that a relation only ever has one inhabitant
  -- you get the category laws for free
  module
    EasyCategory
    (obj : Set)
    (_⟶_ : obj → obj → Set)
    (_∘_ : ∀ {x y z} → x ⟶ y → y ⟶ z → x ⟶ z)
    (id : ∀ x → x ⟶ x)
    (single-inhabitant : (x y : obj) (r s : x ⟶ y) → r ≡ s)
    where
  
    idʳ : ∀ x y (r : x ⟶ y) → r ∘ id y ≡ r
    idʳ x y r = single-inhabitant x y (r ∘ id y) r
  
    idˡ : ∀ x y (r : x ⟶ y) → id x ∘ r ≡ r
    idˡ x y r = single-inhabitant x y (id x ∘ r) r
  
    ∘-assoc : ∀ w x y z (r : w ⟶ x) (s : x ⟶ y) (t : y ⟶ z) → (r ∘ s) ∘ t ≡ r ∘ (s ∘ t)
    ∘-assoc w x y z r s t = single-inhabitant w z ((r ∘ s) ∘ t) (r ∘ (s ∘ t))
  
  open import Data.Nat
  
  same : (x y : ℕ) (r s : x ≤ y) → r ≡ s
  same .0 y z≤n z≤n = refl
  same .(suc m) .(suc n) (s≤s {m} {n} r) (s≤s s) = cong s≤s (same m n r s)
  
  ≤-trans : ∀ x y z → x ≤ y → y ≤ z → x ≤ z
  ≤-trans .0 y z z≤n s = z≤n
  ≤-trans .(suc m) .(suc n) .(suc n₁) (s≤s {m} {n} r) (s≤s {.n} {n₁} s) = s≤s (≤-trans m n n₁ r s)
  
  ≤-refl : ∀ x → x ≤ x
  ≤-refl zero = z≤n
  ≤-refl (suc x) = s≤s (≤-refl x)
  
  module Nat-EasyCategory = EasyCategory ℕ _≤_ (λ {x}{y}{z} → ≤-trans x y z) ≤-refl same
  

isbndb 4
 year|publisher|title|authors|isbn13
 2016|ACM Books|Verified Functional Programming in Agda (ACM Books)|Stump, Aaron|9781970001242
 2016|ACM Books|Verified Functional Programming in Agda (ACM Books)|Stump, Aaron|9781970001273
 20160201|Morgan & Claypool Publishers|Verified Functional Programming in Agda|Aaron Stump|9781970001266
 20160201|Morgan & Claypool Publishers|Verified Functional Programming in Agda|Aaron Stump|9781970001259

githubLanguage Agda
 fileExtensions agda
 trendingProjectsCount 0
 type programming
 aceMode text
 tmScope source.agda
 repos 2120

semanticScholar 14
 year|title|doi|citations|influentialCitations|authors|paperId
 2009|A Brief Overview of Agda - A Functional Language with Dependent Types|10.1007/978-3-642-03359-9_6|248|22|A. Bove and P. Dybjer and U. Norell|5b8b75c3049b78461e1f1eab598f4cc22ff898aa
 2011|On the bright side of type classes: instance arguments in Agda|10.1145/2034773.2034796|62|2|D. Devriese and F. Piessens|dd8bfacec46cd0fe6c0255ebec2d8f4f55fa9fc0
 2018|Programming Language Foundations in Agda|10.1007/978-3-030-03044-5_5|31|1|P. Wadler|559263fb7522805cb768a7ae0c4736d1972d9202
 2016|Verified Functional Programming in Agda|10.1145/2841316|27|1|Aaron Stump|a5c2444d3c977260dbbfc7c2eceea9bda2614e71
 2011|Integrating an Automated Theorem Prover into Agda|10.1007/978-3-642-20398-5_10|15|0|S. Foster and G. Struth|a3359b29ba67f6f950d2cdd1471d2a3b2e099c14
 2015|Pi-Ware: Hardware Description and Verification in Agda|10.4230/LIPIcs.TYPES.2015.9|11|1|J. P. P. Flor and W. Swierstra and Y. Sijsling|80a17295f94f6e5019b0846f56b62ef65153595e
 2015|Auto in Agda - Programming Proof Search Using Reflection|10.1007/978-3-319-19797-5_14|11|2|Pepijn Kokke and W. Swierstra|85f3bb9d1a14d5007674fe4917eeb279f1686a7f
 2020|Programming language foundations in Agda|10.1016/J.SCICO.2020.102440|6|0|Wen Kokke and Jeremy G. Siek and P. Wadler|bbfcb282284fae3c08db573efd84a0b280eb6f67
 2009|Embedding a logical theory of constructions in Agda|10.1145/1481848.1481857|5|0|A. Bove and P. Dybjer and Andrés Sicard-Ramírez|4eb11e41eea071024c3720cfa63002a097760efd
 2013|Dependently Typed Web Client Applications - FRP in Agda in HTML5|10.1007/978-3-642-45284-0_16|4|0|A. Jeffrey|6e588b21361d0f1d4a015e235f43397ce588c096
 2014|Case of (Quite) Painless Dependently Typed Programming: Fully Certified Merge Sort in Agda|10.1007/978-3-319-11863-5_5|2|0|Ernesto Copello and Á. Tasistro and Brunone Bianchi|ed2ecf1f4f3382c500d4979444107b49b00b0337
 2018|Formalizing Constructive Quantifier Elimination in Agda|10.4204/EPTCS.275.2|1|0|J. Pope|aa33c00f9b0175cb04208e3efa98e711ad4fd13c
 2011|Programming assurance cases in Agda|10.1145/2034773.2034794|1|0|M. Takeyama|f84dc6e52242df661da7bb499169393c05743b3b
 2022|An approach to translating Haskell programs to Agda and reasoning about them|10.48550/arXiv.2205.08718|1|0|H. Carr and Christa Jenkins and Mark Moir and Victor Cacciari Miraldo and Lisandra Silva|4f55424ebcf710cd8a46b9fad9c27f6803375835

goodreads
 title|year|author|goodreadsId|rating|ratings|reviews
 Verified Functional Programming in Agda||Aaron Stump|49396006|4.00|1|0
 Verified Functional Programming in Agda||Aaron Stump|49396007|0.0|0|0
 Programming Language Foundations in Agda||Philip Wadler|66111413|0.0|0|0
