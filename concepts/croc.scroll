../code/conceptPage.scroll

id croc
name Croc
appeared 2006
creators Jarrett Billingsley
tags pl
website https://web.archive.org/web/20120625151120/http://jfbillingsley.com/croc/
oldName minid
description Croc is a small, dynamically-typed language most closely related to Lua, with C-style syntax. Its semantics are borrowed mainly from Lua, D, Squirrel, and Io, though many other languages served as inspirations.
writtenIn cpp xml cmake markdown html css python vim-script

related minid
repoStats
 firstCommit 2006
 commits 1481
 committers 2
 files 226
 newestCommit 2017
country United States
originCommunity http://www.dsource.org/projects/minid

pygmentsHighlighter Croc
 filename d.py
 fileExtensions croc
example
 module samples.interfaces
 
 class Method
 {
     _name
     _numParams
 
     this(name: string, numParams: int)
     {
         :_name = name
         :_numParams = numParams
     }
 
     function name() =
         :_name
 
     function implements(f: function) =
         f.numParams() == :_numParams
 
     function toString() =
         "{} ({} params)".format(:_name, :_numParams)
 }
 
 class Interface
 {
     _name
     _methods
     _implementors
 
     this(name: string, methods: array)
     {
         if(!methods.all(\m -> m as Method))
             throw TypeError("All methods must be Methods")
 
         :_name = name
         :_methods = methods.dup()
         :_implementors = {}
     }
 
     function implement(T: class)
     {
         foreach(m; :_methods)
         {
             local name = m.name()
 
             if(!hasMethod(T, name) || !m.implements(T.(name)))
                 throw TypeError("Class {} does not implement method '{}' from {}".format(nameOf(T), m, :_name))
         }
 
         :_implementors[T] = true
     }
 
     function opCall(val: instance)
     {
         if(superOf(val) not in :_implementors)
             :implement(superOf(val))
 
         return true
     }
 }
 
 function implements(T: class, vararg)
 {
     for(i; 0 .. #vararg)
     {
         local p = vararg[i]
 
         if(!(p as Interface))
             throw TypeError("All varargs must be Interfaces")
 
         p.implement(T)
     }
 
     return T
 }
 
 local IStream = Interface("IStream",
 [
     Method("read", 3)
     Method("write", 3)
     Method("seek", 2)
 ])
 
 class DerpStream
 {
     function read(m, offset, size) {}
     function write(m, offset, size) {}
     function seek(offset, whence) {}
 }
 
 function streamSomething(s: @IStream)
 {
     s.read()
     writeln("yay!")
 }
 
 function main()
 {
     local d = DerpStream()
     streamSomething(d)
 }

githubRepo https://github.com/JarrettBillingsley/Croc
 stars 75
 forks 12
 subscribers 9
 created 2011
 updated 2024
 description Croc is an extensible extension language in the vein of Lua, which also wishes it were a standalone language. Also it's fun.
 issues 23

lineCommentToken //

hasLineComments true
 // A comment
hasComments true
 // A comment
hasSemanticIndentation false
hasHexadecimals true
 // 0[xX][0-9a-fA-F][0-9a-fA-F_]*
hasFloats true
 // ([0-9][0-9_]*)(?=[.eE])(\.[0-9][0-9_]*)?([eE][+\-]?[0-9_]+)?
hasIntegers true
 // ([0-9][0-9_]*)(?![.eE])
hasBinaryNumbers true
 // 0[bB][01][01_]*
hasMultiLineComments true

wikipedia https://web.archive.org/web/20190311032913/https://en.wikipedia.org/wiki/MiniD
 example
  function first(x: array|string) = x[0]
  
   writeln(first([1, 2, 3])) // prints 1
   writeln(first("hello"))   // prints h
   writeln(first(45))        // error, invalid parameter type 'int'
 related d lua squirrel python io javascript c
 summary The MiniD (has been renamed Croc) programming language is a small, lightweight, extension language in the vein of Lua or Squirrel, but designed to be used mainly with the D programming language.  It supports both object-oriented and imperative programming paradigms, as well as some simple functional aspects. Distributed under the licence of zlib/libpng, MiniD is free software.
 pageId 10965409
 created 2007
 backlinksCount 8
 revisionCount 39
 dailyPageViews 13
 appeared 2006
