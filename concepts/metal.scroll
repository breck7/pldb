../code/conceptPage.scroll

id metal
name Metal
appeared 2014
tags library

clocExtensions metal
fileType text
wordRank 1466
country United States
originCommunity Apple

wikipedia https://en.wikipedia.org/wiki/Metal_(API)
 related ios opengl opencl swift objective-c llvmir unity-engine
 summary Metal is a low-level, low-overhead hardware-accelerated 3D graphic and compute shader application programming interface (API) developed by Apple Inc., and which debuted in iOS 8. Metal combines functions similar to OpenGL and OpenCL under one API. It is intended to bring to iOS, macOS, and tvOS apps some of the performance benefits of similar APIs on other platforms, such as Vulkan (which debuted in mid-February 2016) and DirectX 12.  Metal is an object-oriented API that can be invoked using the Swift or Objective-C programming languages.  Full-blown control of the Metal framework (as well as the related MetalKit framework) is accessible via the Metal Unified Graphics and Compute Language. According to Apple promotional materials: "Metal is a C++ based programming language that developers can use to write code that is executed on the GPU for graphics and general-purpose data-parallel computations. Since Metal is based on C++, developers will find it familiar and easy to use. With Metal, both graphics and compute programs can be written with a single, unified language, which allows tighter integration between the two."
 backlinksCount 325
 pageId 43545213
 created 2014
 revisionCount 183
 dailyPageViews 475
 appeared 2014

githubBigQuery Metal
 repos 256
 users 232

linguistGrammarRepo https://github.com/textmate/c.tmbundle
 firstCommit 2005
 lastCommit 2018
 committerCount 23
 commitCount 359
 sampleCount 1
 example
  // Copyright 2014 Isis Innovation Limited and the authors of InfiniTAM
  
  #include <metal_stdlib>
  
  #include "../../DeviceAgnostic/ITMSceneReconstructionEngine.h"
  #include "../../DeviceAgnostic/ITMVisualisationEngine.h"
  #include "ITMVisualisationEngine_Metal.h"
  
  using namespace metal;
  
  kernel void genericRaycastVH_device(DEVICEPTR(Vector4f) *pointsRay                                  [[ buffer(0) ]],
                                      const CONSTPTR(ITMVoxel) *voxelData                             [[ buffer(1) ]],
                                      const CONSTPTR(typename ITMVoxelIndex::IndexData) *voxelIndex   [[ buffer(2) ]],
                                      const CONSTPTR(Vector2f) *minmaxdata                            [[ buffer(3) ]],
                                      const CONSTPTR(CreateICPMaps_Params) *params                    [[ buffer(4) ]],
                                      uint2 threadIdx                                                 [[ thread_position_in_threadgroup ]],
                                      uint2 blockIdx                                                  [[ threadgroup_position_in_grid ]],
                                      uint2 blockDim                                                  [[ threads_per_threadgroup ]])
  {
      int x = threadIdx.x + blockIdx.x * blockDim.x, y = threadIdx.y + blockIdx.y * blockDim.y;
      
      if (x >= params->imgSize.x || y >= params->imgSize.y) return;
      
      int locId = x + y * params->imgSize.x;
      int locId2 = (int)floor((float)x / minmaximg_subsample) + (int)floor((float)y / minmaximg_subsample) * params->imgSize.x;
      
      castRay<ITMVoxel, ITMVoxelIndex>(pointsRay[locId], x, y, voxelData, voxelIndex, params->invM, params->invProjParams,
                                       params->voxelSizes.y, params->lightSource.w, minmaxdata[locId2]);
  }
  
  kernel void genericRaycastVGMissingPoints_device(DEVICEPTR(Vector4f) *forwardProjection                         [[ buffer(0) ]],
                                                   const CONSTPTR(int) *fwdProjMissingPoints                      [[ buffer(1) ]],
                                                   const CONSTPTR(ITMVoxel) *voxelData                            [[ buffer(2) ]],
                                                   const CONSTPTR(typename ITMVoxelIndex::IndexData) *voxelIndex  [[ buffer(3) ]],
                                                   const CONSTPTR(Vector2f) *minmaxdata                           [[ buffer(4) ]],
                                                   const CONSTPTR(CreateICPMaps_Params) *params                   [[ buffer(5) ]],
                                                   uint2 threadIdx                                                [[ thread_position_in_threadgroup ]],
                                                   uint2 blockIdx                                                 [[ threadgroup_position_in_grid ]],
                                                   uint2 blockDim                                                 [[ threads_per_threadgroup ]])
  {
      int pointId = threadIdx.x + blockIdx.x * blockDim.x;
      
      if (pointId >= params->imgSize.z) return;
      
      int locId = fwdProjMissingPoints[pointId];
      int y = locId / params->imgSize.x, x = locId - y * params->imgSize.x;
      int locId2 = (int)floor((float)x / minmaximg_subsample) + (int)floor((float)y / minmaximg_subsample) * params->imgSize.x;
      
      castRay<ITMVoxel, ITMVoxelIndex>(forwardProjection[locId], x, y, voxelData, voxelIndex, params->invM, params->invProjParams,
                                       params->voxelSizes.y, params->lightSource.w, minmaxdata[locId2]);
  }
  
  kernel void renderICP_device(const CONSTPTR(Vector4f) *pointsRay            [[ buffer(0) ]],
                               DEVICEPTR(Vector4f) *pointsMap                 [[ buffer(1) ]],
                               DEVICEPTR(Vector4f) *normalsMap                [[ buffer(2) ]],
                               DEVICEPTR(Vector4u) *outRendering              [[ buffer(3) ]],
                               const CONSTPTR(CreateICPMaps_Params) *params   [[ buffer(4) ]],
                               uint2 threadIdx                                [[ thread_position_in_threadgroup ]],
                               uint2 blockIdx                                 [[ threadgroup_position_in_grid ]],
                               uint2 blockDim                                 [[ threads_per_threadgroup ]])
  {
      int x = threadIdx.x + blockIdx.x * blockDim.x, y = threadIdx.y + blockIdx.y * blockDim.y;
      
      if (x >= params->imgSize.x || y >= params->imgSize.y) return;
      
      processPixelICP<false>(outRendering, pointsMap, normalsMap, pointsRay, params->imgSize.xy, x, y, params->voxelSizes.x, TO_VECTOR3(params->lightSource));
  }
  
  kernel void renderForward_device(DEVICEPTR(Vector4u) *outRendering              [[ buffer(0) ]],
                                   const CONSTPTR(Vector4f) *pointsRay            [[ buffer(1) ]],
                                   const CONSTPTR(CreateICPMaps_Params) *params   [[ buffer(2) ]],
                                   uint2 threadIdx                                [[ thread_position_in_threadgroup ]],
                                   uint2 blockIdx                                 [[ threadgroup_position_in_grid ]],
                                   uint2 blockDim                                 [[ threads_per_threadgroup ]])
  {
      int x = threadIdx.x + blockIdx.x * blockDim.x, y = threadIdx.y + blockIdx.y * blockDim.y;
      
      if (x >= params->imgSize.x || y >= params->imgSize.y) return;
      
      processPixelForwardRender<false>(outRendering, pointsRay, params->imgSize.xy, x, y, params->voxelSizes.x, TO_VECTOR3(params->lightSource));
  }
  
  kernel void forwardProject_device(DEVICEPTR(Vector4f) *forwardProjection         [[ buffer(0) ]],
                                    const CONSTPTR(Vector4f) *pointsRay            [[ buffer(1) ]],
                                    const CONSTPTR(CreateICPMaps_Params) *params   [[ buffer(2) ]],
                                    uint2 threadIdx                                [[ thread_position_in_threadgroup ]],
                                    uint2 blockIdx                                 [[ threadgroup_position_in_grid ]],
                                    uint2 blockDim                                 [[ threads_per_threadgroup ]])
  {
      int x = (threadIdx.x + blockIdx.x * blockDim.x), y = (threadIdx.y + blockIdx.y * blockDim.y);
      
      if (x >= params->imgSize.x || y >= params->imgSize.y) return;
      
      int locId = x + y * params->imgSize.x;
      Vector4f pixel = pointsRay[locId];
      
      int locId_new = forwardProjectPixel(pixel * params->voxelSizes.x, params->M, params->projParams, params->imgSize.xy);
      if (locId_new >= 0) forwardProjection[locId_new] = pixel;
  }

githubLanguage Metal
 fileExtensions metal
 trendingProjectsCount 0
 type programming
 aceMode c_cpp
 codemirrorMode clike
 codemirrorMimeType text/x-c++src
 tmScope source.c++
 repos 79
