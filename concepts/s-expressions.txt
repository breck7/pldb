S-expressions
=============

S-expressions is a data notation created in 1960.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%221960%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D

#504 on PLDB
64 Years Old

In computing, s-expressions, sexprs or sexps (for "symbolic expression") are a notation for nested list (tree-structured) data, invented for and popularized by the programming language Lisp, which uses them for source code as well as data. In the usual parenthesized syntax of Lisp, an s-expression is classically defined as an atom, or an expression of the form (x . y) where x and y are s-expressions. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/S-expression

- Tags: dataNotation
- Early development of S-expressions happened in Massachusetts Institute of Technology
- ANTLR grammar for S-expressions
- See also: (10 related languages) Lisp, Scheme, C, Common Lisp, XML, Python, ISLISP, RFC, I-expressions, Bayer Expressions
- Read more about S-expressions on the web: 1.
 https://dev-docs.kicad.org/en/components/sexpr/
- 4 PLDB concepts link to S-expressions: Bayer Expressions, Liso, SUSN, Sweet Expressions

(x . y)

def parse_sexp(string):
    &quot;&quot;&quot;
    &gt;&gt;&gt; parse_sexp(&quot;(+ 5 (+ 3 5))&quot;)
    [[&#39;+&#39;, &#39;5&#39;, [&#39;+&#39;, &#39;3&#39;, &#39;5&#39;]]]
    
    &quot;&quot;&quot;
    sexp = [[]]
    word = &#39;&#39;
    in_str = False
    for char in string:
        if char is &#39;(&#39; and not in_str:
            sexp.append([])
        elif char is &#39;)&#39; and not in_str:
            if word:
                sexp[-1].append(word)
                word = &#39;&#39;
            temp = sexp.pop()
            sexp[-1].append(temp)
        elif char in (&#39; &#39;, &#39;\n&#39;, &#39;\t&#39;) and not in_str:
            if word:
                sexp[-1].append(word)
                word = &#39;&#39;
        elif char is &#39;\&quot;&#39;:
            in_str = not in_str
        else:
            word += char
    return sexp[0]
