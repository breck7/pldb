Simple Actor Language System and Architecture
=============================================

Simple Actor Language System and Architecture, aka Simple Actor Language System and Architecture, is a programming language created in 2001.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222001%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D

#1312 on PLDB
23 Years Old

The SALSA programming language (Simple Actor Language System and Architecture) is an actor-oriented programming language that uses concurrency primitives beyond asynchronous message passing, including token-passing, join, and first-class continuations. It also supports distributed computing over the Internet with universal naming, remote communication, and migration linguistic abstractions and associated middleware. For portability, it produces Java code.. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/SALSA_(programming_language)

- Simple Actor Language System and Architecture website
 http://wcl.cs.rpi.edu/salsa/
- Simple Actor Language System and Architecture Wikipedia page
 https://en.wikipedia.org/wiki/SALSA_(programming_language)
- Simple Actor Language System and Architecture first developed in Rensselaer Polytechnic Institute and University of Illinois at Urbana-Champaign
- See also: (1 related languages)Java

module demo;

 
/*
   This behavior simply prints out a string,
   reads a line from the Standard Input,
   combines the return value of the Standard Input with other strings,
   and then prints out the combined string.
*/

behavior StandardInputTest{

   public StandardInputTest() {}

   String mergeString(String str1, String str2, String str3) {
       return str1+str2+str3;
    }

   void act(String[] args) {
      standardOutput&lt;-println(&quot;What&#39;s your name?&quot;)@
      standardInput&lt;-readLine()@
      self&lt;-mergeString(&quot;Hi, &quot;,token, &quot;. Nice to meet you!&quot; )@
      standardOutput&lt;-println(token);
   }
}

Language features
======================================================

row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Token 
 Example
  /* A comment
  */
row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Token /* */
 Example
  /* A comment
  */
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Token 
 Example
