PogoScript
==========

PogoScript is an open source programming language created in 2011.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222011%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 2011

#814 on PLDB
13 Years Old
51 Repos

git clone https://github.com/featurist/pogoscript

A readable, DSL friendly programming language with excellent concurrency primitives

- Tags: programming language
- PogoScript is developed on GitHub and has 129 stars
- There are at least 51 PogoScript repos on GitHub
- Early development of PogoScript happened in https://github.com/featurist
- PogoScript is written in JavaScript, Markdown, Make, Ruby, JSON, Diff, HTML, YAML
- The  Google BigQuery Public Dataset GitHub snapshot shows 4 users using PogoScript in 12 repos on GitHub
- GitHub supports syntax highlighting for PogoScript
- pogoscript.org was registered in 2011

httpism = require &#39;httpism&#39;
async = require &#39;async&#39;
resolve = require &#39;url&#39;.resolve

exports.squash (url) ! =
    html = httpism.get ! (url).body
    squash html ! (html, url)

squash html (html, url, callback) =
    replacements = sort (links in (html).concat(scripts in (html)))
    for each @(r) in (replacements) @{ r.url = resolve(url, r.href) }
    async.map (replacements, get) @(err, requested)
        callback (err, replace (requested) in (html))

sort (replacements) =
    replacements.sort @(a, b) @{ a.index - b.index }

get (replacement) =
    replacement.body = httpism.get ! (replacement.url).body
    replacement

replace (replacements) in (html) =
    i = 0
    parts = &quot;&quot;
    for each @(rep) in (replacements)
        parts := &quot;#(parts)#(html.substring(i, rep.index))&lt;#(rep.tag)&gt;#(rep.body)&lt;/#(rep.tag)&gt;&quot;
        i := rep.index + rep.length
    
    parts + html.substr(i)

links in (html) =
    link reg = r/&lt;link\s[^&gt;]*href=[&quot;&#39;]?([^&quot;&#39;]+)[&quot;&#39;][^\&gt;]*(\/\&gt;|\&gt;\s*\&lt;\/link\&gt;)/gi
    elements in (html) matching (link reg) as &#39;style&#39;

scripts in (html) =
    script reg = r/&lt;script\s[^&gt;]*src=[&quot;&#39;]?([^&quot;&#39;]+)[&quot;&#39;][^\&gt;]*(\/\&gt;|\&gt;\s*\&lt;\/script\&gt;)/gi
    elements in (html) matching (script reg) as &#39;script&#39;

elements in (html) matching (reg) as (tag) =
    elements = []
    while (m = reg.exec (html))
        elements.push { tag = tag, index = m.index, length = m.0.length, href = m.1 }
    
    elements
