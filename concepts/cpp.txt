C++
===

C++ is an open source programming language created in 1985 by Bjarne Stroustrup.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%221985%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 1985
 https://pldb.io/concepts/../lists/creators.html#q=Bjarne%20Stroustrup Bjarne Stroustrup

#5 on PLDB
39 Years Old
2m Repos

C++ ( pronounced cee plus plus) is a general-purpose programming language. It has imperative, object-oriented and generic programming features, while also providing facilities for low-level memory manipulation. It was designed with a bias toward system programming and embedded, resource-constrained and large systems, with performance, efficiency and flexibility of use as its design highlights. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/C++ Read more on Wikipedia...

- Tags: programming language
- There are at least 2,161,625 C++ repos on GitHub
- C++ is a superset of C
- Early development of C++ happened in Bell Labs
- Recurring conference about C++: CppCon,CppCon
- The  Google BigQuery Public Dataset GitHub snapshot shows 171k users using C++ in 278k repos on GitHub
- Check out the 204 C++ meetup groups on Meetup.com.
- There are 220,359 members in the C++ subreddit
- There are 46,028 Project Euler users using C++
- In the 2021 StackOverflow developer survey C++ programmers reported a median salary of $54,049. 24% of respondents reported using C++. 20,057 programmers reported using C++, and 15,249 said they wanted to use it
- C++ is supported by the GDB
- C++ on HOPL
 https://hopl.info/showlanguage.prx?exp=1202 C++ on HOPL
- C++ ranks #4 in the TIOBE Index
- C++ Ubuntu package
 https://packages.ubuntu.com/jammy/g++ C++ Ubuntu package
- ANTLR grammar for C++
- Monaco package for syntax highlighting C++
- Pygments supports syntax highlighting for C++
- GitHub supports syntax highlighting for C++
- C++ appears in the Quine Relay project
- PLDB has 2 Jupyter Kernels for C++: github.com, github.com
- Annual Reports for C++
 https://isocpp.org/about/annual-reports Annual Reports for C++
- Events page for C++
 https://isocpp.org/blog/category/events Events page for C++
- Indeed.com has 22,237 matches for "c++ engineer".
- isocpp.org was registered in 2012
- See also: (21 related languages) Ada, ALGOL 68, C, CLU, ML, Simula, Python, C#, Chapel, D, Java, Lua, Perl, PHP, Rust, Nim, SQL, BCPL, Unix, Assembly language, Regular Expressions
- 282 PLDB concepts link to C++: Ace Editor, acorn-lang, Apache Hbase, Arduino Programming Language, ArkScript, atomspace, AviSynth, Basis Codec, Bazel, beef-lang, binaryen, Bio, BlitzMax, Boomerang Decompiler, bosque, Bucklescript, C2, C3, Calc4, candor, Cane, Cap'n Proto, Carbon, chaiscript, Chapel, Chika, chisel, chrysaLisp, Ciel, circle-lang, Ć, cityhash-hash-function, clay, Click, clike, cloc, CouchDB, Crema, Croc, Crystal, CSpydr, curv, Cyber, Dale, Dashrep, dex, dplyr, DragonBASIC, DRAKON, duro, eC, Embedded Crystal, egel, Eiffel, elena, ELFE, emerald-lang, Emojicode, Emscripten, Encore, Enso, Erlang, F Prime, Factor, Fardlang, Felix, Fern, fetlang, FFmpeg, Filebench WML, firrtl, fish, Flare, FlatBuffers, FLEX, Flow, Flow9, flua, ForthScript, G-Portugol, GAP, GCC, GNU Data Language, GN, Go, Gradle, GraphIt, gravity, groff, gura, HAL Format, Halide, harlan, hashlink, Haxe, HHVM, High Level Assembly, hobbes, Homa, H++, huginn, HuwCode, HyPhy, Ibis, ImHex, Impala, invokator, ircis, Iterm2, J, Jakt, Jank, Java, jeebox, jinx, jq, jsil-compiler, Jsonnet, Jule, Julia, Kakoune, kerf, Koka, Kotlin, ktexteditor-editor, Kuin, kumir, Ladybird, Lax, ldpl, Lean, Lesma, lift, Linux, lobster, loci, Luna, LWJGL, mal, manool, Markus, Matplotlib, MewMew, ΜC++, mdl, MicroBlocks, MicroPython, mimium, Minecraft, MiniZinc, MongoDB, MonkeyX, Mu, mun-lang, mys, neeilang, Nim, Ninja, Node.js, Numba, Nuua, ObjectScript, odin, oil, Om, onnx, ooc, oopsilon, OpenNN, Open Shading Language, orca, P*, Pawn, PAWN, Pep8, phorth, PHP, Please Build, Pony, PostgreSQL, POV-Ray SDL, PRQL, psyche-c, Pygments, Python, PyTorch, QOIR, Qore, Qt, Racket, Ragel, Rakudo, ramen, RapidBatch, Rapira, raptorjit, React Native, Real-Time Concurrent C, Redis, RetDec, Revolution, rhine, Rholang, RicScript, RigC, Ripple, ROOT, Roslyn compiler, Ruby, Rust, Savi, Scikit-learn, SciPy, score, Scroll Notation, Seq, sham, sile, Simit, Simple Binary Encoding, skip, SmallBASIC, SMC, Semantic Patch Language, Solidity, souper, SourcePawn, Spatial, Speedie, spiral, Squirrel, stacklang, Stan, Subleq, Swallow, Swift, t2b, Taichi, tamgu, tao3d, tbox-lib, TensorFlow, Terra, TestML, Textadept, tiledb, Toy, TreeSheets, Triton, tuplemarkup, txtzyme, UCL, Uno, V, v8, Vale, Vcpkg, vdscript, verona, Virgil, VSXu, Wart, WebAssembly, wasmer, Wax, whack, Wing, winxed, Wonkey, Xgboost, XGBoost, XL, xlwings-editor, xodio, Yacas, YARA, Yet Another Scripting Language, Z-flat, z2, Zeta, zl, Zot

// Type your code here, or load an example.
int square(int num) {
    return num * num;
}

#include &lt;iostream&gt;

int main() {
  std::cout &lt;&lt; &quot;Hello, world!&quot; &lt;&lt; std::endl;
  return 0;
}

#include &lt;iostream&gt;

int main()
{
   std::cout &lt;&lt; &quot;Hello World&quot; &lt;&lt; std::endl;
}

// Hello World in C++ (pre-ISO)

#include &lt;iostream.h&gt;

main()
{
    cout &lt;&lt; &quot;Hello World!&quot; &lt;&lt; endl;
    return 0;
}

#include &lt;cstdint&gt;

namespace Gui
{

}

1 #include &lt;iostream&gt;
2 #include &lt;vector&gt;
3 #include &lt;stdexcept&gt;
4
5 int main() {
6     try {
7         std::vector&lt;int&gt; vec{3, 4, 3, 1};
8         int i{vec.at(4)}; // Throws an exception, std::out_of_range (indexing for vec is from 0-3 not 1-4)
9     }
10     // An exception handler, catches std::out_of_range, which is thrown by vec.at(4)
11     catch (std::out_of_range &amp;e) {
12         std::cerr &lt;&lt; &quot;Accessing a non-existent element: &quot; &lt;&lt; e.what() &lt;&lt; &#39;\n&#39;;
13     }
14     // To catch any other standard library exceptions (they derive from std::exception)
15     catch (std::exception &amp;e) {
16         std::cerr &lt;&lt; &quot;Exception thrown: &quot; &lt;&lt; e.what() &lt;&lt; &#39;\n&#39;;
17     }
18     // Catch any unrecognised exceptions (i.e. those which don&#39;t derive from std::exception)
19     catch (...) {
20         std::cerr &lt;&lt; &quot;Some fatal error\n&quot;;
21     }
22 }

#define #defined #elif #else #endif #error #if #ifdef #ifndef #include #line #pragma #undef alignas alignof and and_eq asm atomic_cancel atomic_commit atomic_noexcept auto bitand bitor bool break case catch char char16_t char32_t class compl concept const constexpr const_cast continue decltype default delete do double dynamic_cast else enum explicit export extern false final float for friend goto if inline int import long module mutable namespace new noexcept not not_eq nullptr operator or or_eq override private protected public register reinterpret_cast requires return short signed sizeof static static_assert static_cast struct switch synchronized template this thread_local throw transaction_safe transaction_safe_dynamic true try typedef typeid typename union unsigned using virtual void volatile wchar_t while xor xor_eq

Language features
======================================================

row
 Feature Standard Library
 FeatureLink ../features/hasStandardLibrary.html
 Supported ✓
 Example
  #include 
 Token 
row
 Feature Access Modifiers
 FeatureLink ../features/hasAccessModifiers.html
 Supported ✓
 Example
 Token 
row
 Feature Exceptions
 FeatureLink ../features/hasExceptions.html
 Supported ✓
 Example
 Token 
row
 Feature Classes
 FeatureLink ../features/hasClasses.html
 Supported ✓
 Example
 Token 
row
 Feature Threads
 FeatureLink ../features/hasThreads.html
 Supported ✓
 Example
 Token 
row
 Feature Virtual function
 FeatureLink ../features/hasVirtualFunctions.html
 Supported ✓
 Example
  class Animal {
   public:
    // Intentionally not virtual:
    void Move(void) {
      std::cout ✓
 Example
  template 
  Vector& Vector::operator+=(const Vector& rhs)
  {
      for (int i = 0; i ✓
 Example
  #include 
 Token 
row
 Feature Operator Overloading
 FeatureLink ../features/hasOperatorOverloading.html
 Supported ✓
 Example
 Token 
row
 Feature Multiple Inheritance
 FeatureLink ../features/hasMultipleInheritance.html
 Supported ✓
 Example
 Token 
row
 Feature Namespaces
 FeatureLink ../features/hasNamespaces.html
 Supported ✓
 Example
  #include 
  using namespace std;
  
  // Variable created inside namespace
  namespace first
  {
    int val = 500;
  }
   
  // Global variable
  int val = 100;
  // Ways to do it: https://en.cppreference.com/w/cpp/language/namespace
  namespace ns_name { declarations }
  inline namespace ns_name { declarations }
  namespace { declarations }
  ns_name::name
  using namespace ns_name;
  using ns_name::name;
  namespace name = qualified-namespace ;
  namespace ns_name::inline(since C++20)(optional) name { declarations }
 Token 
row
 Feature Function Overloading
 FeatureLink ../features/hasFunctionOverloading.html
 Supported ✓
 Example
  // volume of a cube
  int volume(const int s) {
   return s*s*s;
  }
  // volume of a cylinder
  double volume(const double r, const int h) {
    return 3.1415926*r*r*static_cast(h);
  }
 Token 
row
 Feature Iterators
 FeatureLink ../features/hasIterators.html
 Supported ✓
 Example
  std::vector items;
  items.push_back(5);  // Append integer value '5' to vector 'items'.
  items.push_back(2);  // Append integer value '2' to vector 'items'.
  items.push_back(9);  // Append integer value '9' to vector 'items'.
  
  for (auto it = items.begin(); it != items.end(); ++it) {  // Iterate through 'items'.
    std::cout ✓
 Example
  class Foobar {
   public:
    Foobar(double r = 1.0,
           double alpha = 0.0)  // Constructor, parameters with default values.
        : x_(r * cos(alpha))    // ✓
 Example
 Token 
row
 Feature Partial Application
 FeatureLink ../features/hasPartialApplication.html
 Supported ✓
 Example
  // http://www.cplusplus.com/reference/functional/bind/
  // bind example
  #include      // std::cout
  #include    // std::bind
  
  // a function: (also works with function object: std::divides my_divide;)
  double my_divide (double x, double y) {return x/y;}
  
  struct MyPair {
    double a,b;
    double multiply() {return a*b;}
  };
  
  int main () {
    using namespace std::placeholders;    // adds visibility of _1, _2, _3,...
  
    // binding functions:
    auto fn_five = std::bind (my_divide,10,2);               // returns 10/2
    std::cout  (my_divide,_1,_2);     // returns int(x/y)
    std::cout X
 Example
 Token
