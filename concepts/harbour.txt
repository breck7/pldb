Harbour
=======

Harbour is an open source programming language created in 1999 by Antonio Linares.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%221999%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D
 https://pldb.io/concepts/../lists/creators.html#q=Antonio%20Linares

#635 on PLDB
25 Years Old
45 Repos

Harbour is a modern computer programming language, primarily used to create database/business programs. It is a modernized, open sourced and cross-platform version of the older Clipper system, which in turn developed from the dBase database market of the 1980s and 90s. Harbour code using the same databases can be compiled under a wide variety of platforms, including Microsoft Windows, Linux, Unix variants, several BSD descendants, Mac OS X, MINIX 3, Windows CE, Pocket PC, Symbian, iOS, Android, QNX, VxWorks, OS/2/eComStation, BeOS/Haiku,  AIX and MS-DOS.. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Harbour_(programming_language)

- Harbour website
 https://harbour.github.io/
- Harbour Wikipedia page
 https://en.wikipedia.org/wiki/Harbour_(programming_language)
- There are at least 45 Harbour repos on GitHub
- Harbour first developed in https://github.com/harbour
- The  Google BigQuery Public Dataset GitHub snapshot shows 80 users using Harbour in 86 repos on GitHub
- Explore Harbour snippets on Rosetta Code
- GitHub supports syntax highlighting for Harbour
- See also: (16 related languages)Clipper, DBase, Linux, Unix, iOS, Android, TCP, MySQL, PostgreSQL, SQLite, xBase, C, Java, Visual FoxPro, Visual Objects, XBase++
- 1 languages in PLDB linking to Harbour: tibet

PROCEDURE Main()

   ? &quot;Hello World&quot;

   RETURN

#include &quot;hbclass.ch&quot;

 PROCEDURE Main()

    LOCAL oPerson

    CLS

    oPerson := Person():New( &quot;Dave&quot; )

    oPerson:Eyes := &quot;Invalid&quot;

    oPerson:Eyes := &quot;Blue&quot;

    Alert( oPerson:Describe() )

    RETURN

 CREATE CLASS Person

    VAR Name INIT &quot;&quot;

    METHOD New( cName )
    METHOD Describe()

    ACCESS Eyes INLINE ::pvtEyes
    ASSIGN Eyes( x ) INLINE iif( HB_ISSTRING( x ) .AND. x $ &quot;Blue,Brown,Green&quot;, ::pvtEyes := x, Alert( &quot;Invalid value&quot; ) )

    PROTECTED:

    VAR pvtEyes

 ENDCLASS

 // Sample of normal Method definition
 METHOD New( cName ) CLASS Person

    ::Name := cName

    RETURN Self

 METHOD Describe() CLASS Person

    LOCAL cDescription

    IF Empty( ::Name )
       cDescription := &quot;I have no name yet.&quot;
    ELSE
       cDescription := &quot;My name is: &quot; + ::Name + &quot;;&quot;
    ENDIF

    IF ! Empty( ::Eyes )
       cDescription += &quot;my eyes&#39; color is: &quot; + ::Eyes
    ENDIF

    RETURN cDescription

Language features
======================================================

row
 Feature Strings
 FeatureLink ../features/hasStrings.html
 Supported ✓
 Token "
 Example
  "Hello world"
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Token 
 Example
  // A comment
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Token //
 Example
  // A comment
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Token 
 Example
