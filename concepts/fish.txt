printViewSourceBadge

fish
====

fish, aka friendly interactive shell, is an open source programming language created in 2005 by Axel Liljencrantz and Thorsten Ball.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222005%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 2005
 https://pldb.io/concepts/../lists/creators.html#q=Axel%20Liljencrantz Axel Liljencrantz
 https://pldb.io/concepts/../lists/creators.html#q=Thorsten%20Ball Thorsten Ball

#108 on PLDB
19 Years Old
0 Repos

git clone https://github.com/fish-shell/fish-shell

The friendly interactive shell (fish) is a Unix shell that attempts to be more interactive and user-friendly than those with a longer history (i.e. most other Unix shells) or those formulated as function-compatible replacements for the aforementioned (e.g. zsh, the Falstad shell). Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Friendly_interactive_shell Read more on Wikipedia...

- Tags: programming language
- fish is developed on GitHub and has 25,228 stars
- There are at least 0 fish repos on GitHub
- Early development of fish happened in https://github.com/fish-shell
- fish is written in Rust, reStructuredText, Python, Bourne shell, Dockerfile, CMake, YAML, HTML, Markdown, CSS, JavaScript, XML, Make, C++, C, Objective-C, TOML
- Explore fish snippets on Rosetta Code
- Pygments supports syntax highlighting for fish
- GitHub supports syntax highlighting for fish
- Indeed.com has 1 matches for "fish developer".
- fishshell.com was registered in 2010
- See also: (2 related languages) Bash, Z shell

echo &quot;Hello, world!&quot;

#!/usr/bin/env fish
echo &quot;Hello World&quot;

function eval -S -d &quot;Evaluate parameters as a command&quot;

	# If we are in an interactive shell, eval should enable full
	# job control since it should behave like the real code was
	# executed.  If we don&#39;t do this, commands that expect to be
	# used interactively, like less, wont work using eval.

	set -l mode
	if status --is-interactive-job-control
		set mode interactive
	else
		if status --is-full-job-control
			set mode full
		else
			set mode none
		end
	end
	if status --is-interactive
		status --job-control full
	end

	echo &quot;begin; $argv ;end eval2_inner &lt;&amp;3 3&lt;&amp;-&quot; | . 3&lt;&amp;0
	set -l res $status

	status --job-control $mode
	return $res
end

string replace --regex &#39;.*?\.(.*)&#39; &#39;$1&#39; a.b.c #b.c
string replace --regex &#39;.*\.(.*)&#39; &#39;$1&#39; a.b.c  #c
string replace --regex &#39;(.*)\..*&#39; &#39;$1&#39; a.b.c  #a.b
string replace --regex &#39;(.*?)\..*&#39; &#39;$1&#39; a.b.c #a

Language features
======================================================

row
 Feature Strings
 FeatureLink ../features/hasStrings.html
 Supported ✓
 Example
  "Hello world"
 Token "
row
 Feature Print() Debugging
 FeatureLink ../features/hasPrintDebugging.html
 Supported ✓
 Example
 Token echo
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Example
  # A comment
 Token #
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
 Token 
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token

printViewSource
