mlir
====

mlir is an intermediate representation language created in 2019 by Chris Lattner.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222019%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D
 https://pldb.io/concepts/../lists/creators.html#q=Chris%20Lattner

#240 on PLDB
5 Years Old
84 Repos

git clone https://github.com/tensorflow/mlir

"Multi-Level Intermediate Representation" Compiler Infrastructure

- mlir website
 https://mlir.llvm.org/
- mlir is developed on GitHub and has 1,678 stars
- There are at least 84 mlir repos on GitHub
- mlir first developed in https://github.com/tensorflow
- mlir is written in Markdown
- The  Google BigQuery Public Dataset GitHub snapshot shows 27 users using mlir in 30 repos on GitHub
- First announcement of mlir
- Read more about mlir on the web: 1.
 https://blog.tensorflow.org/2019/04/mlir-new-intermediate-representation.html
- 1 languages in PLDB linking to mlir: Mojo

// Syntactically similar to LLVM:
func @testFunction(%arg0: i32) {
  %x = call @thingToCall(%arg0) : (i32) -&gt; i32
  br ^bb1
^bb1:
  %y = addi %x, %x : i32
  return %y : i32
}

// Example code of an affine reduction.
// MLIR example code may not always work out of the box because the textual MLIR format is not stable.
// The example tries to be compatible with the latest MLIR version, which may not work on previous versions.

func @affine_parallel_with_reductions_i64(%arg0: memref&lt;3x3xi64&gt;, %arg1: memref&lt;3x3xi64&gt;) -&gt; (i64, i64) {
  %0:2 = affine.parallel (%kx, %ky) = (0, 0) to (2, 2) reduce (&quot;addi&quot;, &quot;muli&quot;) -&gt; (i64, i64) {
            %1 = affine.load %arg0[%kx, %ky] : memref&lt;3x3xi64&gt;
            %2 = affine.load %arg1[%kx, %ky] : memref&lt;3x3xi64&gt;
            %3 = arith.muli %1, %2 : i64
            %4 = arith.addi %1, %2 : i64
            affine.yield %3, %4 : i64, i64
          }
  return %0#0, %0#1 : i64, i64
}

Language features
======================================================

row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Token 
 Example
  // A comment
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Token //
 Example
  // A comment
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Token 
 Example
