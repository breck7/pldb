Standard ML
===========

Standard ML is a programming language created in 1990.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%221990%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D

#120 on PLDB
34 Years Old
392k Repos

Try now: Riju

Standard ML (SML; Standard Meta Language) is a general-purpose, modular, functional programming language with compile-time type checking and type inference. It is popular among compiler writers and programming language researchers, as well as in the development of theorem provers. SML is a modern dialect of ML, the programming language used in the Logic for Computable Functions (LCF) theorem-proving project. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Standard_ML

- Standard ML website
 http://sml-family.org
- Standard ML Wikipedia page
 https://en.wikipedia.org/wiki/Standard_ML
- Standard ML docs
 http://www.cs.cmu.edu/~rwh/isml/book.pdf
- There are at least 392,047 Standard ML repos on GitHub
- Standard ML first developed in Bell Laboratories and Princeton University
- The  Google BigQuery Public Dataset GitHub snapshot shows 2k users using Standard ML in 2k repos on GitHub
- Standard ML appears in the TIOBE Index
- Standard ML Ubuntu package
 https://packages.ubuntu.com/jammy/mlton
- Pygments supports syntax highlighting for Standard ML
- GitHub supports syntax highlighting for Standard ML
- Standard ML appears in the Quine Relay project
- sml-family.org was registered in 2014
- See also: (19 related languages)Alice, DML, HOPE, Elm, F*, OCaml, Rust, Scala, ML, Caml, C, POPLOG, Pop-11, Common Lisp, Prolog, Emacs, Isabelle, Extended ML, F#
- Read more about Standard ML on the web: 1.
 https://www.smlnj.org/sml.html
- 10 languages in PLDB linking to Standard ML: Elpi, invokator, jonprl, k-framework, mal, mlpolyr, mythryl, Pygments, redprl, UrWeb

print &quot;Hello, world!\n&quot;;

fun hello() = print(&quot;Hello World\n&quot;);

hello()

 
signature LAZY_BASE =
   sig
      type &#39;a lazy
      exception Undefined
      val force: &#39;a lazy -&gt; &#39;a
      val delay: (unit -&gt; &#39;a) -&gt; &#39;a lazy
      val undefined: &#39;a lazy
   end

signature LAZY&#39; =
   sig
      include LAZY_BASE
      val isUndefined: &#39;a lazy -&gt; bool
      val inject : &#39;a -&gt; &#39;a lazy
      val toString: (&#39;a -&gt; string) -&gt; &#39;a lazy -&gt; string
      val eq: &#39;&#39;a lazy * &#39;&#39;a lazy -&gt; bool
      val eqBy: (&#39;a * &#39;a -&gt; bool) -&gt; &#39;a lazy * &#39;a lazy -&gt; bool
      val compare: (&#39;a * &#39;a -&gt; order) -&gt; &#39;a lazy * &#39;a lazy -&gt; order
      val map: (&#39;a -&gt; &#39;b) -&gt; &#39;a lazy -&gt; &#39;b lazy

      structure Ops:
                   sig
                      val ! : &#39;a lazy -&gt; &#39;a (* force *)
                      val ? : &#39;a -&gt; &#39;a lazy (* inject *)
                   end
   end

- haar [1, 2, 3, 4, ~4, ~3, ~2, ~1];
   val it = [0,20,4,4,~1,~1,~1,~1]  : int list

Language features
======================================================

row
 Feature Print() Debugging
 FeatureLink ../features/hasPrintDebugging.html
 Supported ✓
 Token print
 Example
row
 Feature Type Inference
 FeatureLink ../features/hasTypeInference.html
 Supported ✓
 Token 
 Example
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Token 
 Example
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported X
 Token 
 Example
