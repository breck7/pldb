import ../code/conceptPage.scroll

id aardvark
name Aardvark
appeared 2020
creators Hg0428 and JustCoding123 and CompilingCoder and TheBoys619 and PlasDev and ZDev1
tags pl
latestVersion v1.0.0-test.3-bugfix
description Aardvark was originally designed in Python as an interpretter. This encompassed all releases up to 1.0. Then, in 2021 and 2022, other implementations started emerging, written in language such as Go and C++. In 2022, however, Aardvark underwent the 1.0 redesign. The language was redesigned from the ground up and re-implemented with a new, but temporary Python interpretter. Now, in 2023, the team is building the final compiler. This compiler is written in Aardvark itself and compiles to LLVM. It has the goal of being faster than C while easier than Python. It was designed for beginners and pros alike. The documentation is avaialiable here: https://aardvark-docs.programit.repl.co. It includes many tutorials and articles.
writtenIn python markdown bourne-shell toml powershell json

isOpenSource true
docs https://aardvark-docs.programit.repl.co/
repoStats
 firstCommit 2022
 commits 309
 committers 7
 files 112
 newestCommit 2024
country United Kingdom
country United States
country South Korea
originCommunity discord

discord https://discord.gg/MM3HmfzRfS
example
 stdout.write("Hello World!\n")

githubRepo https://github.com/Aardvark-team/Aardvark-py
 firstCommit 2022
 stars 8
 forks 1
 subscribers 3
 created 2022
 updated 2024
 issues 0
 description The temporary Aardvark 1.0 interpreter, and the in-development 1.0 compiler.

hasAnonymousFunctions true
hasAssignment true
hasBinaryNumbers true
 `2_101` would evaluate as a binary number.
hasBooleans true
hasBreak true
hasClasses true
hasComments true
hasContinue true
hasConditionals true
hasConstructors true
hasConstants true
 `static` keyword
hasDynamicProperties true
hasExceptions true
 Has throw, try, and catch
hasFirstClassFunctions true
hasFloats true
hasFnArguments true
hasForLoops true
hasGlobalScope true
hasHexadecimals true
 `16_fa7` would evaluate as a hexadecimal number
hasHereDocs true
hasIfElses true
hasIfs true
hasImports true
hasInheritance true
hasIntegers true
hasImplicitArguments true
hasIncrementAndDecrementOperators true
 ++ and --
hasInfixNotation true
hasLabels false
hasLineComments true
hasLists true
hasManualMemoryManagement true
hasModules true
hasMultiLineComments true
hasMultilineStrings true
hasMultipleInheritance true
hasNull true
 `null`
hasOctals true
hasOperators true
hasPatternMatching true
 This functionality is included in switch statements.
hasPointers true
hasPostfixNotation true
hasPrefixNotation true
hasPrintDebugging true
hasReservedWords true
hasSelfOrThisWord true
 You can name it whatever you like.
hasSets true
