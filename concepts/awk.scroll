../code/conceptPage.scroll

id awk
name awk
appeared 1977
creators Alfred Aho and Peter J. Weinberger and Brian Kernighan
tags pl
website http://www.cs.princeton.edu/~bwk/btl.mirror/
standsFor Aho, Weinberger, Kernighan
lab Bell Labs
interviews https://pldb.io/blog/brianKernighan.html
leetSheets https://cheatsheets.zip/awk

exercism https://exercism.org/tracks/awk
tryItOnline https://tio.run/#awk
clocExtensions auk awk gawk mawk nawk
fileType text
docs https://www.gnu.org/software/gawk/manual/gawk.html
rosettaCode http://www.rosettacode.org/wiki/Category:AWK
quineRelay Awk
ubuntuPackage gawk
country United States
projectEuler AWK
 memberCount
  2019 9
  2022 14

helloWorldCollection Aho%2C Weinberger%2C Kernighan
 # Hello world in AWK
 
 BEGIN {
   print "Hello World!"
 }
pygmentsHighlighter Awk
 filename textedit.py
 fileExtensions awk
rijuRepl https://riju.codes/awk
 example
  BEGIN { print "Hello, world!" }
  
 description Domain-specific language designed for text processing and typically used as a data extraction and reporting tool
 fileExtensions awk
 gitRepo https://savannah.gnu.org/git/?group=gawk
subreddit https://reddit.com/r/awk
 memberCount
  2017 720
  2022 1929
leachim6 AWK
 filepath a/AWK.awk
 fileExtensions awk
 example
  # awk -f awk.awk
  BEGIN { print "Hello World" }
  

lineCommentToken #
printToken print
stringToken "

hasComments true
hasLineComments true
 # A comment
hasPrintDebugging true
hasSemanticIndentation false
hasStrings true
 "Hello world"
hasHexadecimals true
 # 0x[0-9a-fA-F]+
hasFloats true
 # [0-9][0-9]*\.[0-9]+([eE][0-9]+)?[fd]?
hasIntegers true
 # [0-9]+

wikipedia https://en.wikipedia.org/wiki/AWK
 example
  BEGIN {
      pattern = ARGV[1]
      for (i = 1; i < ARGC; i++) # remove first argument
          ARGV[i] = ARGV[i + 1]
      ARGC--
      if (ARGC == 1) { # the pattern was the only thing, so force read from standard input (used by book)
          ARGC = 2
          ARGV[1] = "-"
      }
  }
  $0 ~ pattern { print FILENAME ":" $0 }
 related c snobol bourne-shell tcl ampl perl lua regex unix sed freebsd solaris java isbn
 summary AWK is a programming language designed for text processing and typically used as a data extraction and reporting tool. It is a standard feature of most Unix-like operating systems. The AWK language is a data-driven scripting language consisting of a set of actions to be taken against streams of textual data – either run directly on files or used as part of a pipeline – for purposes of extracting or transforming text, such as producing formatted reports. The language extensively uses the string datatype, associative arrays (that is, arrays indexed by key strings), and regular expressions. While AWK has a limited intended application domain and was especially designed to support one-liner programs, the language is Turing-complete, and even the early Bell Labs users of AWK often wrote well-structured large AWK programs. AWK was created at Bell Labs in the 1970s, and its name is derived from the surnames of its authors—Alfred Aho, Peter Weinberger, and Brian Kernighan. The acronym is pronounced the same as the name of the bird auk (which acts as an emblem of the language such as on The AWK Programming Language book cover – the book is often referred to by the abbreviation TAPL). When written in all lowercase letters, as awk, it refers to the Unix or Plan 9 program that runs scripts written in the AWK programming language.
 pageId 1456
 dailyPageViews 506
 created 2001
 backlinksCount 495
 revisionCount 770
 appeared 1977

hopl https://hopl.info/showlanguage.prx?exp=1844
tiobe Awk
 currentRank 37

githubBigQuery Awk
 repos 20601
 users 13611

linguistGrammarRepo https://github.com/github-linguist/awk-sublime
 firstCommit 2012
 lastCommit 2016
 committerCount 3
 commitCount 22
 sampleCount 1
 example
  #!/bin/awk -f
  
  BEGIN {
    # It is not possible to define output file names here because
    # FILENAME is not define in the BEGIN section
    n = "";
    printf "Generating data files ...";
    network_max_bandwidth_in_byte = 10000000;
    network_max_packet_per_second = 1000000;
    last3 = 0;
    last4 = 0;
    last5 = 0;
    last6 = 0;
  }
  {
    if ($1 ~ /Average/)
      { # Skip the Average values
        n = "";
        next;
      }
  
    if ($2 ~ /all/)
      { # This is the cpu info
        print $3 > FILENAME".cpu.user.dat";
  #	  print $4 > FILENAME".cpu.nice.dat";
        print $5 > FILENAME".cpu.system.dat";
  #     print $6 > FILENAME".cpu.iowait.dat";
        print $7 > FILENAME".cpu.idle.dat";
        print 100-$7 > FILENAME".cpu.busy.dat";
      }
    if ($2 ~ /eth0/)
      { # This is the eth0 network info
        if ($3 > network_max_packet_per_second)
  	print last3 > FILENAME".net.rxpck.dat"; # Total number of packets received per second.
        else
  	{
  	  last3 = $3;
  	  print $3 > FILENAME".net.rxpck.dat"; # Total number of packets received per second.
  	}
        if ($4 > network_max_packet_per_second)
  	print last4 > FILENAME".net.txpck.dat"; # Total number of packets transmitted per second.
        else
  	{
  	  last4 = $4;
  	  print $4 > FILENAME".net.txpck.dat"; # Total number of packets transmitted per second.
  	}
        if ($5 > network_max_bandwidth_in_byte)
  	print last5 > FILENAME".net.rxbyt.dat"; # Total number of bytes received per second.
        else
  	{
  	  last5 = $5;
  	  print $5 > FILENAME".net.rxbyt.dat"; # Total number of bytes received per second.
  	}
        if ($6 > network_max_bandwidth_in_byte)
  	print last6 > FILENAME".net.txbyt.dat"; # Total number of bytes transmitted per second.
        else
  	{
  	  last6 = $6;
  	  print $6 > FILENAME".net.txbyt.dat"; # Total number of bytes transmitted per second.
  	}
  #     print $7 > FILENAME".net.rxcmp.dat"; # Number of compressed packets received per second (for cslip etc.).
  #     print $8 > FILENAME".net.txcmp.dat"; # Number of compressed packets transmitted per second.
  #     print $9 > FILENAME".net.rxmcst.dat"; # Number of multicast packets received per second.
      }
  
    # Detect which is the next info to be parsed
    if ($2 ~ /proc|cswch|tps|kbmemfree|totsck/)
      {
        n = $2;
      }
  
    # Only get lines with numbers (real data !)
    if ($2 ~ /[0-9]/)
      {
        if (n == "proc/s")
  	{ # This is the proc/s info
  	  print $2 > FILENAME".proc.dat";
  #	  n = "";
  	}
        if (n == "cswch/s")
  	{ # This is the context switches per second info
  	  print $2 > FILENAME".ctxsw.dat";
  #	  n = "";
  	}
        if (n == "tps")
  	{ # This is the disk info
  	  print $2 > FILENAME".disk.tps.dat"; # total transfers per second
  	  print $3 > FILENAME".disk.rtps.dat"; # read requests per second
  	  print $4 > FILENAME".disk.wtps.dat"; # write requests per second
  	  print $5 > FILENAME".disk.brdps.dat"; # block reads per second
  	  print $6 > FILENAME".disk.bwrps.dat"; # block writes per second
  #	  n = "";
  	}
        if (n == "kbmemfree")
  	{ # This is the mem info
  	  print $2 > FILENAME".mem.kbmemfree.dat"; # Amount of free memory available in kilobytes.
  	  print $3 > FILENAME".mem.kbmemused.dat"; # Amount of used memory in kilobytes. This does not take into account memory used by the kernel itself.
  	  print $4 > FILENAME".mem.memused.dat"; # Percentage of used memory.
  #         It appears the kbmemshrd has been removed from the sysstat output - ntolia
  #	  print $X > FILENAME".mem.kbmemshrd.dat"; # Amount of memory shared by the system in kilobytes.  Always zero with 2.4 kernels.
  #	  print $5 > FILENAME".mem.kbbuffers.dat"; # Amount of memory used as buffers by the kernel in kilobytes.
  	  print $6 > FILENAME".mem.kbcached.dat"; # Amount of memory used to cache data by the kernel in kilobytes.
  #	  print $7 > FILENAME".mem.kbswpfree.dat"; # Amount of free swap space in kilobytes.
  #	  print $8 > FILENAME".mem.kbswpused.dat"; # Amount of used swap space in kilobytes.
  	  print $9 > FILENAME".mem.swpused.dat"; # Percentage of used swap space.
  #	  n = "";
   	}
        if (n == "totsck")
  	{ # This is the socket info
  	  print $2 > FILENAME".sock.totsck.dat"; # Total number of used sockets.
  	  print $3 > FILENAME".sock.tcpsck.dat"; # Number of TCP sockets currently in use.
  #	  print $4 > FILENAME".sock.udpsck.dat"; # Number of UDP sockets currently in use.
  #	  print $5 > FILENAME".sock.rawsck.dat"; # Number of RAW sockets currently in use.
  #	  print $6 > FILENAME".sock.ip-frag.dat"; # Number of IP fragments currently in use.
  #	  n = "";
   	}
      }
  }
  END {
    print " '" FILENAME "' done.";
  }
  

isbndb 20
 year|publisher|title|authors|isbn13
 1997|O'Reilly Media|sed & awk|Dougherty, Dale and Robbins, Arnold|9781565922259
 1988|Pearson|The AWK Programming Language|Aho, Alfred V. and Kernighan, Brian W. and Weinberger, Peter J.|9780201079814
 2001|O'Reilly Media|Effective awk Programming (3rd Edition)|Robbins, Arnold|9780596000707
 2015|O'Reilly Media|Effective awk Programming: Universal Text Processing and Pattern Matching|Robbins, Arnold|9781491904619
 2018|Packt Publishing|Learning AWK Programming: A fast, and simple cutting-edge utility for text-processing on the Unix-like environment|Kalkhanda, Shiwang|9781788397087
 2018-03-26T00:00:01Z|Packt Publishing|Learning AWK Programming: A fast, and simple cutting-edge utility for text-processing on the Unix-like environment|Kalkhanda, Shiwang|9781788391030
 2013|CreateSpace Independent Publishing Platform|Hands-On Korn Shell and AWK Scripting: Learn Unix and Linux Programming Through Advanced Scripting Examples|Williams, Brian|9781492724049
 19970301|O'Reilly Media, Inc.|sed & awk|Dale Dougherty; Arnold Robbins|9781449396602
 1997|O'reilly Media|Effective Awk Programming|Arnold Robbins|9781578310005
 19970301|O'Reilly Media, Inc.|sed & awk|Dale Dougherty; Arnold Robbins|9781449301880
 20150303|O'Reilly Media, Inc.|Effective awk Programming|Arnold Robbins|9781491904961
 2000|Iuniverse Inc|Effective Awk Programming: A User's Guide For Gnu Awk, Edition 1.0.3|Arnold D. Robbins|9780595100347
 20150303|O'Reilly Media, Inc.|Effective awk Programming|Arnold Robbins|9781491904978
 2000|D D C Pub|Awk Programming (2 Days)|Sim Mcnally|9781562439811
 2011|Lulu.com|Gawk: Effective Awk Programming|Arnold Robbins|9781447550839
 20020612|O'Reilly Media, Inc.|sed and awk Pocket Reference|Arnold Robbins|9780596529024
 20020612|O'Reilly Media, Inc.|sed and awk Pocket Reference|Arnold Robbins|9780596552022
 1996|Specialized Systems Consultants|Effective Awk Programming: A User's Guide For Gnuawk|Arnold D. Robbins|9780916151881
 2013|Createspace Independent Publishing Platform|Unix Command Line And Awk Scripting: Harnessing The Power Of Unix And Linux Programming Environments|Dmitri Petrovic|9781492724315
 2013|Createspace Independent Publishing Platform|Advanced Unix Shell Scripting: How To Reduce Your Labor And Increase Your Effectiveness Through Mastery Of Unix Shell Scripting And Awk Programming|Praveen Puri|9781484076385

githubLanguage Awk
 fileExtensions awk auk gawk mawk nawk
 trendingProjectsCount 0
 type programming
 interpreters awk gawk mawk nawk
 aceMode text
 tmScope source.awk
 repos 2552

indeedJobs awk engineer
 2022 7

semanticScholar 8
 year|title|doi|citations|influentialCitations|authors|paperId
 1988|The awk programming language|10.1007/BF00054275|464|23|A. Aho and B. Kernighan and P. Weinberger|eae275046b909dec7a062a35862376c750e60463
 1979|Awk — a pattern scanning and processing language|10.1002/spe.4380090403|155|7|A. Aho and B. Kernighan and P. Weinberger|00ff20695a0b6734a0812593b2373cb929b50b8f
 2019|AWK and GNU Octave Programming Languages Integrated with Generic Mapping Tools for Geomorphological Analysis|10.35180/gse-2019-0020|41|0|Polina Lemenkova|a33b25d841b65b2b636e26300d6df6af1a86d29f
 1983|A walk through AWK|10.1145/988193.988201|34|0|L. Levy|7824109be5cdea9d5743cb9a4995a161030fc99e
 1996|A debugger and assertion checker for the Awk programming language|10.1109/SEEP.1996.534006|6|0|M. Auguston and S. Banerjee and M. Mamnani and G. Nabi and J. Reinfelds and U. Sarkans and I. Strnad|c3e0c030141740f5949525feeb173bd81f7f3236
 2005|From AWK to Google: Peter Weinberger Talks Search|10.1109/MSP.2005.123|1|0|L. McLaughlin|808ab018a01eac1ba2a8e60fccc6f1d58ed7f787
 1987|AWK — A Prototyping Language|10.1007/978-1-4612-4718-0_6|1|0|L. Levy|3dc3122a21edf010a1f44872b9cc730916f5171d
 1989|The awk programming language [Book Review]|10.1109/ms.1989.1105889|1|0|Brian and Kemighan and P. Weinberger|9e42b6a3b8e7a39465cb7172391139d07a42e7ca

goodreads
 title|year|author|goodreadsId|rating|ratings|reviews
 The AWK Programming Language|1988|Alfred V. Aho|689393|4.25|142|11
 Effective awk Programming: Text Processing and Pattern Matching|1997|Arnold Robbins|707065|3.97|37|2
 GAWK: Effective Awk Programming|1996|Arnold D. Robbins|27480621|4.00|1|0
 AWK Programming: Questions and Answers|2014|George Duckett|43826300|0.0|0|0
 awk Programmer's Toolbox: Advanced awk and Unix Shell Scripting Examples and Techniques|2013|Steve Myers|27006436|5.00|1|0
 Awk Programming (2 Days)||Sim McNally|5706968|0.0|0|0
