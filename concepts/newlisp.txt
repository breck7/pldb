NewLisp
=======

NewLisp is an open source programming language created in 1991 by Lutz Mueller.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%221991%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 1991
 https://pldb.io/concepts/../lists/creators.html#q=Lutz%20Mueller Lutz Mueller

#457 on PLDB
33 Years Old
476 Repos

git clone https://github.com/kosh04/newlisp

newLISP is an open source scripting language in the Lisp family of programming languages developed by Lutz Mueller and released under the GNU General Public License.. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/NewLISP Read more on Wikipedia...

- Tags: programming language
 wrapsOn none
- NewLisp is developed on GitHub and has 94 stars
 wrapsOn none
- There are at least 476 NewLisp repos on GitHub
 wrapsOn none
- Early development of NewLisp happened in http://kosh.sdf.org
 wrapsOn none
- NewLisp is written in Lisp, C, HTML, Bourne shell, Make, YAML, Vim script, CSS, Markdown, XML
 wrapsOn none
- The  Google BigQuery Public Dataset GitHub snapshot shows 774 users using NewLisp in 812 repos on GitHub
 wrapsOn none
- There are 1 Project Euler users using NewLisp
 wrapsOn none
- Explore NewLisp snippets on Rosetta Code
 wrapsOn none
- Pygments supports syntax highlighting for NewLisp
 wrapsOn none
- GitHub supports syntax highlighting for NewLisp
 wrapsOn none
- newlisp.org was registered in 1999
 wrapsOn none
- See also: (17 related languages) Lisp, Common Lisp, Scheme, Pascal, C, Tcl, S-expressions, XML, UTF-8, TCP, UDP, Linux, Solaris, SQLite, SMTP, FTP, OpenGL
 wrapsOn none

#!/usr/bin/newlisp
(print &quot;Hello World\n&quot;)
(exit)

#!/usr/bin/env newlisp

(constant &#39;NUM 8)

(define (intersects? q1 q2)
	(or
		(= (q1 0) (q2 0))
		(= (q1 1) (q2 1))
		(= (abs (- (q1 0) (q2 0))) (abs (- (q1 1) (q2 1))))))

(define (variant? alist)
	(set &#39;logic nil)
	(cond
		((= (length alist) 1) true)
		((&gt; (length alist) 1)
			(while (&gt; (length alist) 1)
				(set &#39;q (pop alist -1))
				(dolist (el alist)
					(push
						(intersects?
							(list q (inc (length alist)))
							(list el (+ 1 $idx)))
					logic -1)))
			(not (apply or logic)))))

(define (fork-by-line alist)
	(let (res &#39;())
		(dolist (i (sequence 1 NUM))
			(set &#39;tmp alist)
			(push i tmp -1)
			(setf res (push tmp res -1)))
		res))

(define (find-variants num)
	(let (res &#39;())
		(cond
			((&lt; num 1)
				(begin (println &quot;num &lt; 1&quot;) (exit)))
			((= num 1)
				(dolist (i (sequence 1 NUM)) (push (list i) res -1)))
			((&gt; num 1)
				(dolist (v (find-variants (dec num)))
					(set &#39;passed (filter variant? (fork-by-line v)))
					(if (not (empty? passed)) (extend res passed)))))
		res))
		
(set &#39;solutions (find-variants NUM))
(println (length solutions))
;;(exit)

Language features
======================================================

row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Example
 Token 
row
 Feature Print() Debugging
 FeatureLink ../features/hasPrintDebugging.html
 Supported ✓
 Example
 Token print
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
 Token 
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token
