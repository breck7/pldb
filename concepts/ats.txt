printViewSourceBadge

ATS
===

ATS, aka Applied Type System, is an open source programming language created in 2013 by Hongwei Xi.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%222013%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 2013
 https://pldb.io/concepts/../lists/creators.html#q=Hongwei%20Xi Hongwei Xi

#458 on PLDB
11 Years Old
217 Repos

ATS (Applied Type System) is a programming language designed to unify programming with formal specification. ATS has support for combining theorem proving with practical programming through the use of advanced type systems. A past version of The Computer Language Benchmarks Game has demonstrated that the performance of ATS is comparable to that of the C and C++ programming languages. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/ATS_(programming_language) Read more on Wikipedia...

- Tags: programming language
- There are at least 217 ATS repos on GitHub
- Early development of ATS happened in Boston University
- The  Google BigQuery Public Dataset GitHub snapshot shows 26 users using ATS in 46 repos on GitHub
- Explore ATS snippets on Rosetta Code
- Monaco package for syntax highlighting ATS
- GitHub supports syntax highlighting for ATS
- ats-lang.org was registered in 2007
- See also: (4 related languages) DML, ML, OCaml, C

val _ = print (&quot;Hello, world!\n&quot;)
implement main0 () = ()

// Hello world in ATS

implement main () = begin
  print (&quot;Hello, world!&quot;); print_newline ()
end

(* ****** ****** *)
//
// HX-2013-11
//
// Implementing a variant of
// the problem of Dining Philosophers
//
(* ****** ****** *)
//
#include &quot;share/atspre_define.hats&quot;
#include &quot;share/atspre_staload.hats&quot;
//
(* ****** ****** *)

staload &quot;{$LIBATSHWXI}/teaching/mythread/SATS/mythread.sats&quot;

(* ****** ****** *)

local
//
#include &quot;{$LIBATSHWXI}/teaching/mythread/DATS/mythread.dats&quot;
//
in (* in of [local] *)
//
// HX: it is intentionally left to be empty
//
end // end of [local]

(* ****** ****** *)

local
//
#include &quot;{$LIBATSHWXI}/teaching/mythread/DATS/mythread_posix.dats&quot;
//
in (* in of [local] *)
//
// HX: it is intentionally left to be empty
//
end // end of [local]

(* ****** ****** *)

(* end of [DiningPhil2_thread.dats] *)

#define BUFLEN 10
var !p_buf with pf_buf = @[byte][BUFLEN](0)    // pf_buf = @[byte][BUFLEN](0) @ p_buf[14]

abstype abst0ype absprop absview absvtype absviewtype absvt0ype absviewt0ype as and assume begin classdec datasort datatype dataprop dataview datavtype dataviewtype do end extern extype extvar exception fn fnx fun prfn prfun praxi castfn if then else ifcase in infix infixl infixr prefix postfix implmnt implement primplmnt primplement import let local macdef macrodef nonfix symelim symintr overload of op rec sif scase sortdef sta stacst stadef static staload dynload try tkindef typedef propdef viewdef vtypedef viewtypedef prval var prvar when where with withtype withprop withview withvtype withviewtype

Language features
======================================================

row
 Feature Conditionals
 FeatureLink ../features/hasConditionals.html
 Supported ✓
 Example
 Token 
row
 Feature Functions
 FeatureLink ../features/hasFunctions.html
 Supported ✓
 Example
 Token 
row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Example
  (* A comment
  *)
 Token (* *)
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
  // A comment
 Token 
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Example
  // A comment
 Token //
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token

printViewSource
