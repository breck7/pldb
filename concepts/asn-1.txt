ASN.1
=====

ASN.1 is an interface design language created in 1984.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%221984%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D

#613 on PLDB
40 Years Old
0 Repos

Abstract Syntax Notation One (ASN.1) is an interface description language for defining data structures that can be serialized and deserialized in a standard, cross-platform way. It's broadly used in telecommunications and computer networking, and especially in cryptography. Protocol developers define data structures in ASN.1 modules, which are generally a section of a broader standards document written in the ASN.1 language. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One

- ASN.1 Wikipedia page
 https://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One
- There are at least 0 ASN.1 repos on GitHub
- ASN.1 first developed in International Telecommunication Union and International Electrotechnical Commission
- ASN.1 on HOPL
 https://hopl.info/showlanguage.prx?exp=1070
- CodeMirror package for syntax highlighting ASN.1
- GitHub supports syntax highlighting for ASN.1
- See also: (5 related languages)Protocol Buffers, Thrift, ASCII, JSON, XML

FooProtocol DEFINITIONS ::= BEGIN

    FooQuestion ::= SEQUENCE {
        trackingNumber INTEGER,
        question       IA5String
    }

    FooAnswer ::= SEQUENCE {
        questionNumber INTEGER,
        answer         BOOLEAN
    }

END

MyShopPurchaseOrders DEFINITIONS AUTOMATIC TAGS ::= BEGIN

PurchaseOrder ::= SEQUENCE {
dateOfOrder	DATE,
customer   	CustomerInfo,
items      	ListOfItems
}

CustomerInfo ::= SEQUENCE {
companyName	   VisibleString (SIZE (3..50)),
billingAddress	Address,
contactPhone   NumericString (SIZE (7..12))
}

Address::= SEQUENCE {
street	 VisibleString (SIZE (5 .. 50)) OPTIONAL,
city	   VisibleString (SIZE (2..30)),
state	  VisibleString (SIZE(2) ^ FROM (&quot;A&quot;..&quot;Z&quot;)),
zipCode	NumericString (SIZE(5 | 9))
}

ListOfItems ::= SEQUENCE (SIZE (1..100)) OF Item

Item ::= SEQUENCE {
itemCode	       INTEGER (1..99999),
color          	VisibleString (&quot;Black&quot; | &quot;Blue&quot; | &quot;Brown&quot;),
power          	INTEGER (110 | 220),
deliveryTime   	INTEGER (8..12 | 14..19),
quantity	       INTEGER (1..1000),
unitPrice	      REAL (1.00 .. 9999.00),
isTaxable	      BOOLEAN
}
END

&lt;FooQuestion&gt;
    &lt;trackingNumber&gt;5&lt;/trackingNumber&gt;
    &lt;question&gt;Anybody there?&lt;/question&gt;
&lt;/FooQuestion&gt;
