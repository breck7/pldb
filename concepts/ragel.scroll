import ../code/conceptPage.scroll

id ragel
name Ragel
appeared 2007
tags pl
website http://complang.org/ragel/
writtenIn cpp make bourne-shell vim-script awk m4 ocaml tex ruby lex

isOpenSource true
fileType text
centralPackageRepositoryCount 0
repoStats
 firstCommit 2007
 commits 821
 committers 8
 files 475
 newestCommit 2013
country The Netherlands
originCommunity https://github.com/bnoordhuis/ragel/issues

pygmentsHighlighter Ragel
 filename parsers.py
example
 =begin
 %%{
   machine simple_scanner;
 
   action Emit {
     emit data[(ts+8)..(te-7)].pack('c*')
   }
 
   foo = 'STARTFOO' any+ :>> 'ENDFOO';
   
   main := |*
     foo => Emit;
     any;
   *|;
 }%%
 =end
 
 
 # Scans a file for "STARTFOO[...]ENDFOO" blocks and outputs their contents.
 #
 # ENV['CHUNK_SIZE'] determines how much of the file to read in at a time, allowing you to control memory usage.
 #
 # Uses ragel's scanner functionality even though it's not strictly necessary.
 class SimpleScanner
   attr_reader :path
 
   def initialize(path)
     @path = path
     %% write data;
     # % (this fixes syntax highlighting)
   end
 
   def emit(foo)
     $stdout.puts foo
   end
   
   def perform
     # So that ragel doesn't try to get it from data.length
     pe = :ignored
     eof = :ignored
 
     %% write init;
     # % (this fixes syntax highlighting)
 
     leftover = []
     
     File.open(path) do |f|
       while chunk = f.read(ENV['CHUNK_SIZE'].to_i)
         data = leftover + chunk.unpack('c*')
         p ||= 0
         pe = data.length
 
         %% write exec;
         # % (this fixes syntax highlighting)
         if ts
           leftover = data[ts..pe]
           p = p - ts
           ts = 0
         else
           leftover = []
           p = 0
         end
       end
     end
   end
 end
 
 s = SimpleScanner.new ARGV[0]
 s.perform

githubRepo https://github.com/bnoordhuis/ragel
 firstCommit 2007
 stars 152
 forks 18
 subscribers 5
 created 2013
 updated 2022
 description Ragel State Machine Compiler - http://www.complang.org/ragel/
 issues 1

lineCommentToken #

hasLineComments true
 # A comment
hasComments true
 # A comment
hasSemanticIndentation false
hasHexadecimals true
 # 0x[0-9A-Fa-f]+
hasIntegers true
 # [+-]?[0-9]+

wikipedia https://en.wikipedia.org/wiki/Ragel
 related c d go ruby java regex ascii xuml umple
 summary Ragel is a finite-state machine compiler and a parser generator. Initially Ragel supported output for C, C++ and Assembly source code,. Although subsequently extended to support several other languages (said to be Objective C, D, Go, Ruby, and Java) this support of other languages was withdrawn .  It supports the generation of table or control flow driven state machines from regular expressions and/or state charts and can also build lexical analysers via the longest-match method. Ragel specifically targets text parsing and input validation.
 created 2006
 pageId 8052388
 backlinksCount 21
 revisionCount 88
 dailyPageViews 29
 appeared 2017

githubBigQuery Ragel
 repos 317
 users 295

isbndb 0

githubLanguage Ragel
 fileExtensions rl
 trendingProjectsCount 0
 type programming
 aceMode text
 tmScope none
 aliases ragel-rb or ragel-ruby
 repos 66
