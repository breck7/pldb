JavaScript
==========

JavaScript is an open source programming language created in 1995 by Brendan Eich.
 https://pldb.io/concepts/../lists/explorer.html#searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22%3D%22%2C%22data%22%3A%22appeared%22%2C%22origData%22%3A%22appeared%22%2C%22tags%22%3A%22num%22%2C%22value%22%3A%5B%221995%22%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D 1995
 https://pldb.io/concepts/../lists/creators.html#q=Brendan%20Eich Brendan Eich

#1 on PLDB
29 Years Old
16m Repos

JavaScript (), often abbreviated as JS, is a high-level, dynamic, weakly typed, prototype-based, multi-paradigm, and interpreted programming language. Alongside HTML and CSS, JavaScript is one of the three core technologies of World Wide Web content production. It is used to make webpages interactive and provide online programs, including video games. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/JavaScript Read more on Wikipedia...

- Tags: programming language
- There are at least 16,046,489 JavaScript repos on GitHub
- Early development of JavaScript happened in Netscape
- The  Google BigQuery Public Dataset GitHub snapshot shows 566k users using JavaScript in 1m repos on GitHub
- Check out the 5,270 JavaScript meetup groups on Meetup.com.
- There are 2,113,371 members in the JavaScript subreddit
- There are 2,478 Project Euler users using JavaScript
- In the 2021 StackOverflow developer survey JavaScript programmers reported a median salary of $54,049. 64% of respondents reported using JavaScript. 53,587 programmers reported using JavaScript, and 37,008 said they wanted to use it
- Explore JavaScript snippets on Rosetta Code
- JavaScript on HOPL
 https://hopl.info/showlanguage.prx?exp=2133 JavaScript on HOPL
- JavaScript ranks #6 in the TIOBE Index
- JavaScript Ubuntu package
 https://packages.ubuntu.com/jammy/nodejs JavaScript Ubuntu package
- ANTLR grammar for JavaScript
- CodeMirror package for syntax highlighting JavaScript
- Monaco package for syntax highlighting JavaScript
- Pygments supports syntax highlighting for JavaScript
- GitHub supports syntax highlighting for JavaScript
- JavaScript appears in the Quine Relay project
- There is 1 Jupyter Kernel for JavaScript
- There is a central package repository for JavaScript
- Annual Reports for JavaScript
 https://stateofjs.com/en-us/ Annual Reports for JavaScript
- Indeed.com has 25,726 matches for "javascript developer".
- See also: (49 related languages) Java, Lua, Scheme, Perl, Self, C, Python, awk, HyperTalk, ActionScript, CoffeeScript, Dart, LiveScript, Objective-J, Opa, Raku, QML, TypeScript, JSON, HTML, Regular Expressions, PDF, Tcl, C--, VBScript, JScript, JQuery, npm, MongoDB, SQL, Max, Unity, Google Apps Script, Objective-C, Applescript, Visual Studio, Asm.js, Processing, Oberon, Smalltalk, Scala, Racket, LLVM IR, Fantom, Haxe, Clojure, Kotlin, Squeak, WebAssembly
- Read more about JavaScript on the web: 1.
 https://www.w3schools.com/js/js_reserved.asp 1.
- 520 PLDB concepts link to JavaScript: 11ty, abs, Ace Editor, Ait, AL, Alumina, Amber, Apache Hbase, Argdown, Arquero, Apache Arrow, AsciiDots, AsciiMath, AssemblyScript, asterius-compiler, AT Protocol, Avail, awl, badlanguage, Ballerina, bamboo, Basis Codec, Bazel, BeBasic, bee, Bicep, binaryen, Bitsy, Bizubee, BlackCoffee, blockml, blur-markup-language, bosque, Bounce, BQN, Bruijn, Bucklescript, Bun, Calcit, Cap'n Proto, capybara, Caramel, Carbon, cat, Catala, Ceylon, Chapel, chatterbot, chevrotain, chisel, Ć, Civet, Claro, cloc, ClojureScript, Closure Templates, Coco, codecept, CodeMirror, CoffeeKup, CoffeeScript, CokeScript, ColaScript, CWL, commonmark, Conceptual, contracts.coffee, Coq, cor, Cortex, CouchDB, Cryptol, Crystal, CSON, CSS Doodle, CSVw, curv, Cwerg, Cyber, D3.js, Dafny, Dak, daonode, dat-protocol, datascript, Deno, dexvis, dgraph, Dhall, Differential Datalog, djangoql, Dogescript, Dojo, DRAKON, Earl Grey, Embedded Crystal, edgedb, edgelisp, Đ, eff, Effekt, Eiffel, EJS, elena, Elm, Elvish, emberjs-framework, EmberScript, emesh, Emojicode, Emscripten, Enso, Erlang, Euphoria, Eve, exkited, EYG, Factor, Fancy, Fardlang, fay, fish, fjs, FlatBuffers, Flatline, Flix, Flow, Flow9, FlowchartFun, flownote, FLUX, Fold, forest-lang, Frost, fructure-editor, Futhark, FutureScript, GAP, Gforth, GHC, gintonic, Git, Gleam, Glicol, Glisp, Go, gogs-editor, Golo, GorillaScript, Gradle, grid-notation, gridstudio-editor, gura, hakaru, Halide, Ham, haste, Haxe, Hazel, Hera, Heron, HHVM, highlight.js, hilvl, Hjson, Hodor, Hook, Hot Cocoa Lisp, hrqr, HTL, htmx, huginn, hurl, HuwCode, HVM2, Hyperscript, Hyperscript, HyPhy, Ibis, icarus, IcedCoffeeScript, Idris, idyll, Imba, ImHex, Impala, infusion-framework, inko, Insitux, invokator, Iterm2, Invisible XML, Jakt, Jammy, jasmine, Java, JavaScriptCore, JCOF, Jedi, jedlang, Jeeves, Jekyll, Jemplate, Jet, jinx, Jison Lex, Jison, Jisp, JLang, jq, JQuery, JSFuck, jsil-compiler, JSON-LD, JSON Schema, JSONScript, json->url, JSON, JSON5, Jsonnet, jsparagus, JS++, juvix, k-framework, Kal, Kamby, kasaya, KaTeX, Kefir, keli, Keras, Khepri, kode, Koka, Kotlin, ktexteditor-editor, ktye/k, kumir, Ladybird, lamdu-editor, Lamdu, latte-js, Lawvere, JSON Lines, leo-editor, Lesma, lever, lezer, Ligo, Lil, Links, lispyscript, Literate CoffeeScript, LiteScript, lobster, loci, Lodash, Logica, lsd, Lucid, Luna, Lux, m3db, Macchiato, mal, manhood, Manim, Mapgen, maraca-lang, Margin, Marko, Markus, Markwhen, Marp, Mask, Mastodon, MathJSON, Mathpix Markdown, Matplotlib, mavo, MDX, Melody, mermaid, MicroBlocks, MicroPython, MiniZinc, Mirah, mochajs, Monaco Editor, Mond, MongoDB, Monkey, MonkeyX, moya, Mu, mun-lang, mys, Nadesiko, Nearley, neut, never, Nextflow, ngn/k, NGS, nianiolang, NilScript, Nim, Nit, nlpl, Node.js, noisecraft, nomnoml, noms-db, noon, noulith, nulan, Numba, Nuua, ObjectScript, Observable Framework, Observable, Observable Plot, Obsidian, oden, odin, Ohayo, ohm, oil, OK, onnx, oopsilon, Opa, OpenNN, Open Shading Language, OpenCV, Openverse, p4p, packagist-pm, Parenscript, Parsers, pasukon, PearScript, PEG.js, penrose, Pep8, PHP, pikelet, pinto, Plaid, plang, Please Build, Pod6, Podlite, PogoScript, Pomsky, Porffor, PostCSS, POV-Ray SDL, Prism, Project Mentat, PROMETHEUS, PRQL, psyche, Pug, PureScript, Pygments, Pyth, Python, PyTorch, Qalb, Quaint, Quint, Racket, rainbow, Rakudo, ralph, RamdaScript, rant, React Native, Reason, Redis, Ren-C, Rescript, Revolution, RicScript, RMarkdown, RobotFramework, Roc, Rockstar, roy, RoyalScript, rpscript, ru, Ruby, runiq, Rust, Rye, SandDance, Savi, Scala.js, Scikit-learn, score, scribble, Scroll, Scroll Notation, sentient, Seq, Serious, shadama, shiv, Sibilant, sile, Simoji, sizzle, skip, skulpt, Slashdown, Slim, Slony, SmallBASIC, Snowball, Snowman, Solidity, SourcePawn, Speedie, spider, SpiderMonkey, spry, SQRL, squiggle, Secure Scuttlebutt, stacklang, Statsplorer, Storymatic, strat, Subleq, Sugar, SugarSS, Superjson, SUSN, Svelte, Sweet.js, SWI Prolog, Swift, Swym, SymPy, tablam, Tabloid, taf, Taijilang, tangledown, taxa, TensorFlow, Terra, TestML, tht, tibet, tiledb, Timpani, Tag Line Commands, tldr, tldraw, ToffeeScript, toki sona, ToonTalk, Topaz, topshell, tornado, Tosh, TQL, TAO, tridash, tuplemarkup, Twine, txtzyme, Typecast.js, TypeScript, U, UCG, Uiua, Umka, Uno, unseemly, UrWeb, V, v8, Vega, Veryl, Virgil, visdown, VSXu, Vue, Vyxal, walt, WebAssembly, wasmer, Wasp, wats, Wax, 文言文編程語言, Wing, wisp, Wonkey, Wren, Wyvern, Xgboost, XGBoost, Xidoc, XL, xlwings-editor, xodio, Xtext, xxl, YARA, YAWL, Yes It Is, YoptaScript, Z, Zephir, Zig

console.log(&quot;Hello, world!&quot;);

console.log(&quot;Hello World&quot;);

// Hello world in JavaScript
console.log(&quot;Hello World&quot;);

alert(&quot;dude!&quot;)

var minstake   = 0.00000100;  // valor base
    //-----------------------------------------
    var autorounds = 99;         // n° de rolls
    //======================================================
    // if (profit &gt; profit_max) {
        //     error_title = &quot;Maximum profit exceeded&quot;;
        //     error_info = &quot;Maximum profit: &quot; + number_format(profit_max, devise_decimal);
        //     error_value = &quot;Maximum profit exceeded - Maximum profit: &quot; + number_format(profit_max, devise_decimal);
        //     error = true;
        // }
        // else if (amount &gt; balance) {
        //     error_title = &quot;Bet amount&quot;;
        //     error_info = &quot;Maximum bet: &quot; + number_format(balance, devise_decimal);
        //     error_value = &quot;Bet amount - Maximum bet: &quot; + number_format(balance, devise_decimal);
        //     error = true;
        // }
    var handbrake  = 1.0000000;  // valor lose pause game
    var autoruns   = 1;
        // else if (amount &gt; bet_max) {
        //     error_title = &quot;Bet amount&quot;;
        //     error_info = &quot;Maximum bet: &quot; + number_format(bet_max, devise_decimal);
        //     error_value = &quot;Bet amount - Maximum bet: &quot; + number_format(bet_max, devise_decimal);
        //     error = true;
        // }
        // else if (amount &lt; bet_min) {
        //     error_title = &quot;Bet amount&quot;;
        //     error_info = &quot;Minimum bet: &quot; + number_format(bet_min, devise_decimal);
        //     error_value = &quot;Bet amount - Minimum bet: &quot; + number_format(bet_min, devise_decimal);
        //     error = true;
        // }
    function playnow() {
           if (autoruns &gt; autorounds ) { console.log(&#39;Limit reached&#39;); return; }
           document.getElementById(&#39;double_your_btc_bet_hi_button&#39;).click();
           setTimeout(checkresults, 1000);
           return;}
    function checkresults() {
           if (document.getElementById(&#39;double_your_btc_bet_hi_button&#39;).disabled === true) {
                  setTimeout(checkresults, 1000);
                  return;
           }
           var stake = document.getElementById(&#39;double_your_btc_stake&#39;).value * 1;
           var won = document.getElementById(&#39;double_your_btc_bet_win&#39;).innerHTML;
           if (won.match(/(\d+\.\d+)/) !== null) { won = won.match(/(\d+\.\d+)/)[0]; } else { won = false; }
           var lost = document.getElementById(&#39;double_your_btc_bet_lose&#39;).innerHTML;
           if (lost.match(/(\d+\.\d+)/) !== null) { lost = lost.match(/(\d+\.\d+)/)[0]; } else { lost = false; }
           if (won &amp;&amp; !lost) { stake = minstake; console.log(&#39;Bet #&#39; + autoruns + &#39;/&#39; + autorounds + &#39;: Won  &#39; + won  + &#39; Stake: &#39; + stake.toFixed(8)); }
           if (lost &amp;&amp; !won) { stake = lost * 2.1; console.log(&#39;Bet #&#39; + autoruns + &#39;/&#39; + autorounds + &#39;: Lost &#39; + lost + &#39; Stake: &#39; + stake.toFixed(8)); }
           if (!won &amp;&amp; !lost) { console.log(&#39;Something went wrong&#39;); return; }
           document.getElementById(&#39;double_your_btc_stake&#39;).value = stake.toFixed(8);
           autoruns++;
           if (stake &gt;= handbrake) {
                  document.getElementById(&#39;handbrakealert&#39;).play();
                  console.log(&#39;Handbrake triggered! Execute playnow() to override&#39;);
               return;
           }
           setTimeout(playnow, 1000);
           return;
           }playnow()

The name Java in JavaScript was pure marketing: &quot;At the time, the dot-com boom had begun and Java was the hot new language, so Eich considered the JavaScript name a marketing ploy by Netscape&quot;

abstract arguments await boolean break byte case catch char class const continue debugger default delete do double else enum eval export extends false final finally float for function goto if implements import in instanceof int interface let long native new null package private protected public return short static super switch synchronized this throw throws transient true try typeof var void volatile while with yield

Language features
======================================================

row
 Feature Standard Library
 FeatureLink ../features/hasStandardLibrary.html
 Supported ✓
 Example
  console.log("Hello, World!");
 Token 
row
 Feature Scientific Notation
 FeatureLink ../features/hasScientificNotation.html
 Supported ✓
 Example
 Token 
row
 Feature Binary Literals
 FeatureLink ../features/hasBinaryNumbers.html
 Supported ✓
 Example
  // 0[bB][01]+n?
  0b100110100000110011110010010
 Token 
row
 Feature Floats
 FeatureLink ../features/hasFloats.html
 Supported ✓
 Example
  // (\.[0-9]+|[0-9]+\.[0-9]*|[0-9]+)([eE][-+]?[0-9]+)?
  80766866.0
 Token 
row
 Feature Hexadecimals
 FeatureLink ../features/hasHexadecimals.html
 Supported ✓
 Example
  // 0[xX][0-9a-fA-F]+n?
  0x4D06792
 Token 
row
 Feature Octals
 FeatureLink ../features/hasOctals.html
 Supported ✓
 Example
  // 0[oO]?[0-7]+n?
  0o464063622
 Token 
row
 Feature Sets
 FeatureLink ../features/hasSets.html
 Supported ✓
 Example
  set = new Set()
  set.add("foo")
 Token 
row
 Feature Function Composition
 FeatureLink ../features/hasFunctionComposition.html
 Supported ✓
 Example
  function o(f, g) {
     return function(x) {
         return f(g(x));
     }
  }
 Token 
row
 Feature Destructuring
 FeatureLink ../features/hasDestructuring.html
 Supported ✓
 Example
  const o = {p: 42, q: true};
  const {p, q} = o;
 Token 
row
 Feature Default Parameters Pattern
 FeatureLink ../features/hasDefaultParameters.html
 Supported ✓
 Example
  function multiply(a, b = 1) {
   return a * b;
  }
 Token 
row
 Feature Line Comments
 FeatureLink ../features/hasLineComments.html
 Supported ✓
 Example
  // A comment
 Token //
row
 Feature Increment and decrement operators
 FeatureLink ../features/hasIncrementAndDecrementOperators.html
 Supported ✓
 Example
  let i = 0
  i++
  i--
 Token 
row
 Feature Methods
 FeatureLink ../features/hasMethods.html
 Supported ✓
 Example
  class Person {
   method1() {}
   method2() {}
  }
 Token 
row
 Feature Functions
 FeatureLink ../features/hasFunctions.html
 Supported ✓
 Example
  function helloWorld() {console.log("hi")}
 Token 
row
 Feature Case Sensitivity
 FeatureLink ../features/isCaseSensitive.html
 Supported ✓
 Example
 Token 
row
 Feature Zero-based numbering
 FeatureLink ../features/hasZeroBasedNumbering.html
 Supported ✓
 Example
 Token 
row
 Feature While Loops
 FeatureLink ../features/hasWhileLoops.html
 Supported ✓
 Example
  let times = 10
  while (times) {times--}
  console.log("done")
 Token 
row
 Feature Ternary operators
 FeatureLink ../features/hasTernaryOperators.html
 Supported ✓
 Example
  let i = true ? 1 : 0
 Token 
row
 Feature Switch Statements
 FeatureLink ../features/hasSwitch.html
 Supported ✓
 Example
  var animal = "dog"
  switch (animal) {
   case "dog": console.log("yay"); break;
   case "cat": console.log("oh"); break;
  }
 Token 
row
 Feature Strings
 FeatureLink ../features/hasStrings.html
 Supported ✓
 Example
  "hello world"
 Token `
row
 Feature Letter-first Identifiers
 FeatureLink ../features/letterFirstIdentifiers.html
 Supported ✓
 Example
 Token 
row
 Feature Inheritance
 FeatureLink ../features/hasInheritance.html
 Supported ✓
 Example
  class B {}
  class A extends B {}
 Token 
row
 Feature Print() Debugging
 FeatureLink ../features/hasPrintDebugging.html
 Supported ✓
 Example
  console.log("Hi")
 Token console.log
row
 Feature References
 FeatureLink ../features/hasReferences.html
 Supported ✓
 Example
 Token 
row
 Feature Operators
 FeatureLink ../features/hasOperators.html
 Supported ✓
 Example
  1 + 1
 Token 
row
 Feature Multiline Strings
 FeatureLink ../features/hasMultilineStrings.html
 Supported ✓
 Example
  const lines = `one
  two`
 Token 
row
 Feature Anonymous Functions
 FeatureLink ../features/hasAnonymousFunctions.html
 Supported ✓
 Example
  (() => console.log("hello world"))()
 Token 
row
 Feature Infix Notation
 FeatureLink ../features/hasInfixNotation.html
 Supported ✓
 Example
  const six = 2 + 2 + 2
 Token 
row
 Feature Implicit Type Casting
 FeatureLink ../features/hasImplicitTypeConversions.html
 Supported ✓
 Example
  console.log("hello " + 2)
 Token 
row
 Feature Assignment
 FeatureLink ../features/hasAssignment.html
 Supported ✓
 Example
  var name = "John"
 Token =
row
 Feature Directives
 FeatureLink ../features/hasDirectives.html
 Supported ✓
 Example
  "use strict";
  "use asm";
 Token 
row
 Feature Generators
 FeatureLink ../features/hasGenerators.html
 Supported ✓
 Example
  function* fibonacci(limit) {
      let [prev, curr] = [0, 1];
      while (!limit || curr  10000) break;
  }
  // manually iterating
  let fibGen = fibonacci();
  console.log(fibGen.next().value); // 1
  console.log(fibGen.next().value); // 1
  console.log(fibGen.next().value); // 2
  console.log(fibGen.next().value); // 3
  console.log(fibGen.next().value); // 5
  console.log(fibGen.next().value); // 8
  // picks up from where you stopped
  for (let n of fibGen) {
      console.log(n);
      if (n > 10000) break;
  }
 Token 
row
 Feature Garbage Collection
 FeatureLink ../features/hasGarbageCollection.html
 Supported ✓
 Example
 Token 
row
 Feature First-Class Functions
 FeatureLink ../features/hasFirstClassFunctions.html
 Supported ✓
 Example
  [2.0,1.1].map(Math.round)
 Token 
row
 Feature Exceptions
 FeatureLink ../features/hasExceptions.html
 Supported ✓
 Example
  try {
   undefinedFn()
  } catch (err) {
   console.log(err)
  }
 Token 
row
 Feature hasDynamicTyping
 FeatureLink ../features/hasDynamicTyping.html
 Supported ✓
 Example
 Token 
row
 Feature Constants
 FeatureLink ../features/hasConstants.html
 Supported ✓
 Example
  const one = 1
 Token 
row
 Feature Constructors
 FeatureLink ../features/hasConstructors.html
 Supported ✓
 Example
  class Person {
   constructor(name) {
     this._name = name
   }
  }
  new Person("Jane")
 Token 
row
 Feature Labels
 FeatureLink ../features/hasLabels.html
 Supported ✓
 Example
  main:
  console.log("pldb")
 Token 
row
 Feature Comments
 FeatureLink ../features/hasComments.html
 Supported ✓
 Example
  // A comment
 Token 
row
 Feature Conditionals
 FeatureLink ../features/hasConditionals.html
 Supported ✓
 Example
  if (true)
   console.log("hi!")
 Token 
row
 Feature Classes
 FeatureLink ../features/hasClasses.html
 Supported ✓
 Example
  class Person {}
 Token 
row
 Feature Method Chaining
 FeatureLink ../features/hasMethodChaining.html
 Supported ✓
 Example
  "hello world".toString().substr(0, 1).length
 Token 
row
 Feature Booleans
 FeatureLink ../features/hasBooleans.html
 Supported ✓
 Example
 Token true false
row
 Feature Magic Getters and Setters
 FeatureLink ../features/hasMagicGettersAndSetters.html
 Supported ✓
 Example
  // Can be implemented in ES6 using proxies:
  "use strict";
  if (typeof Proxy == "undefined") {
      throw new Error("This browser doesn't support Proxy");
  }
  let original = {
      "foo": "bar"
  };
  let proxy = new Proxy(original, {
      get(target, name, receiver) {
          let rv = Reflect.get(target, name, receiver);
          if (typeof rv === "string") {
              rv = rv.toUpperCase();
          }
          return rv;
        }
  });
  console.log(`original.foo = ${original.foo}`); // "original.foo = bar"
  console.log(`proxy.foo = ${proxy.foo}`);       // "proxy.foo = BAR"
 Token 
row
 Feature Dynamic Properties
 FeatureLink ../features/hasDynamicProperties.html
 Supported ✓
 Example
  class Person {}
  const person = new Person()
  person.age = 50
 Token 
row
 Feature Source Maps
 FeatureLink ../features/hasSourceMaps.html
 Supported ✓
 Example
  {
   version: 3,
   file: 'min.js',
   names: ['bar', 'baz', 'n'],
   sources: ['one.js', 'two.js'],
   sourceRoot: 'http://example.com/www/js/',
   mappings: 'CAAC,IAAI,IAAM,SAAUA,GAClB,OAAOC,IAAID;CCDb,IAAI,IAAM,SAAUE,GAClB,OAAOA'
  };
 Token 
row
 Feature Bitwise Operators
 FeatureLink ../features/hasBitWiseOperators.html
 Supported ✓
 Example
  var x = 5 & 1;
 Token 
row
 Feature Single Dispatch
 FeatureLink ../features/hasSingleDispatch.html
 Supported ✓
 Example
 Token 
row
 Feature Polymorphism
 FeatureLink ../features/hasPolymorphism.html
 Supported ✓
 Example
  "a" + "b"; 1 + 2
 Token 
row
 Feature MultiLine Comments
 FeatureLink ../features/hasMultiLineComments.html
 Supported ✓
 Example
  /* A comment
  */
 Token /* */
row
 Feature Merges Whitespace
 FeatureLink ../features/mergesWhitespace.html
 Supported ✓
 Example
 Token 
row
 Feature Lists
 FeatureLink ../features/hasLists.html
 Supported ✓
 Example
  const list = [1,2,3]
 Token 
row
 Feature Integers
 FeatureLink ../features/hasIntegers.html
 Supported ✓
 Example
  80766866
 Token 
row
 Feature Breakpoints
 FeatureLink ../features/supportsBreakpoints.html
 Supported ✓
 Example
  if (false)
    debugger
 Token 
row
 Feature Partial Application
 FeatureLink ../features/hasPartialApplication.html
 Supported ✓
 Example
  const addNumbers = (num1, num2) => num1 + num2
  const add5 = num => addNumbers(10, num)
 Token 
row
 Feature Map Functions
 FeatureLink ../features/hasMapFunctions.html
 Supported ✓
 Example
  [1,2.1].map(Math.round)
 Token 
row
 Feature Binary Operators
 FeatureLink ../features/hasBinaryOperators.html
 Supported ✓
 Example
  1 + 1
 Token 
row
 Feature Async Await
 FeatureLink ../features/hasAsyncAwait.html
 Supported ✓
 Example
  async doSomething => await somethingElse()
 Token 
row
 Feature Expressions
 FeatureLink ../features/hasExpressions.html
 Supported ✓
 Example
  1 + 1
 Token 
row
 Feature Regular Expression Syntax Sugar
 FeatureLink ../features/hasRegularExpressionsSyntaxSugar.html
 Supported ✓
 Example
  console.log("Hello World".match(/\w/))
 Token 
row
 Feature Statements
 FeatureLink ../features/hasStatements.html
 Supported ✓
 Example
  let x = 3;
 Token 
row
 Feature File Imports
 FeatureLink ../features/hasImports.html
 Supported ✓
 Example
  import { helloWorld } from "./helloWorld.js";
 Token 
row
 Feature hasExports
 FeatureLink ../features/hasExports.html
 Supported ✓
 Example
  export function myFunction() {
  }
 Token 
row
 Feature hasSymbols
 FeatureLink ../features/hasSymbols.html
 Supported ✓
 Example
  // A symbol is a unique and immutable primitive value, often used as a unique key for object properties
  pldb = Symbol()
 Token 
row
 Feature Operator Overloading
 FeatureLink ../features/hasOperatorOverloading.html
 Supported X
 Example
 Token 
row
 Feature Case Insensitive Identifiers
 FeatureLink ../features/hasCaseInsensitiveIdentifiers.html
 Supported X
 Example
 Token 
row
 Feature Multiple Inheritance
 FeatureLink ../features/hasMultipleInheritance.html
 Supported X
 Example
 Token 
row
 Feature Function Overloading
 FeatureLink ../features/hasFunctionOverloading.html
 Supported X
 Example
 Token 
row
 Feature Macros
 FeatureLink ../features/hasMacros.html
 Supported X
 Example
 Token 
row
 Feature Processor Registers
 FeatureLink ../features/hasProcessorRegisters.html
 Supported X
 Example
 Token 
row
 Feature Multiple Dispatch
 FeatureLink ../features/hasMultipleDispatch.html
 Supported X
 Example
 Token 
row
 Feature Pointers
 FeatureLink ../features/hasPointers.html
 Supported X
 Example
 Token 
row
 Feature Semantic Indentation
 FeatureLink ../features/hasSemanticIndentation.html
 Supported X
 Example
 Token 
row
 Feature Abstract Types
 FeatureLink ../features/hasAbstractTypes.html
 Supported X
 Example
 Token 
row
 Feature Access Modifiers
 FeatureLink ../features/hasAccessModifiers.html
 Supported X
 Example
 Token 
row
 Feature Variable Substitution Syntax
 FeatureLink ../features/hasVariableSubstitutionSyntax.html
 Supported X
 Example
 Token 
row
 Feature Enums
 FeatureLink ../features/hasEnums.html
 Supported X
 Example
 Token 
row
 Feature S-Expressions
 FeatureLink ../features/hasSExpressions.html
 Supported X
 Example
 Token

View source
