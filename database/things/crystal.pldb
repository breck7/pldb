title Crystal
appeared 2014
type pl
creators Ary Borenszweig
website https://crystal-lang.org
webRepl https://play.crystal-lang.org/#/cr
fileExtensions cr
country Argentina and Germany and Turkey
originCommunity https://forum.crystal-lang.org/
domainName crystal-lang.org
 registered 2013
 awisRank
  2022 387907
  2017 299324

features
 hasTypeInference true
 hasLineComments true
  # A comment
 hasComments true
  # A comment
 hasMultiLineComments false
 hasPrintDebugging true
 hasSemanticIndentation false
 hasStrings true
  "Hello world"
 hasBooleans true
 hasImports true
  require "../../spec_helper"
 hasClasses true
 hasFunctions true
 hasConditionals true
 hasWhileLoops true

lineCommentToken #
printToken puts
stringToken "
booleanTokens true false
includeToken require
keywords abstract do if nil? self unless alias else in of sizeof until as elsif include out struct when as? end instance_sizeof pointerof super while asm ensure is_a? private then with begin enum lib protected true yield break extend macro require type case false module rescue typeof class for next return uninitialized def fun nil select union

githubRepo https://github.com/crystal-lang/crystal
 stars 17603
 forks 1349
 subscribers 425
 created 2012
 updated 2022
 firstCommit 2012
 description The Crystal Programming Language
 issues 1466

wikipedia https://en.wikipedia.org/wiki/Crystal_(programming_language)
 example
  channel = Channel(Int32).new
  
  spawn do
    puts "Before first send"
    channel.send(1)
    puts "Before second send"
    channel.send(2)
  end
  
  puts "Before first receive"
  value = channel.receive
  puts value # => 1
  
  puts "Before second receive"
  value = channel.receive
  puts value # => 2
 related ia-32 freebsd ruby c rust go csharp python llvmir csp
 summary In computer software programming languages, Crystal is a general-purpose, object-oriented programming language, designed and developed by Ary Borenszweig and Juan Wajnerman and more than 200 contributors. With syntax inspired by the language Ruby, it is a compiled language with static type-checking, but specifying the types of variables or method arguments is generally unneeded. Types are resolved by an advanced global type inference algorithm. Crystal is in active development. It is released as free and open-source software under the Apache License version 2.0
 pageId 48972626
 dailyPageViews 143
 created 2016
 backlinksCount 31
 revisionCount 95
 appeared 2014
 fileExtensions cr

githubLanguage Crystal
 fileExtensions cr
 trendingProjects
  author name avatar url language languageColor stars forks currentPeriodStars description
  omarroth invidious https://github.com/omarroth.png https://github.com/omarroth/invidious Crystal #000100 1184 86 154 "Invidious is an alternative front-end to YouTube"
  crystal-lang crystal https://github.com/crystal-lang.png https://github.com/crystal-lang/crystal Crystal #000100 13807 1071 172 "The Crystal Programming Language"
 trendingProjectsCount 3
 type programming
 interpreters crystal
 ace_mode ruby
 codemirror_mode crystal
 codemirror_mime_type text/x-crystal
 tm_scope source.crystal
 repos 7522
githubBigQuery Crystal
 repos 1197
 users 767

pygmentsHighlighter Crystal
 filename crystal.py
 fileExtensions cr
linguistGrammarRepo https://github.com/atom-crystal/language-crystal
 firstCommit 2013
 lastCommit 2018
 committerCount 47
 commitCount 320
 sampleCount 3
 example
  #!/usr/bin/env bin/crystal --run
  require "../../spec_helper"
  
  describe "Type inference: declare var" do
    it "types declare var" do
      assert_type("a :: Int32") { int32 }
    end
  
    it "types declare var and reads it" do
      assert_type("a :: Int32; a") { int32 }
    end
  
    it "types declare var and changes its type" do
      assert_type("a :: Int32; while 1 == 2; a = 'a'; end; a") { union_of(int32, char) }
    end
  
    it "declares instance var which appears in initialize" do
      result = assert_type("
        class Foo
          @x :: Int32
        end
  
        Foo.new") { types["Foo"] }
  
      mod = result.program
  
      foo = mod.types["Foo"] as NonGenericClassType
      foo.instance_vars["@x"].type.should eq(mod.int32)
    end
  
    it "declares instance var of generic class" do
      result = assert_type("
        class Foo(T)
          @x :: T
        end
  
        Foo(Int32).new") do
          foo = types["Foo"] as GenericClassType
          foo_i32 = foo.instantiate([int32] of Type | ASTNode)
          foo_i32.lookup_instance_var("@x").type.should eq(int32)
          foo_i32
      end
    end
  
    it "declares instance var of generic class after reopen" do
      result = assert_type("
        class Foo(T)
        end
  
        f = Foo(Int32).new
  
        class Foo(T)
          @x :: T
        end
  
        f") do
          foo = types["Foo"] as GenericClassType
          foo_i32 = foo.instantiate([int32] of Type | ASTNode)
          foo_i32.lookup_instance_var("@x").type.should eq(int32)
          foo_i32
      end
    end
  
    it "declares an instance variable in initialize" do
      assert_type("
        class Foo
          def initialize
            @x :: Int32
          end
  
          def x
            @x
          end
        end
  
        Foo.new.x
        ") { int32 }
    end
  end
  
languageServerProtocolProject https://github.com/kofno/scry
 writtenIn crystal

projectEuler Crystal
 memberCount
  2019 5
  2022 14
helloWorldCollection Crystal
 # Hello world in Crystal
 
 puts "Hello World"
leachim6 Crystal
 filepath c/Crystal.cr
 fileExtensions cr
 example
  puts "Hello World"
  
rosettaCode Crystal

compilerExplorer Crystal
 example
  # Type your code here, or load an example.
  
  # compile with --prelude=empty
  fun square(num : Int32) : Int32
    num &* num
  end
rijuRepl https://riju.codes/crystal
 example
  puts "Hello, world!"
  
 description General-purpose, object-oriented programming language with syntax inspired by the language Ruby
 fileExtensions cr
 website https://crystal-lang.org/
 githubRepo https://github.com/crystal-lang/crystal
tryItOnline crystal

stackOverflowSurvey
 2021
  users 466
  medianSalary 72400
  fans 790
  percentageUsing 0.01

subreddit https://reddit.com/r/crystal_programming
 memberCount
  2022 4118

tiobe Crystal
 currentRank 24

twitter https://twitter.com/crystallanguage
fileType text
wordRank 2716
isOpenSource true
centralPackageRepositoryCount 0

isbndb 5
 year|publisher|title|authors|isbn13
 2004|Addison-Wesley Professional|Crystal Clear: A Human-Powered Methodology for Small Teams: A Human-Powered Methodology for Small Teams|Cockburn, Alistair and Paul Becker, Alistair|9780201699470
 2004|Bischof Systems|Crystal Reports .net Programming|Bischof and Brian|9780974953656
 2003|McGraw-Hill Education|Crystal Reports Professional Results|Peck, George|9780072230468
 2022|Packt Publishing|Crystal Programming: A project-based introduction to building efficient, safe, and readable web and CLI applications|Dietrich, George and Bernal, Guilherme|9781801818674
 2006|Sams Publishing|Crystal Reports XI Official Guide|Fitzgerald, Neil and et al.|9780672329173

semanticScholar 6
 year|title|doi|citations|influentialCitations|authors|paperId
 2019|Crystal engineering with DNA|10.1038/s41578-019-0087-2|103|1|Christine R Laramy and Matthew N. O’Brien and C. Mirkin|be702265b33ecccf5ecf1bf35ababa13ad58f79a
 2004|FOX: Modular Approach to Crystal Structure Determination from Powder Diffraction|10.4028/www.scientific.net/MSF.443-444.35|34|0|V. Favre-Nicolin and R. Černý|081346105add7ed3877d35b53b208543ff5960f6
 2019|Crystal Gazer|10.1145/3322205.3311080|7|0|Shoaib Akram and Jennifer B. Sartor and K. McKinley and L. Eeckhout|cf37eab0061c177c0287f75b19b36bba9bdd6760
 1991|Crystal Reference Manual Version 3.0|10.21236/ada249323|3|0|M. Jacquemin and J. A. Yang|114368a8e72ce800970d1364f862adb378ae26e6
 2020|3DStructGen: an interactive web-based 3D structure generation for non-periodic molecule and crystal|10.1186/s13321-020-0411-2|2|0|Pin Chen and Yu Wang and Hui Yan and Sen Gao and Zexin Xu and Yangzhong Li and Qing Mo and Junkang Huang and Jun Tao and Gechuanqi Pan and Jiahui Li and Yunfei Du|80162ab0cfccdd5dc49987e9d655d8f689ee09d4
 2020|Simulation of a micro-milling single crystal copper process based on crystal plastic constitutive theory|10.1177/0037549720937051|1|0|Luan Yihan and Meng Xiangyue and Xue Liang and S. Liang and L. Xiaohong|222d3e7de77c7553bdbd4e1d0e133ac548d2034a
