title Limbo
appeared 1995
type pl
creators Rob Pike
website http://www.vitanuova.com/inferno/limbo.html
documentation http://resibots.eu/limbo/
country United States

features
 hasPrintDebugging true
 hasSemanticIndentation false

printToken sys->print

example
 Lock: module
 {
 	PATH:	con "/dis/lib/lock.dis";
 
 	Semaphore: adt {
 		c: chan of int;
 		obtain:	fn(nil: self ref Semaphore);
 		release: fn(nil: self ref Semaphore);
 		new: fn(): ref Semaphore;
 	};
 	
 	init: fn();
 };

wikipedia https://en.wikipedia.org/wiki/Limbo_(programming_language)
 example
  implement Command;
   
   include "sys.m";
       sys: Sys;
   
  
   
   init(Context, nil: list of string)
   {
       sys = load Sys Sys->PATH;
       print("Hello World!\n");
   }
 related c pascal csp alef newsqueak stackless-python go rust ada isbn
 summary Limbo is a programming language for writing distributed systems and is the language used to write applications for the Inferno operating system. It was designed at Bell Labs by Sean Dorward, Phil Winterbottom, and Rob Pike. The Limbo compiler generates architecture-independent object code which is then interpreted by the Dis virtual machine or compiled just before runtime to improve performance. Therefore all Limbo applications are completely portable across all Inferno platforms. Limbo's approach to concurrency was inspired by Hoare's communicating sequential processes (CSP), as implemented and amended in Pike's earlier Newsqueak language and Winterbottom's Alef.
 pageId 236298
 dailyPageViews 73
 created 2003
 backlinksCount 119
 revisionCount 138
 appeared 1995

githubLanguage Limbo
 fileExtensions b m
 trendingProjectsCount 0
 type programming
 ace_mode text
 tm_scope none
 repos 529
githubBigQuery Limbo
 repos 367
 users 360

pygmentsHighlighter Limbo
 filename inferno.py
 fileExtensions b

helloWorldCollection Limbo
 Hello World in Limbo.
 Limbo is the programming language of the Inferno OS
 (from Lucent Bell Labs).
 
 
 implement Cmd;
 
 include "sys.m";
 include "draw.m";
 
 Cmd : module {
     init : fn (ctxt : ref Draw->Context, args : list of string);
 };
 
 init(nil : ref Draw->Context, nil : list of string)
 {
     sys := load Sys Sys->PATH;
     sys->print("Hello World\n");
 }
leachim6 Limbo
 filepath l/Limbo.b
 fileExtensions b
 example
  implement Hello;
  
  include "sys.m";
  	sys: Sys;
  include "draw.m";
  
  Hello: module
  {
  	init:	fn(ctxt: ref Draw->Context, argv: list of string);
  };
  
  init(ctxt: ref Draw->Context, argv: list of string)
  {
  	sys = load Sys Sys->PATH;
  	sys->print("Hello World\n");
  }
  
rosettaCode Limbo

rijuRepl https://riju.codes/limbo
 example
  implement Cmd;
  
  include "sys.m";
  include "draw.m";
  
  Cmd : module {
      init : fn (ctxt : ref Draw->Context, args : list of string);
  };
  
  init(nil : ref Draw->Context, nil : list of string)
  {
      sys := load Sys Sys->PATH;
      sys->print("Hello, world!\n");
  }
  

tiobe Limbo
hopl https://hopl.info/showlanguage.prx?exp=2166

fileType text
isOpenSource true
centralPackageRepositoryCount 0

isbndb 3
 year|publisher|title|authors|isbn13
 2003|Wiley|Inferno Programming with Limbo|Stanley-Marbell, Phillip|9780470843529
 1997|Academic P|Inferno Programming Using Limbo|Steven Breitstein|9780121298708
 20141219|Emereo|Limbo 48 Success Secrets - 48 Most Asked Questions On Limbo - What You Need To Know|Howard Beck|9781488826153

semanticScholar 1
 year|title|doi|citations|influentialCitations|authors|paperId
 1997|Programming in Limbo|10.1109/CMPCON.1997.584719|15|0|S. Dorward and R. Pike and P. Winterbottom|03c5c73f6c1fcd477a1ec80144fe1e14dbb9a2f5
