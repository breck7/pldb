importOnly

foldBreakNode
 cruxFromId
 extends abstractScrollNode
 description Start a new section.
 javascript
  compile() {
   return `</div><div class="scrollFilePageComponent" style="column-count:1;">`
  }
tableSearchNode
 cruxFromId
 extends abstractScrollNode
 description Add table search to the tables
 javascript
  compile() {
   return `
    <script src="../jquery-3.4.1.min.js"></script>
    <script src="../jquery.dataTables.min.js"></script>
    <script>
      $(document).ready( function () {
      const urlSearchParams = new URLSearchParams(window.location.search)
      const params = Object.fromEntries(urlSearchParams.entries())
      $('table').DataTable({"order": [],"paging": false,search:{ search: params.filter || ""}});
    } );
    </script>`
  }
ohayoCodeNode
 extends codeNode
 cruxFromId
 description Provide a direct link to analyze this data in Ohayo.
 javascript
  compile() {
   const link = `https://ohayo.computer?filename=${this.getRootNode().permalink}.ohayo&data=${encodeURIComponent(this.childrenToString())}`
   return `<div class="scrollQuoteComponent">Analyze this data yourself in <a href="${link}">Ohayo</a></div>`
  }
observableNode
 extends abstractScrollNode
 cruxFromId
 cells keywordCell urlCell
 description Provide a direct link to analyze this data in Observable.
 javascript
  compile() {
   return `<div class="scrollQuoteComponent">Analyze this data yourself in <a href="${this.getWord(1)}">Observable</a></div>`
  }
exampleCodeHeaderNode
 todo Could ditch this if Scroll supported HAML style class tags
 cruxFromId
 catchAllCellType stringCell
 extends abstractScrollNode
 javascript
  compile() {
   return `<div class="exampleCodeHeader">${this.getContent()}</div>`
  }
bashNode
 cruxFromId
 description Run a bash oneliner via nodejs and dumps stdout to pre tag.
 catchAllCellType stringCell
 extends abstractScrollNode
 javascript
  compile() {
   const command = this.getContent()
   const file = this.getRootNode().file
   const cwd = file.folder.folder
   const output = require("child_process").execSync(command, {cwd})
   return `<div class="exampleCodeHeader">${command}</div><code class="scrollCodeBlockComponent">${output.toString().trim()}</code>`
  }
monacoEditorNode
 cruxFromId
 extends abstractScrollNode
 description A Monaco code editor.
 baseNodeType blobNode
 example
  monacoEditor javascript
   // Hello world
 javascript
  compile() {
   return `<div id="monacoContainer"></div>
    <script src="../node_modules/monaco-editor/min/vs/loader.js"></script>
    <script>
    require.config({ paths: { vs: '../node_modules/monaco-editor/min/vs' } })
    require(["vs/editor/editor.main"], function() {
      monaco.editor.create(document.getElementById('monacoContainer'), {
          value: \`${this.childrenToString().replace(/\n/g, "\\n")}\`,
          language: '${this.getWord(1)}',
          minimap: {
            enabled: false
        },
        scrollbar: {
            vertical:"hidden",
            horizontal: "hidden",
            handleMouseWheel:false,
        },
        overviewRulerLanes: 0,
        hideCursorInOverviewRuler: true,
        overviewRulerBorder: false,
        wordWrap: 'on',
        //lineNumbers: 'off',
      glyphMargin: false,
      folding: false,
      // Undocumented see https://github.com/Microsoft/vscode/issues/30795#issuecomment-410998882
      lineDecorationsWidth: 10,
      lineNumbersMinChars: 2
        });
      });
    </script>`
  }