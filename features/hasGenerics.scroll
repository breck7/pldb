import header.scroll

title Generics - language feature
printTitle Generics

html
 <a class="trueBaseThemePreviousItem" href="hasGenerators.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="hasGlobalScope.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/Computer.js

mediumColumns 1

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/java.html">Java</a>
 List&lt;String&gt; v = new ArrayList&lt;String&gt;();
 v.add(&quot;test&quot;);
 Integer i = v.get(0); // (type error)  compilation-time error

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/typescript.html">TypeScript</a>
 function identity&lt;T&gt;(arg: T): T {
    return arg;
 }

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/csharp.html">C#</a>
 // Declare the generic class.
 public class GenericList&lt;T&gt;
 {
     public void Add(T input) { }
 }
 class TestGenericList
 {
     private class ExampleClass { }
     static void Main()
     {
         // Declare a list of type int.
         GenericList&lt;int&gt; list1 = new GenericList&lt;int&gt;();
         list1.Add(1);
 
         // Declare a list of type string.
         GenericList&lt;string&gt; list2 = new GenericList&lt;string&gt;();
         list2.Add(&quot;&quot;);
 
         // Declare a list of type ExampleClass.
         GenericList&lt;ExampleClass&gt; list3 = new GenericList&lt;ExampleClass&gt;();
         list3.Add(new ExampleClass());
     }
 }

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/ada.html">Ada</a>
 generic
    Max_Size : Natural; -- a generic formal value
    type Element_Type is private; -- a generic formal type; accepts any nonlimited type
 package Stacks is
    type Size_Type is range 0 .. Max_Size;
    type Stack is limited private;
    procedure Create (S : out Stack;
                      Initial_Size : in Size_Type := Max_Size);
    procedure Push (Into : in out Stack; Element : in Element_Type);
    procedure Pop (From : in out Stack; Element : out Element_Type);
    Overflow : exception;
    Underflow : exception;
 private
    subtype Index_Type is Size_Type range 1 .. Max_Size;
    type Vector is array (Index_Type range &lt;&gt;) of Element_Type;
    type Stack (Allocated_Size : Size_Type := 0) is record
       Top : Index_Type;
       Storage : Vector (1 .. Allocated_Size);
    end record;
 end Stacks;

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/felix.html">Felix</a>
 // generics
 fun g (x) =&gt; f (f x);
 println$ g 1, g &quot;hello&quot;;
 println$ _map f (1,&quot;hello&quot;,2.0);

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/jule.html">Jule</a>
 fn generic_function[T](s: []T) {
     // ...
 }

***

* Languages *with* Generics include <a href="../concepts/java.html">Java</a>, <a href="../concepts/typescript.html">TypeScript</a>, <a href="../concepts/csharp.html">C#</a>, <a href="../concepts/ada.html">Ada</a>, <a href="../concepts/felix.html">Felix</a>, <a href="../concepts/jule.html">Jule</a>

***

* Languages *without* Generics include <a href="../concepts/progsbase.html">progsbase</a>

***

View all concepts with or missing a *hasGenerics* measurement
 link ../lists/explorer.html#columns=rank~id~appeared~tags~creators~hasGenerics&searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22null%22%2C%22data%22%3A%22hasGenerics%22%2C%22origData%22%3A%22hasGenerics%22%2C%22type%22%3A%22num%22%2C%22value%22%3A%5B%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D missing
 link ../lists/explorer.html#columns=rank~id~appeared~tags~creators~hasGenerics&searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22!null%22%2C%22data%22%3A%22hasGenerics%22%2C%22origData%22%3A%22hasGenerics%22%2C%22type%22%3A%22num%22%2C%22value%22%3A%5B%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D with

***

* Read more about Generics on the web: 1.
 https://en.wikipedia.org/wiki/Generic_programming 1.

endColumns

keyboardNav hasGenerators.html hasGlobalScope.html

../footer.scroll
