import header.scroll

title Generators - language feature
printTitle Generators

html
 <a class="trueBaseThemePreviousItem" href="hasGradualTypes.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="hasGenerics.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/Computer.js

mediumColumns 1

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/javascript.html">JavaScript</a>
 function* fibonacci(limit) {
     let [prev, curr] = [0, 1];
     while (!limit || curr &lt;= limit) {
         yield curr;
         [prev, curr] = [curr, prev + curr];
     }
 }
 // bounded by upper limit 10
 for (let n of fibonacci(10)) {
     console.log(n);
 }
 // generator without an upper bound limit
 for (let n of fibonacci()) {
     console.log(n);
     if (n &gt; 10000) break;
 }
 // manually iterating
 let fibGen = fibonacci();
 console.log(fibGen.next().value); // 1
 console.log(fibGen.next().value); // 1
 console.log(fibGen.next().value); // 2
 console.log(fibGen.next().value); // 3
 console.log(fibGen.next().value); // 5
 console.log(fibGen.next().value); // 8
 // picks up from where you stopped
 for (let n of fibGen) {
     console.log(n);
     if (n &gt; 10000) break;
 }

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/python.html">Python</a>
 https://wiki.python.org/moin/Generators

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/ruby.html">Ruby</a>
 # Generator from an Enumerator object
 chars = Enumerator.new([&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;Z&#39;])
 
 4.times { puts chars.next }
 
 # Generator from a block
 count = Enumerator.new do |yielder|
   i = 0
   loop { yielder.yield i += 1 }
 end
 
 100.times { puts count.next }

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/csharp.html">C#</a>
 // Method that takes an iterable input (possibly an array)
 // and returns all even numbers.
 public static IEnumerable&lt;int&gt; GetEven(IEnumerable&lt;int&gt; numbers) {
     foreach (int i in numbers) {
         if ((i % 2) == 0) {
             yield return i;
         }
     }
 }

***

* Languages *with* Generators include <a href="../concepts/javascript.html">JavaScript</a>, <a href="../concepts/python.html">Python</a>, <a href="../concepts/ruby.html">Ruby</a>, <a href="../concepts/csharp.html">C#</a>

***

View all concepts with or missing a *hasGenerators* measurement
 link ../lists/explorer.html#columns=rank~id~appeared~tags~creators~hasGenerators&searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22null%22%2C%22data%22%3A%22hasGenerators%22%2C%22origData%22%3A%22hasGenerators%22%2C%22type%22%3A%22num%22%2C%22value%22%3A%5B%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D missing
 link ../lists/explorer.html#columns=rank~id~appeared~tags~creators~hasGenerators&searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22!null%22%2C%22data%22%3A%22hasGenerators%22%2C%22origData%22%3A%22hasGenerators%22%2C%22type%22%3A%22num%22%2C%22value%22%3A%5B%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D with

***

* Read more about Generators on the web: 1.
 https://en.wikipedia.org/wiki/Generator_(computer_programming) 1.

endColumns

keyboardNav hasGradualTypes.html hasGenerics.html

../footer.scroll
