header.scroll

title Partial Application - language feature
tags Feature
printTitle Partial Application

<a class="trueBaseThemePreviousItem" href="hasPairs.html">&lt;</a>
<a class="trueBaseThemeNextItem" href="hasPatternMatching.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/Computer.js

container 600px

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/javascript.html">JavaScript</a>
 const addNumbers = (num1, num2) =&gt; num1 + num2
 const add5 = num =&gt; addNumbers(10, num)

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/cpp.html">C++</a>
 // http://www.cplusplus.com/reference/functional/bind/
 // bind example
 #include &lt;iostream&gt;     // std::cout
 #include &lt;functional&gt;   // std::bind
 
 // a function: (also works with function object: std::divides&lt;double&gt; my_divide;)
 double my_divide (double x, double y) {return x/y;}
 
 struct MyPair {
   double a,b;
   double multiply() {return a*b;}
 };
 
 int main () {
   using namespace std::placeholders;    // adds visibility of _1, _2, _3,...
 
   // binding functions:
   auto fn_five = std::bind (my_divide,10,2);               // returns 10/2
   std::cout &lt;&lt; fn_five() &lt;&lt; &#39;\n&#39;;                          // 5
 
   auto fn_half = std::bind (my_divide,_1,2);               // returns x/2
   std::cout &lt;&lt; fn_half(10) &lt;&lt; &#39;\n&#39;;                        // 5
 
   auto fn_invert = std::bind (my_divide,_2,_1);            // returns y/x
   std::cout &lt;&lt; fn_invert(10,2) &lt;&lt; &#39;\n&#39;;                    // 0.2
 
   auto fn_rounding = std::bind&lt;int&gt; (my_divide,_1,_2);     // returns int(x/y)
   std::cout &lt;&lt; fn_rounding(10,3) &lt;&lt; &#39;\n&#39;;                  // 3
 
   MyPair ten_two {10,2};
 
   // binding members:
   auto bound_member_fn = std::bind (&amp;MyPair::multiply,_1); // returns x.multiply()
   std::cout &lt;&lt; bound_member_fn(ten_two) &lt;&lt; &#39;\n&#39;;           // 20
 
   auto bound_member_data = std::bind (&amp;MyPair::a,ten_two); // returns ten_two.a
   std::cout &lt;&lt; bound_member_data() &lt;&lt; &#39;\n&#39;;                // 10
 
   return 0;
 }

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/scala.html">Scala</a>
 def add(x: Int, y: Int) = {x+y}; add(1, _: Int)

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/clojure.html">Clojure</a>
 (defn fun-full [x y] (+ x y))
 (fun-full 2 3)
 (def fun-half (partial fun-full 2))
 (fun-half 3)

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/speedie.html">Speedie</a>
 
 main
 &quot;hello world ${app.args[0]}&quot;
 

***

* Languages *with* Partial Application include <a href="../concepts/javascript.html">JavaScript</a>, <a href="../concepts/cpp.html">C++</a>, <a href="../concepts/scala.html">Scala</a>, <a href="../concepts/clojure.html">Clojure</a>, <a href="../concepts/speedie.html">Speedie</a>

***

View all concepts with or missing a *hasPartialApplication* measurement
 link ../lists/explorer.html#columns=rank~id~appeared~tags~creators~hasPartialApplication&searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22null%22%2C%22data%22%3A%22hasPartialApplication%22%2C%22origData%22%3A%22hasPartialApplication%22%2C%22type%22%3A%22num%22%2C%22value%22%3A%5B%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D missing
 link ../lists/explorer.html#columns=rank~id~appeared~tags~creators~hasPartialApplication&searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22!null%22%2C%22data%22%3A%22hasPartialApplication%22%2C%22origData%22%3A%22hasPartialApplication%22%2C%22type%22%3A%22num%22%2C%22value%22%3A%5B%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D with

***

* Read more about Partial Application on the web: 1.
 https://en.wikipedia.org/wiki/Partial_application 1.

keyboardNav hasPairs.html hasPatternMatching.html

../footer.scroll
