Disk Output
===========

with open(&#39;helloworld.txt&#39;, &#39;w&#39;) as filehandle:
 filehandle.write(&#39;Hello, world!\n&#39;)

File.write!(&quot;helloworld.txt&quot;, &quot;Hello, world!\n&quot;)

require(&quot;fs&quot;).writeFileSync(&quot;foo.txt&quot;, &quot;foo&quot;, &quot;utf8&quot;)

write %helloworld.txt &quot;Hello, world!^/&quot;

use std::fs::{open, O_WRONLY}

fn main() {
    let (mut f, _) = open(&quot;myfile.txt&quot;, O_WRONLY, 0)
    let bytes = ([]byte)(&quot;Text to write&quot;)
    f.write(bytes)
    f.close()
}

&quot;helloworld.txt&quot; &lt;~ &quot;Hello, world!\n&quot;

***

Languages *with* Disk Output include Python, Elixir, Node.js, REBOL, Jule, Speedie, Boron

***

Languages *without* Disk Output include CSS, JSON, XML, HAML

***

View all concepts with or missing a *canWriteToDisk* measurement
 https://pldb.io/../lists/explorer.html#columns=rank~id~appeared~tags~creators~canWriteToDisk&searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22null%22%2C%22data%22%3A%22canWriteToDisk%22%2C%22origData%22%3A%22canWriteToDisk%22%2C%22type%22%3A%22num%22%2C%22value%22%3A%5B%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D
 https://pldb.io/../lists/explorer.html#columns=rank~id~appeared~tags~creators~canWriteToDisk&searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22!null%22%2C%22data%22%3A%22canWriteToDisk%22%2C%22origData%22%3A%22canWriteToDisk%22%2C%22type%22%3A%22num%22%2C%22value%22%3A%5B%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D
