import header.scroll

title Macros - language feature
printTitle Macros

html
 <a class="trueBaseThemePreviousItem" href="hasExplicitStandardLibrary.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="hasMagicGettersAndSetters.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/Computer.js

mediumColumns 1

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/c.html">C</a>
 // https://learn.microsoft.com/en-us/cpp/preprocessor/macros-c-cpp?redirectedfrom=MSDN&amp;view=msvc-170
 // https://gcc.gnu.org/onlinedocs/cpp/Macro-Arguments.html
 #define min(X, Y)  ((X) &lt; (Y) ? (X) : (Y))
   x = min(a, b);          →  x = ((a) &lt; (b) ? (a) : (b));
   y = min(1, 2);          →  y = ((1) &lt; (2) ? (1) : (2));
   z = min(a + 28, *p);    →  z = ((a + 28) &lt; (*p) ? (a + 28) : (*p));

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/rust.html">Rust</a>
 // https://doc.rust-lang.org/book/ch19-06-macros.html
 #[macro_export]
 macro_rules! vec {
     ( $( $x:expr ),* ) =&gt; {
         {
             let mut temp_vec = Vec::new();
             $(
                 temp_vec.push($x);
             )*
             temp_vec
         }
     };
 }

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/scala.html">Scala</a>
 // https://docs.scala-lang.org/scala3/guides/macros/macros.html
 import scala.quoted.* // imports Quotes, Expr
 
 def inspectCode(x: Expr[Any])(using Quotes): Expr[Any] =
   println(x.show)
   x

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/clojure.html">Clojure</a>
 ; https://www.braveclojure.com/writing-macros/
 ; https://clojure.org/reference/macros
 (defmacro and
  &quot;Evaluates exprs one at a time, from left to right. If a form
  returns logical false (nil or false), and returns that value and
  doesn&#39;t evaluate any of the other expressions, otherwise it returns
  the value of the last expr. (and) returns true.&quot;
  {:added &quot;1.0&quot;}
  ([] true)
  ([x] x)
  ([x &amp; next]
   `(let [and# ~x]
      (if and# (and ~@next) and#))))

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/elixir.html">Elixir</a>
 # https://hexdocs.pm/elixir/Macro.html
 defmodule Example do
   defmacro macro_inspect(value) do
     IO.inspect(value)
     value
   end
   def fun_inspect(value) do
     IO.inspect(value)
     value
   end
 end

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/erlang.html">Erlang</a>
 -define(Const, Replacement).
 -define(Func(Var1,...,VarN), Replacement).

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/julia.html">Julia</a>
 # https://jkrumbiegel.com/pages/2021-06-07-macros-for-beginners/
 macro show_value(variable)
     quote
         println(&quot;The &quot;, $(string(variable)), &quot; you passed is &quot;, $(esc(variable)))
     end
 end
 
 @show_value(orange)
 @show_value(apple)

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/prolog.html">Prolog</a>
 term_expansion(parent_child(Parent, Child),
              child_parent(Child, Parent)).
 parent_child(trevor, simon).
 % With the above definitions, we can query (even though the predicate child_parent/2 is nowhere explicitly defined in the code above):
 ?- child_parent(Child, Parent).
  Child = simon, Parent = trevor.

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/racket.html">Racket</a>
 ; https://docs.racket-lang.org/guide/macros.html
 (define-syntax-rule (swap x y)
 (let ([tmp x])
   (set! x y)
   (set! y tmp)))

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/nim.html">Nim</a>
 # https://hookrace.net/blog/introduction-to-metaprogramming-in-nim/#macros
 import macros
 dumpTree:
  result = 10

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/scheme.html">Scheme</a>
 (define-syntax backwards
  (syntax-rules ()
    ((_) (syntax-error &quot;(backwards) not allowed&quot;))
    ((_ e) e)
    ((_ e1 ... e2)
     (begin e2 (backwards e1 ...)))))

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/c3.html">C3</a>
 macro square(x)
 {
   return x * x;
 }

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/nemerle.html">Nemerle</a>
 // http://nemerle.org/About
 def title = &quot;Programming language authors&quot;;
 def authors = [&quot;Anders Hejlsberg&quot;, &quot;Simon Peyton-Jones&quot;];
     
 // &#39;xml&#39; - macro from Nemerle.Xml.Macro library which alows to inline XML literals into the nemerle-code
 def html = xml &lt;#
   &lt;html&gt;
     &lt;head&gt;
       &lt;title&gt;$title&lt;/title&gt;
     &lt;/head&gt;
     &lt;body&gt;
       &lt;ul $when(authors.Any())&gt;
         &lt;li $foreach(author in authors)&gt;$author&lt;/li&gt;
       &lt;/ul&gt;
     &lt;/body&gt;
   &lt;/html&gt;
 #&gt;
 Trace.Assert(html.GetType().Equals(typeof(XElement)));
 WriteLine(html.GetType());

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/dylan.html">Dylan</a>
 define macro table
   { table(?table-class:expression, ?table-contents) }
     =&gt; { let ht = make(?table-class); ?table-contents; ht; }
   { table(?rest:*) } =&gt; { table(&lt;table&gt;, ?rest); }
 
   table-contents:
   { } =&gt; { }
   { ?key:expression =&gt; ?value:expression, ... }
     =&gt; { ht[?key] := ?value; ... }
 end macro table
 

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/wax.html">Wax</a>
 (@define MY_CONSTANT 5)
 (@if MY_CONSTANT 5
     (print &quot;yes, it&#39;s&quot;)
     (print @MY_CONSTANT)
 )

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/pike.html">Pike</a>
 #define CYCLES 20

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/groff.html">groff</a>
 .de P
 .  br
 .  sp .8v
 ..

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/arc.html">Arc</a>
 ; http://www.arclanguage.org/tut.txt
 ; We know enough now to start writing macros.  Macros are basically
 ; functions that generate code.  Of course, generating code is easy;
 ; just call list.
 ;
 ; arc&gt; (list &#39;+ 1 2)
 ; (+ 1 2)
 ;
 ; What macros offer is a way of getting code generated this way into
 ; your programs.  Here&#39;s a (rather stupid) macro definition:
 ;
 ; arc&gt; (mac foo ()
 ;        (list &#39;+ 1 2))
 ; *** redefining foo
 ; #3(tagged mac #&lt;procedure&gt;)
 ;
 ; Notice that a macro definition looks exactly like a function
 ; definition, but with def replaced by mac.
 ;
 ; What this macro says is that whenever the expression (foo) occurs
 ; in your code, it shouldn&#39;t be evaluated in the normal way like a
 ; function call.  Instead it should be replaced by the result of
 ; evaluating the body of the macro definition, (list &#39;+ 1 2).
 ; This is called the &quot;expansion&quot; of the macro call.

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/hla.html">High Level Assembly</a>
 // _SortCases_
 //
 //  This routine does a bubble sort on an array
 // of _caseRecord_ objects.  It sorts in ascending
 // order using the &quot;value&quot; field as the key.
 //
 // This is a good old fashioned bubble sort which
 // turns out to be very efficient because:
 //
 //  (1) The list of cases is usually quite small, and
 //  (2) The data is usually already sorted (or mostly sorted).
 
 macro _SortCases_( ary, size ):i, bnd, didswap, temp;
 
     ?bnd := size - 1;
     ?didswap := true;
     #while( didswap )
     
         ?didswap := false;
         ?i := 0;
         #while( i &lt; bnd )
         
             #if( ary[i].value &gt; ary[i+1].value )
             
                 ?temp := ary[i];
                 ?ary[i] := ary[i+1];
                 ?ary[i+1] := temp;
                 ?didswap := true;
                 
             #endif
             ?i := i + 1;
             
         #endwhile
         ?bnd := bnd - 1;
         
     #endwhile;
         
     
 endmacro;

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/bel.html">Bel</a>
 ; A macro is essentially a function that generates code. I would have
 ; liked the first example of a macro to be something simpler, but fn
 ; is the one we need first. So I&#39;ll introduce macros using a simpler
 ; macro that isn&#39;t part of Bel, then explain fn.
 ; Here is a very simple macro:
 (mac nilwith (x)
   (list &#39;cons nil x))

codeWithHeader Example from <b>1 languages</b>: <a href="../concepts/yamp.html">YAMP</a>
 - defmacro:
   name: foo
   args: [who]
   value:
       Hello: who
 - foo:
   who: World

***

* Languages *with* Macros include <a href="../concepts/c.html">C</a>, <a href="../concepts/rust.html">Rust</a>, <a href="../concepts/scala.html">Scala</a>, <a href="../concepts/clojure.html">Clojure</a>, <a href="../concepts/elixir.html">Elixir</a>, <a href="../concepts/erlang.html">Erlang</a>, <a href="../concepts/julia.html">Julia</a>, <a href="../concepts/prolog.html">Prolog</a>, <a href="../concepts/racket.html">Racket</a>, <a href="../concepts/nim.html">Nim</a>, <a href="../concepts/scheme.html">Scheme</a>, <a href="../concepts/factor.html">Factor</a>, <a href="../concepts/c3.html">C3</a>, <a href="../concepts/slope.html">Slope</a>, <a href="../concepts/nemerle.html">Nemerle</a>, <a href="../concepts/dylan.html">Dylan</a>, <a href="../concepts/wax.html">Wax</a>, <a href="../concepts/pike.html">Pike</a>, <a href="../concepts/groff.html">groff</a>, <a href="../concepts/arc.html">Arc</a>, <a href="../concepts/hla.html">High Level Assembly</a>, <a href="../concepts/gerbil.html">Gerbil Scheme</a>, <a href="../concepts/bio.html">Bio</a>, <a href="../concepts/speedie.html">Speedie</a>, <a href="../concepts/bel.html">Bel</a>, <a href="../concepts/yamp.html">YAMP</a>, <a href="../concepts/honu.html">honu</a>

***

* Languages *without* Macros include <a href="../concepts/javascript.html">JavaScript</a>, <a href="../concepts/python.html">Python</a>, <a href="../concepts/java.html">Java</a>, <a href="../concepts/html.html">HTML</a>, <a href="../concepts/xml.html">XML</a>, <a href="../concepts/json.html">JSON</a>, <a href="../concepts/kotlin.html">Kotlin</a>, <a href="../concepts/smalltalk.html">Smalltalk</a>, <a href="../concepts/lil.html">Lil</a>, <a href="../concepts/progsbase.html">progsbase</a>

***

View all concepts with or missing a *hasMacros* measurement
 link ../lists/explorer.html#columns=rank~id~appeared~tags~creators~hasMacros&searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22null%22%2C%22data%22%3A%22hasMacros%22%2C%22origData%22%3A%22hasMacros%22%2C%22type%22%3A%22num%22%2C%22value%22%3A%5B%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D missing
 link ../lists/explorer.html#columns=rank~id~appeared~tags~creators~hasMacros&searchBuilder=%7B%22criteria%22%3A%5B%7B%22condition%22%3A%22!null%22%2C%22data%22%3A%22hasMacros%22%2C%22origData%22%3A%22hasMacros%22%2C%22type%22%3A%22num%22%2C%22value%22%3A%5B%5D%7D%5D%2C%22logic%22%3A%22AND%22%7D with

***

* Read more about Macros on the web: 1.
 https://en.wikipedia.org/wiki/Macro_(computer_science) 1.

endColumns

keyboardNav hasExplicitStandardLibrary.html hasMagicGettersAndSetters.html

../footer.scroll
